(self["webpackChunkstarpyapp"] = self["webpackChunkstarpyapp"] || []).push([["node_modules_react-native-blob-jsi-helper_lib_module_index_js"],{

/***/ "./node_modules/react-native-blob-jsi-helper/lib/module/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-native-blob-jsi-helper/lib/module/index.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! react-native-web/dist/exports/NativeModules */ "./node_modules/react-native-web/dist/exports/NativeModules/index.js"), __webpack_require__(/*! react-native-web/dist/exports/Platform */ "./node_modules/react-native-web/dist/exports/Platform/index.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_exports, _NativeModules, _Platform) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");
  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  exports.getArrayBufferForBlob = getArrayBufferForBlob;
  exports.getBlobForArrayBuffer = getBlobForArrayBuffer;
  _NativeModules = _interopRequireDefault(_NativeModules);
  _Platform = _interopRequireDefault(_Platform);
  var LINKING_ERROR = "The package 'react-native-blob-jsi-helper' doesn't seem to be linked. Make sure: \n\n" + '' + '- You rebuilt the app after installing the package\n' + '- You are not using Expo managed workflow\n';
  var BlobJsiHelper = _NativeModules.default.BlobJsiHelper;
  if (BlobJsiHelper == null) {
    throw new Error(LINKING_ERROR);
  }
  BlobJsiHelper.install();
  function isBlobData(data) {
    return typeof data === 'object' && data != null && 'size' in data && 'offset' in data && 'blobId' in data;
  }
  function getArrayBufferForBlob(blob) {
    var data = blob._data;
    if (!isBlobData(data)) throw new Error('Invalid Blob! Blob did not contain a valid ._data field!');
    var buffer = __webpack_require__.g.getArrayBufferForBlob(data);
    return buffer;
  }
  function getBlobForArrayBuffer(arrayBuffer) {
    if (!(arrayBuffer instanceof ArrayBuffer)) {
      throw new Error('arrayBuffer is not instance of ArrayBuffer!');
    }
    if (arrayBuffer.byteLength < 1) throw new Error('Invalid ArrayBuffer! ArrayBuffer.byteLength has to be greater than 0!');
    var blobData = __webpack_require__.g.getBlobForArrayBuffer(arrayBuffer);
    var data = Object.assign({}, blobData, {
      type: 'blob'
    });
    return {
      data: data,
      _data: data,
      type: 'blob'
    };
  }
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ })

}]);
//# sourceMappingURL=node_modules_react-native-blob-jsi-helper_lib_module_index_js.bundle.web.js.map