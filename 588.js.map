{"version":3,"file":"588.js","mappings":"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","sources":["webpack://StarpyApp/./node_modules/@evolu/common-web/dist/NanoIdGeneratorLive.js","webpack://StarpyApp/./node_modules/@evolu/common-web/dist/PlatformLive.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/effect/src/SynchronizedRef.ts","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Sql.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Db.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Diff.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/alter-table-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/create-index-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/create-schema-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/create-table-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/drop-index-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/drop-schema-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/drop-table-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/add-column-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/column-definition-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/drop-column-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/rename-column-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/check-constraint-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/references-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/default-value-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/generated-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/default-value-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/on-modify-action-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/column-definition-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/modify-column-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/foreign-key-constraint-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/foreign-key-constraint-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/add-constraint-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/unique-constraint-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/drop-constraint-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/alter-column-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/alter-column-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/alter-table-executor.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/alter-table-add-foreign-key-constraint-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/alter-table-drop-constraint-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/primary-constraint-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/add-index-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/alter-table-add-index-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/unique-constraint-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/alter-table-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-transformer.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/create-index-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/create-schema-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/on-commit-action-parse.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/create-table-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/drop-index-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/drop-schema-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/drop-table-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/create-view-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-plugin.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/create-view-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/drop-view-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/drop-view-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/create-type-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/create-type-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/drop-type-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/drop-type-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/identifier-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/schema/schema.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/dynamic/dynamic.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/driver/default-connection-provider.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-executor/default-query-executor.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/util/performance-now.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/driver/runtime-driver.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/driver/single-connection-provider.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/driver/driver.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/util/log.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/kysely.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/util/compilable.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/dialect/dialect-adapter-base.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-adapter.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/driver/dummy-driver.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/operation-node-visitor.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-query-compiler.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Socket.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Evolu.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Model.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Platform.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Sqlite.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Store.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/effect/src/Console.ts","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/dynamic/dynamic-reference-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/unary-operation-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/unary-operation-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/json-path-leg-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/json-path-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/tuple-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/cast-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/expression/expression-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/expression/expression-wrapper.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/alias-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/and-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/binary-operation-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/case-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/column-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/using-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/delete-query-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/from-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/identifier-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/insert-query-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/on-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/join-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/json-operator-chain-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/json-path-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/json-reference-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/limit-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/merge-query-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/operation-node-source.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/operation-node-transformer.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/operator-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/or-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/order-by-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/parens-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/primitive-value-list-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/returning-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/explain-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/output-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/query-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/raw-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/reference-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/schemable-identifier-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/select-all-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/group-by-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/having-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/select-query-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/set-operation-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/table-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/update-query-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/value-list-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/value-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/when-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/where-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/binary-operation-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/data-type-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/data-type-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/expression-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/expression/expression.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/join-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/order-by-item-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/order-by-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/partition-by-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/over-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/join-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/partition-by-item-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/partition-by-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/over-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/parse-utils.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/reference-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/selection-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/select-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/table-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/top-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/top-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/value-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/plugin/with-schema/with-schema-transformer.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/plugin/with-schema/with-schema-plugin.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/case-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/aggregate-function-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/function-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/aggregate-function-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/function-module.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/no-result-error.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/select-modifier-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/offset-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/group-by-item-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/group-by-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/set-operation-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/fetch-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/fetch-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/select-query-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/values-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/default-insert-value-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/insert-values-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/column-update-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/update-set-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/on-duplicate-key-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/insert-result.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/on-conflict-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/on-conflict-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/insert-query-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/delete-result.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/delete-query-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/update-result.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/update-query-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/common-table-expression-name-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/common-table-expression-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/cte-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/with-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/with-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/operation-node/matched-node.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/parser/merge-parser.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/merge-result.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-builder/merge-query-builder.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-creator.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-executor/noop-query-executor.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/util/deferred.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/util/log-once.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/query-executor/query-executor-base.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/util/object-utils.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/util/prevent-await.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/util/random-string.js","webpack://StarpyApp/./node_modules/@evolu/common/node_modules/kysely/dist/esm/util/query-id.js","webpack://StarpyApp/./node_modules/effect/src/internal/layer/circular.ts","webpack://StarpyApp/./node_modules/effect/src/Layer.ts"],"sourcesContent":["import { createNanoIdGeneratorLive } from \"@evolu/common\";\nimport { customAlphabet, nanoid } from \"nanoid\";\nexport const NanoIdGeneratorLive = createNanoIdGeneratorLive(customAlphabet, nanoid);\n","import { AppState, SyncLock, SyncLockAlreadySyncingError, getLockName, } from \"@evolu/common\";\nimport * as Effect from \"effect/Effect\";\nimport * as Layer from \"effect/Layer\";\nexport const AppStateLive = Layer.succeed(AppState, {\n    init: ({ reloadUrl, onRequestSync }) => Effect.sync(() => {\n        if (typeof document === \"undefined\") {\n            return { reset: Effect.void };\n        }\n        const localStorageKey = \"evolu:reloadAllTabs\";\n        const replaceLocation = () => {\n            location.replace(reloadUrl);\n        };\n        window.addEventListener(\"storage\", (e) => {\n            if (e.key === localStorageKey)\n                replaceLocation();\n        });\n        let timer;\n        const handleRequestSyncEvents = () => {\n            if (timer != null)\n                return;\n            onRequestSync();\n            timer = window.setTimeout(() => {\n                timer = null;\n            }, 50);\n        };\n        window.addEventListener(\"online\", handleRequestSyncEvents);\n        document.addEventListener(\"visibilitychange\", () => {\n            if (document.visibilityState !== \"hidden\")\n                handleRequestSyncEvents();\n        });\n        window.addEventListener(\"focus\", handleRequestSyncEvents);\n        const reset = Effect.sync(() => {\n            localStorage.setItem(localStorageKey, Date.now().toString());\n            replaceLocation();\n        });\n        return { reset };\n    }),\n});\nexport const SyncLockLive = Layer.succeed(SyncLock, {\n    tryAcquire: Effect.gen(function* () {\n        yield* Effect.logTrace(\"SyncLock tryAcquire\");\n        const lockName = yield* getLockName(\"SyncLock\");\n        const acquire = Effect.async((resume) => {\n            navigator.locks.request(lockName, { ifAvailable: true }, (lock) => {\n                if (lock == null) {\n                    Effect.logTrace(\"SyncLock not acquired\").pipe(Effect.zipRight(Effect.fail(new SyncLockAlreadySyncingError())), resume);\n                    return;\n                }\n                return new Promise((resolve) => {\n                    Effect.logTrace(\"SyncLock acquired\").pipe(Effect.zipRight(Effect.succeed({\n                        release: Effect.logTrace(\"SyncLock released\").pipe(Effect.tap(Effect.sync(resolve))),\n                    })), resume);\n                });\n            });\n        });\n        const release = ({ release }) => release;\n        return yield* Effect.acquireRelease(acquire, release);\n    }),\n});\n","/**\n * @since 2.0.0\n */\nimport type * as Effect from \"./Effect.js\"\nimport * as circular from \"./internal/effect/circular.js\"\nimport * as ref from \"./internal/ref.js\"\nimport * as internal from \"./internal/synchronizedRef.js\"\nimport type * as Option from \"./Option.js\"\nimport type * as Ref from \"./Ref.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const SynchronizedRefTypeId: unique symbol = circular.SynchronizedTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type SynchronizedRefTypeId = typeof SynchronizedRefTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface SynchronizedRef<in out A> extends SynchronizedRef.Variance<A>, Ref.Ref<A> {\n  modifyEffect<B, E, R>(f: (a: A) => Effect.Effect<readonly [B, A], E, R>): Effect.Effect<B, E, R>\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace SynchronizedRef {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<in out A> {\n    readonly [SynchronizedRefTypeId]: {\n      readonly _A: Types.Invariant<A>\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <A>(value: A) => Effect.Effect<SynchronizedRef<A>> = circular.makeSynchronized\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const get: <A>(self: SynchronizedRef<A>) => Effect.Effect<A> = ref.get\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndSet: {\n  <A>(value: A): (self: Ref.Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref.Ref<A>, value: A): Effect.Effect<A>\n} = ref.getAndSet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdate: {\n  <A>(f: (a: A) => A): (self: Ref.Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref.Ref<A>, f: (a: A) => A): Effect.Effect<A>\n} = ref.getAndUpdate\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdateEffect: {\n  <A, R, E>(f: (a: A) => Effect.Effect<A, E, R>): (self: SynchronizedRef<A>) => Effect.Effect<A, E, R>\n  <A, R, E>(self: SynchronizedRef<A>, f: (a: A) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R>\n} = internal.getAndUpdateEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdateSome: {\n  <A>(pf: (a: A) => Option.Option<A>): (self: Ref.Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref.Ref<A>, pf: (a: A) => Option.Option<A>): Effect.Effect<A>\n} = ref.getAndUpdateSome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdateSomeEffect: {\n  <A, R, E>(pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>): (self: SynchronizedRef<A>) => Effect.Effect<A, E, R>\n  <A, R, E>(self: SynchronizedRef<A>, pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>): Effect.Effect<A, E, R>\n} = internal.getAndUpdateSomeEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modify: {\n  <A, B>(f: (a: A) => readonly [B, A]): (self: SynchronizedRef<A>) => Effect.Effect<B>\n  <A, B>(self: SynchronizedRef<A>, f: (a: A) => readonly [B, A]): Effect.Effect<B>\n} = internal.modify\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modifyEffect: {\n  <A, B, E, R>(f: (a: A) => Effect.Effect<readonly [B, A], E, R>): (self: SynchronizedRef<A>) => Effect.Effect<B, E, R>\n  <A, B, E, R>(self: SynchronizedRef<A>, f: (a: A) => Effect.Effect<readonly [B, A], E, R>): Effect.Effect<B, E, R>\n} = internal.modifyEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modifySome: {\n  <B, A>(\n    fallback: B,\n    pf: (a: A) => Option.Option<readonly [B, A]>\n  ): (self: Ref.Ref<A>) => Effect.Effect<B>\n  <A, B>(\n    self: Ref.Ref<A>,\n    fallback: B,\n    pf: (a: A) => Option.Option<readonly [B, A]>\n  ): Effect.Effect<B>\n} = ref.modifySome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modifySomeEffect: {\n  <A, B, R, E>(\n    fallback: B,\n    pf: (a: A) => Option.Option<Effect.Effect<readonly [B, A], E, R>>\n  ): (self: SynchronizedRef<A>) => Effect.Effect<B, E, R>\n  <A, B, R, E>(\n    self: SynchronizedRef<A>,\n    fallback: B,\n    pf: (a: A) => Option.Option<Effect.Effect<readonly [B, A], E, R>>\n  ): Effect.Effect<B, E, R>\n} = internal.modifySomeEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const set: {\n  <A>(value: A): (self: Ref.Ref<A>) => Effect.Effect<void>\n  <A>(self: Ref.Ref<A>, value: A): Effect.Effect<void>\n} = ref.set\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const setAndGet: {\n  <A>(value: A): (self: Ref.Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref.Ref<A>, value: A): Effect.Effect<A>\n} = ref.setAndGet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const update: {\n  <A>(f: (a: A) => A): (self: Ref.Ref<A>) => Effect.Effect<void>\n  <A>(self: Ref.Ref<A>, f: (a: A) => A): Effect.Effect<void>\n} = ref.update\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateEffect: {\n  <A, R, E>(f: (a: A) => Effect.Effect<A, E, R>): (self: SynchronizedRef<A>) => Effect.Effect<void, E, R>\n  <A, R, E>(self: SynchronizedRef<A>, f: (a: A) => Effect.Effect<A, E, R>): Effect.Effect<void, E, R>\n} = internal.updateEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateAndGet: {\n  <A>(f: (a: A) => A): (self: Ref.Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref.Ref<A>, f: (a: A) => A): Effect.Effect<A>\n} = ref.updateAndGet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateAndGetEffect: {\n  <A, R, E>(f: (a: A) => Effect.Effect<A, E, R>): (self: SynchronizedRef<A>) => Effect.Effect<A, E, R>\n  <A, R, E>(self: SynchronizedRef<A>, f: (a: A) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R>\n} = internal.updateAndGetEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSome: {\n  <A>(f: (a: A) => Option.Option<A>): (self: Ref.Ref<A>) => Effect.Effect<void>\n  <A>(self: Ref.Ref<A>, f: (a: A) => Option.Option<A>): Effect.Effect<void>\n} = ref.updateSome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSomeEffect: {\n  <A, R, E>(\n    pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>\n  ): (self: SynchronizedRef<A>) => Effect.Effect<void, E, R>\n  <A, R, E>(self: SynchronizedRef<A>, pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>): Effect.Effect<void, E, R>\n} = internal.updateSomeEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSomeAndGet: {\n  <A>(pf: (a: A) => Option.Option<A>): (self: Ref.Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref.Ref<A>, pf: (a: A) => Option.Option<A>): Effect.Effect<A>\n} = ref.updateSomeAndGet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSomeAndGetEffect: {\n  <A, R, E>(pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>): (self: SynchronizedRef<A>) => Effect.Effect<A, E, R>\n  <A, R, E>(self: SynchronizedRef<A>, pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>): Effect.Effect<A, E, R>\n} = circular.updateSomeAndGetEffectSynchronized\n\n/**\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: <A>(value: A) => SynchronizedRef<A> = circular.unsafeMakeSynchronized\n","export const selectOwner = {\n    sql: `select \"id\", \"mnemonic\", \"encryptionKey\" from \"evolu_owner\"`,\n};\nexport const createMessageTable = {\n    sql: `create table \"evolu_message\" (\"timestamp\" blob primary key, \"table\" blob, \"row\" blob, \"column\" blob, \"value\" blob)`,\n};\nexport const createMessageTableIndex = {\n    sql: `create index \"index_evolu_message\" on \"evolu_message\" (\"table\", \"row\", \"column\", \"timestamp\" desc)`,\n};\nexport const createOwnerTable = {\n    sql: `create table \"evolu_owner\" (\"id\" blob, \"mnemonic\" blob, \"encryptionKey\" blob, \"timestamp\" blob, \"merkleTree\" blob)`,\n};\nexport const insertOwner = {\n    sql: `insert into \"evolu_owner\" (\"id\", \"mnemonic\", \"encryptionKey\", \"timestamp\", \"merkleTree\") values (?, ?, ?, ?, ?)`,\n};\nexport const selectOwnerTimestampAndMerkleTree = {\n    sql: `select \"timestamp\", \"merkleTree\" from \"evolu_owner\"`,\n};\nexport const selectLastTimestampForTableRowColumn = {\n    sql: `select \"timestamp\" from \"evolu_message\" where \"table\" = ? and \"row\" = ? and \"column\" = ? order by \"timestamp\" desc limit ?`,\n};\nexport const insertIntoMessagesIfNew = {\n    sql: `insert into \"evolu_message\" (\"timestamp\", \"table\", \"row\", \"column\", \"value\") values (?, ?, ?, ?, ?) on conflict do nothing`,\n};\nexport const updateOwnerTimestampAndMerkleTree = {\n    sql: `update \"evolu_owner\" set \"merkleTree\" = ?, \"timestamp\" = ?`,\n};\nexport const selectMessagesToSync = {\n    sql: `select * from \"evolu_message\" where \"timestamp\" >= ? order by \"timestamp\"`,\n};\n","import * as S from \"@effect/schema/Schema\";\nimport * as Arr from \"effect/Array\";\nimport * as Console from \"effect/Console\";\nimport * as Context from \"effect/Context\";\nimport * as Deferred from \"effect/Deferred\";\nimport * as Effect from \"effect/Effect\";\nimport { constVoid, pipe } from \"effect/Function\";\nimport * as Option from \"effect/Option\";\nimport * as Predicate from \"effect/Predicate\";\nimport * as Ref from \"effect/Ref\";\nimport * as Schedule from \"effect/Schedule\";\nimport * as String from \"effect/String\";\nimport * as SynchronizedRef from \"effect/SynchronizedRef\";\nimport { Time, diffMerkleTrees, initialMerkleTree, insertIntoMerkleTree, makeInitialTimestamp, makeSyncTimestamp, merkleTreeToString, receiveTimestamp, sendTimestamp, timestampToString, unsafeTimestampFromString, } from \"./Crdt.js\";\nimport { NanoIdGenerator } from \"./Crypto.js\";\nimport { makePatches } from \"./Diff.js\";\nimport { ensureTransferableError, makeUnexpectedError, } from \"./Error.js\";\nimport { cast } from \"./Model.js\";\nimport { Owner, makeOwner } from \"./Owner.js\";\nimport { SyncLock } from \"./Platform.js\";\nimport * as Sql from \"./Sql.js\";\nimport { Sqlite, SqliteFactory, drawSqliteQueryPlan, isJsonObjectOrArray, } from \"./Sqlite.js\";\nimport { Sync, SyncFactory, } from \"./Sync.js\";\nexport const Index = S.Struct({\n    name: S.String,\n    sql: S.String,\n});\nexport class DbFactory extends Context.Tag(\"DbFactory\")() {\n}\nexport const createDb = Effect.gen(function* () {\n    const { createSqlite } = yield* SqliteFactory;\n    const { createSync } = yield* SyncFactory;\n    const initContext = Context.empty().pipe(Context.add(NanoIdGenerator, yield* NanoIdGenerator), Context.add(Time, yield* Time), Context.add(SyncLock, yield* SyncLock));\n    const afterInitContext = yield* Deferred.make();\n    const afterInit = (options) => (effect) => Effect.flatMap(Deferred.await(afterInitContext), (context) => Effect.flatMap(Sqlite, (sqlite) => sqlite.transaction(options.transaction)(effect)).pipe(Effect.provide(context)));\n    const queryRowsRef = yield* SynchronizedRef.make(new Map());\n    const db = {\n        init: (schema, initialData, onError, onSyncStateChange, onReceive, mnemonic) => Effect.gen(function* () {\n            yield* Effect.logDebug([\"Db init\", { schema }]);\n            const sqlite = yield* createSqlite;\n            const contextWithSqlite = Context.add(initContext, Sqlite, sqlite);\n            const owner = yield* getSchema.pipe(Effect.tap(ensureSchema(schema)), Effect.flatMap((currentSchema) => {\n                if (currentSchema.tables.map((t) => t.name).includes(\"evolu_owner\"))\n                    return readOwner;\n                return createOwner(mnemonic).pipe(Effect.tap(applyMutations(initialData)));\n            }), sqlite.transaction(\"exclusive\"), Effect.provide(contextWithSqlite));\n            const sync = yield* createSync.pipe(Effect.provide(initContext));\n            yield* sync.init(owner);\n            Deferred.unsafeDone(afterInitContext, Effect.succeed(contextWithSqlite.pipe(Context.add(Owner, owner), Context.add(Sync, sync), Context.add(Callbacks, { onError, onSyncStateChange, onReceive }))));\n            return owner;\n        }),\n        loadQueries: (queries) => Effect.logDebug([\"Db loadQueries\", { queries }]).pipe(Effect.zipRight(loadQueries(queries, queryRowsRef)), afterInit({ transaction: \"shared\" })),\n        mutate: (mutations, queriesToRefresh) => Effect.gen(function* () {\n            yield* Effect.logDebug([\"Db mutate\", { mutations, queriesToRefresh }]);\n            const time = yield* Time;\n            const sqlite = yield* Sqlite;\n            const [toSyncMutations, localOnlyMutations] = Arr.partition(mutations, \n            /** Table name starting with '_' is local only (not synced). */\n            (mutation) => mutation.table.startsWith(\"_\"));\n            for (const mutation of localOnlyMutations) {\n                const isDeleteMutation = mutationToNewMessages(mutation).some(({ column, value }) => column === \"isDeleted\" && value === 1);\n                if (isDeleteMutation) {\n                    yield* sqlite.exec({\n                        sql: `delete from \"${mutation.table}\" where \"id\" = ?;`,\n                        parameters: [mutation.id],\n                    });\n                }\n                else {\n                    const messages = mutationToNewMessages(mutation);\n                    for (const message of messages) {\n                        const now = yield* time.now;\n                        yield* upsertValueIntoTableRowColumn(message, messages, now);\n                    }\n                }\n            }\n            if (toSyncMutations.length > 0) {\n                yield* Effect.tap(applyMutations(toSyncMutations), forkSync);\n            }\n            return yield* loadQueries(queriesToRefresh, queryRowsRef);\n        }).pipe(afterInit({ transaction: \"exclusive\" })),\n        resetOwner: () => Effect.logTrace(\"Db resetOwner\").pipe(Effect.tap(dropAllTables), afterInit({ transaction: \"last\" })),\n        restoreOwner: (schema, mnemonic) => Effect.logTrace(\"Db restoreOwner\").pipe(Effect.tap(dropAllTables), Effect.tap(Effect.flatMap(getSchema, ensureSchema(schema))), Effect.tap(createOwner(mnemonic)), afterInit({ transaction: \"last\" })),\n        ensureSchema: (schema) => getSchema.pipe(Effect.flatMap(ensureSchema(schema)), afterInit({ transaction: \"exclusive\" })),\n        sync: (queriesToRefresh) => Effect.logDebug([\"Db sync\", { queriesToRefresh }]).pipe(Effect.zipRight(forkSync()), Effect.zipRight(loadQueries(queriesToRefresh, queryRowsRef)), afterInit({ transaction: \"shared\" })),\n        exportDatabase: () => Effect.logTrace(\"Db exportDatabase\").pipe(Effect.zipRight(Sqlite), Effect.flatMap((sqlite) => sqlite.export()), afterInit({ transaction: \"exclusive\" })),\n        // TODO:\n        // dispose: () =>\n        //   Effect.logTrace(\"Db dispose\").pipe(\n        //     Effect.tap(Scope.close(scope, Exit.succeed(\"Db disposed\"))),\n        //     afterInit({ transaction: \"last\" }),\n        //   ),\n    };\n    return db;\n});\nexport const Callbacks = Context.GenericTag(\"Callbacks\");\nconst loadQueries = (queries, queryRowsRef) => Effect.gen(function* () {\n    const sqlite = yield* Sqlite;\n    const previousState = yield* SynchronizedRef.getAndUpdateEffect(queryRowsRef, (previousState) => Effect.map(Effect.forEach(queries, (query) => {\n        const sqliteQuery = deserializeQuery(query);\n        return sqlite.exec(sqliteQuery).pipe(Effect.tap(maybeExplainQueryPlan(sqliteQuery)), Effect.map(({ rows }) => [query, rows]));\n    }), (queriesRows) => new Map([...previousState, ...queriesRows])));\n    const currentState = yield* SynchronizedRef.get(queryRowsRef);\n    return queries.map((query) => ({\n        query,\n        patches: makePatches(previousState.get(query), currentState.get(query) || []),\n    }));\n});\nconst maybeExplainQueryPlan = (sqliteQuery) => {\n    if (!sqliteQuery.options?.logExplainQueryPlan)\n        return Effect.void;\n    return Sqlite.pipe(Effect.flatMap((sqlite) => sqlite.exec({\n        ...sqliteQuery,\n        sql: `EXPLAIN QUERY PLAN ${sqliteQuery.sql}`,\n    })), Effect.tap(Console.log(\"ExplainQueryPlan\", sqliteQuery)), Effect.tap(({ rows }) => Console.log(drawSqliteQueryPlan(rows))), Effect.map(constVoid));\n};\nconst getSchema = Effect.gen(function* (_) {\n    yield* Effect.logTrace(\"Db getSchema\");\n    const sqlite = yield* Sqlite;\n    const tables = yield* Effect.map(sqlite.exec({\n        // https://til.simonwillison.net/sqlite/list-all-columns-in-a-database\n        sql: `\nselect\n  sqlite_master.name as tableName,\n  table_info.name as columnName\nfrom\n  sqlite_master\n  join pragma_table_info(sqlite_master.name) as table_info\n    `.trim(),\n    }), ({ rows }) => {\n        const map = new Map();\n        rows.forEach((row) => {\n            const { tableName, columnName } = row;\n            if (!map.has(tableName))\n                map.set(tableName, []);\n            map.get(tableName)?.push(columnName);\n        });\n        return globalThis.Array.from(map, ([name, columns]) => ({\n            name,\n            columns,\n        }));\n    });\n    const indexes = yield* Effect.map(sqlite.exec({\n        sql: `\nselect\n  name, sql\nfrom\n  sqlite_master\nwhere\n  type='index' and\n  name not like 'sqlite_%' and\n  name not like 'index_evolu_%'\n`.trim(),\n    }), (result) => Arr.map(result.rows, (row) => ({\n        name: row.name,\n        /**\n         * SQLite returns \"CREATE INDEX\" for \"create index\" for some reason.\n         * Other keywords remain unchanged. We have to normalize the casing\n         * for `indexEquivalence` manually.\n         */\n        sql: row.sql.replace(\"CREATE INDEX\", \"create index\"),\n    })));\n    return { tables, indexes };\n});\nconst ensureSchema = (newSchema) => (currentSchema) => Effect.gen(function* () {\n    yield* Effect.logTrace(\"Db ensureSchema\");\n    const sql = [];\n    newSchema.tables.forEach((table) => {\n        const currentTable = currentSchema.tables.find((t) => t.name === table.name);\n        if (!currentTable) {\n            sql.push(`\n  create table ${table.name} (\n    \"id\" text primary key,\n    ${table.columns\n                .filter((c) => c !== \"id\")\n                // \"A column with affinity BLOB does not prefer one storage class over another\n                // and no attempt is made to coerce data from one storage class into another.\"\n                // https://www.sqlite.org/datatype3.html\n                .map((name) => `\"${name}\" blob`)\n                .join(\", \")}\n  );`.trim());\n        }\n        else {\n            Arr.differenceWith(String.Equivalence)(table.columns, currentTable.columns).forEach((newColumn) => {\n                sql.push(`alter table \"${table.name}\" add column \"${newColumn}\" blob;`);\n            });\n        }\n    });\n    // Remove old indexes.\n    Arr.differenceWith(indexEquivalence)(currentSchema.indexes, Arr.intersectionWith(indexEquivalence)(currentSchema.indexes, newSchema.indexes)).forEach((indexToDrop) => {\n        sql.push(`drop index \"${indexToDrop.name}\";`);\n    });\n    // Add new indexes.\n    Arr.differenceWith(indexEquivalence)(newSchema.indexes, currentSchema.indexes).forEach((newIndex) => {\n        sql.push(`${newIndex.sql};`);\n    });\n    if (sql.length > 0) {\n        const sqlite = yield* Sqlite;\n        yield* sqlite.exec({ sql: sql.join(\"\\n\") });\n    }\n});\nconst indexEquivalence = (self, that) => self.name === that.name && self.sql === that.sql;\nconst readOwner = Effect.logTrace(\"Db readOwner\").pipe(Effect.zipRight(Sqlite), Effect.flatMap((sqlite) => sqlite.exec(Sql.selectOwner)), Effect.map(({ rows: [row] }) => ({\n    id: row.id,\n    mnemonic: row.mnemonic,\n    encryptionKey: row.encryptionKey,\n})));\nconst createOwner = (mnemonic) => Effect.logTrace(\"Db createOwner\").pipe(Effect.zipRight(Effect.all([makeOwner(mnemonic), Sqlite, makeInitialTimestamp])), Effect.tap(([owner, sqlite, initialTimestampString]) => Effect.all([\n    sqlite.exec(Sql.createMessageTable),\n    sqlite.exec(Sql.createMessageTableIndex),\n    sqlite.exec(Sql.createOwnerTable),\n    sqlite.exec({\n        ...Sql.insertOwner,\n        parameters: [\n            owner.id,\n            owner.mnemonic,\n            owner.encryptionKey,\n            timestampToString(initialTimestampString),\n            merkleTreeToString(initialMerkleTree),\n        ],\n    }),\n])), Effect.map(([owner]) => owner));\nconst applyMutations = (mutations) => Effect.gen(function* (_) {\n    const { timestamp, merkleTree } = yield* readTimestampAndMerkleTree;\n    const [nextTimestamp, messages] = yield* Effect.mapAccum(mutations.flatMap(mutationToNewMessages), timestamp, (currentTimestamp, newMessage) => Effect.map(sendTimestamp(currentTimestamp), (nextTimestamp) => {\n        const message = {\n            ...newMessage,\n            timestamp: timestampToString(nextTimestamp),\n        };\n        return [nextTimestamp, message];\n    }));\n    const nextMerkleTree = yield* applyMessages(merkleTree, messages);\n    yield* writeTimestampAndMerkleTree(nextTimestamp, nextMerkleTree);\n    return messages;\n});\nconst readTimestampAndMerkleTree = Sqlite.pipe(Effect.flatMap((sqlite) => sqlite.exec(Sql.selectOwnerTimestampAndMerkleTree)), Effect.map(({ rows: [{ timestamp, merkleTree }] }) => ({\n    timestamp: unsafeTimestampFromString(timestamp),\n    merkleTree: merkleTree,\n})));\nconst mutationToNewMessages = (mutation) => pipe(Object.entries(mutation.values), Arr.filterMap(([column, value]) => \n// The value can be undefined if exactOptionalPropertyTypes isn't true.\n// Don't insert nulls because null is the default value.\nvalue === undefined || (mutation.isInsert && value == null)\n    ? Option.none()\n    : Option.some([column, value])), Arr.map(([column, value]) => ({\n    table: mutation.table,\n    row: mutation.id,\n    column,\n    value: typeof value === \"boolean\"\n        ? cast(value)\n        : value instanceof Date\n            ? cast(value)\n            : value,\n})));\nconst applyMessages = (merkleTree, messages) => Effect.gen(function* () {\n    const sqlite = yield* Sqlite;\n    for (const message of messages) {\n        const messageTimestamp = unsafeTimestampFromString(message.timestamp);\n        const lastTimestamp = yield* Effect.map(sqlite.exec({\n            ...Sql.selectLastTimestampForTableRowColumn,\n            parameters: [message.table, message.row, message.column, 1],\n        }), ({ rows }) => rows.length > 0 ? rows[0].timestamp : null);\n        if (lastTimestamp == null || lastTimestamp < message.timestamp) {\n            yield* upsertValueIntoTableRowColumn(message, messages, messageTimestamp.millis);\n        }\n        if (lastTimestamp == null || lastTimestamp !== message.timestamp) {\n            const { changes } = yield* sqlite.exec({\n                ...Sql.insertIntoMessagesIfNew,\n                parameters: [\n                    message.timestamp,\n                    message.table,\n                    message.row,\n                    message.column,\n                    message.value,\n                ],\n            });\n            if (changes === 1)\n                merkleTree = insertIntoMerkleTree(merkleTree, messageTimestamp);\n        }\n    }\n    return merkleTree;\n});\nexport const upsertValueIntoTableRowColumn = (message, messages, millis) => Sqlite.pipe(Effect.map((sqlite) => {\n    const now = cast(new Date(millis));\n    return sqlite.exec({\n        sql: `\n    insert into\n      \"${message.table}\" (\"id\", \"${message.column}\", \"createdAt\", \"updatedAt\")\n    values\n      (?, ?, ?, ?)\n    on conflict do update set\n      \"${message.column}\" = ?,\n      \"updatedAt\" = ?\n        `.trim(),\n        parameters: [message.row, message.value, now, now, message.value, now],\n    });\n}), Effect.flatMap((insert) => Effect.catchSomeDefect(insert, (error) => S.is(SqliteNoSuchTableOrColumnError)(error)\n    ? Option.some(\n    // If one message fails, we ensure schema for all messages.\n    ensureSchemaByNewMessages(messages).pipe(Effect.zipRight(insert)))\n    : Option.none())));\nconst SqliteNoSuchTableOrColumnError = S.Struct({\n    message: S.Union(S.String.pipe(S.includes(\"no such table\")), S.String.pipe(S.includes(\"no such column\")), S.String.pipe(S.includes(\"has no column\"))),\n});\nconst ensureSchemaByNewMessages = (messages) => Effect.gen(function* () {\n    const tablesMap = new Map();\n    messages.forEach((message) => {\n        const table = tablesMap.get(message.table);\n        if (table == null) {\n            tablesMap.set(message.table, {\n                name: message.table,\n                columns: [message.column, \"createdAt\", \"updatedAt\"],\n            });\n            return;\n        }\n        if (table.columns.includes(message.column))\n            return;\n        tablesMap.set(message.table, {\n            name: message.table,\n            columns: table.columns.concat(message.column),\n        });\n    });\n    const tables = Arr.fromIterable(tablesMap.values());\n    yield* Effect.flatMap(getSchema, ensureSchema({ tables, indexes: [] }));\n});\nconst writeTimestampAndMerkleTree = (timestamp, merkleTree) => Effect.flatMap(Sqlite, (sqlite) => sqlite.exec({\n    ...Sql.updateOwnerTimestampAndMerkleTree,\n    parameters: [\n        merkleTreeToString(merkleTree),\n        timestampToString(timestamp),\n    ],\n}));\nconst dropAllTables = Effect.gen(function* () {\n    yield* Effect.logTrace(\"Db dropAllTables\");\n    const sqlite = yield* Sqlite;\n    const schema = yield* getSchema;\n    yield* Effect.forEach(schema.tables, (table) => \n    // The dropped table is completely removed from the database schema and\n    // the disk file. The table can not be recovered.\n    // All indices and triggers associated with the table are also deleted.\n    // https://sqlite.org/lang_droptable.html\n    sqlite.exec({ sql: `drop table \"${table.name}\"` }));\n});\nconst forkSync = (messages = []) => SyncLock.pipe(Effect.flatMap((syncLock) => syncLock.tryAcquire), Effect.matchEffect({\n    onFailure: () => Effect.void,\n    onSuccess: () => syncLoop(messages),\n}), Effect.scoped, Effect.forkDaemon);\nconst syncLoop = (messages = []) => Effect.gen(function* (_) {\n    const sqlite = yield* Sqlite;\n    const sync = yield* Sync;\n    const callbacks = yield* Callbacks;\n    const time = yield* Time;\n    const syncDataRef = yield* readTimestampAndMerkleTree.pipe(sqlite.transaction(\"shared\"), Effect.map((a) => ({ ...a, messages })), Effect.flatMap(Ref.make));\n    callbacks.onSyncStateChange({ _tag: \"SyncStateIsSyncing\" });\n    yield* Ref.get(syncDataRef).pipe(Effect.flatMap(sync.sync), Effect.flatMap(handleSyncResult), Effect.repeat({\n        // TODO: Schedule.jittered(Schedule.exponential(\"10 millis\"))\n        schedule: Schedule.recurs(50),\n        until: Option.match({\n            onNone: () => Effect.gen(function* () {\n                callbacks.onSyncStateChange({\n                    _tag: \"SyncStateIsSynced\",\n                    time: yield* time.now,\n                });\n                return true;\n            }),\n            onSome: (syncData) => Effect.gen(function* () {\n                yield* Ref.set(syncDataRef, syncData);\n                return false;\n            }),\n        }),\n    }), Effect.catchAllDefect((error) => \n    // Db can run in a Web Worker, so we must ensure transferable error.\n    Effect.fail(makeUnexpectedError(ensureTransferableError(error)))), Effect.catchTag(\"SyncStateIsNotSynced\", (state) => Effect.succeed(callbacks.onSyncStateChange(state))), Effect.catchAll((error) => Effect.succeed(callbacks.onError(error))));\n});\nconst handleSyncResult = (result) => Effect.flatMap(Sqlite, (sqlite) => Effect.gen(function* (_) {\n    const { onReceive } = yield* Callbacks;\n    const current = yield* readTimestampAndMerkleTree;\n    const nextTimestamp = yield* Effect.reduce(result.messages, current.timestamp, (local, message) => receiveTimestamp({\n        local,\n        remote: unsafeTimestampFromString(message.timestamp),\n    }));\n    const nextMerkleTree = yield* applyMessages(current.merkleTree, result.messages);\n    if (result.messages.length > 0) {\n        yield* writeTimestampAndMerkleTree(nextTimestamp, nextMerkleTree);\n        onReceive();\n    }\n    return yield* diffMerkleTrees(result.merkleTree, nextMerkleTree).pipe(Effect.flatMap((diff) => sqlite.exec({\n        ...Sql.selectMessagesToSync,\n        parameters: [timestampToString(makeSyncTimestamp(diff))],\n    })), Effect.map(({ rows }) => ({\n        messages: rows,\n        merkleTree: nextMerkleTree,\n        timestamp: nextTimestamp,\n    })), Effect.option);\n}).pipe(sqlite.transaction(\"exclusive\")));\n// We use queries as keys, hence JSON.stringify.\nexport const serializeQuery = ({ sql, parameters = [], options, }) => {\n    const query = {\n        sql,\n        parameters: parameters.map((p) => Predicate.isUint8Array(p)\n            ? Arr.fromIterable(p)\n            : isJsonObjectOrArray(p)\n                ? { json: p }\n                : p),\n        ...(options && { options }),\n    };\n    return JSON.stringify(query);\n};\nexport const deserializeQuery = (query) => {\n    const serializedSqliteQuery = JSON.parse(query);\n    return {\n        ...serializedSqliteQuery,\n        parameters: serializedSqliteQuery.parameters.map((p) => Arr.isArray(p)\n            ? new Uint8Array(p)\n            : typeof p === \"object\" && p != null\n                ? p.json\n                : p),\n    };\n};\n// To preserve identity.\nconst _emptyRows = [];\nexport const emptyRows = () => _emptyRows;\n// To preserve identity.\nconst queryResultCache = new WeakMap();\nexport const queryResultFromRows = (rows) => {\n    let queryResult = queryResultCache.get(rows);\n    if (queryResult == null) {\n        queryResult = { rows, row: rows[0] };\n        queryResultCache.set(rows, queryResult);\n    }\n    return queryResult;\n};\nexport const notSupportedPlatformWorker = {\n    init: () => Effect.fail({\n        _tag: \"NotSupportedPlatformError\",\n    }),\n    loadQueries: () => Effect.succeed([]),\n    mutate: () => Effect.succeed([]),\n    resetOwner: () => Effect.void,\n    restoreOwner: () => Effect.void,\n    ensureSchema: () => Effect.void,\n    sync: () => Effect.succeed([]),\n    exportDatabase: () => Effect.succeed(new Uint8Array()),\n};\n","import * as Arr from \"effect/Array\";\nimport * as Predicate from \"effect/Predicate\";\nexport const applyPatches = (patches, current) => patches.reduce((next, patch) => {\n    switch (patch.op) {\n        case \"replaceAll\":\n            return patch.value;\n        case \"replaceAt\": {\n            return Arr.replace(next, patch.index, patch.value);\n        }\n    }\n}, current);\n/**\n * We detect only changes in the whole result and in-place edits. In the future,\n * we will add more heuristics. We will probably not implement the Myers diff\n * algorithm because it's faster to rerender all than to compute many detailed\n * patches. We will only implement logic a developer would implement manually,\n * if necessary.\n */\nexport const makePatches = (previousRows, nextRows) => {\n    if (previousRows === undefined)\n        return [{ op: \"replaceAll\", value: nextRows }];\n    // TODO: Detect prepend and append, it's cheap.\n    if (previousRows.length !== nextRows.length) {\n        return [{ op: \"replaceAll\", value: nextRows }];\n    }\n    const length = previousRows.length;\n    const replaceAtPatches = [];\n    for (let i = 0; i < length; i++) {\n        const previousRow = previousRows[i];\n        const nextRow = nextRows[i];\n        // We expect the same shape for both rows.\n        for (const key in previousRow)\n            if (!areEqual(previousRow[key], nextRow[key])) {\n                replaceAtPatches.push({ op: \"replaceAt\", value: nextRow, index: i });\n                break;\n            }\n    }\n    if (length > 0 && replaceAtPatches.length === length) {\n        return [{ op: \"replaceAll\", value: nextRows }];\n    }\n    return replaceAtPatches;\n};\nexport const areEqual = (a, b) => {\n    // Compare string, number, null ASAP.\n    if (a === b)\n        return true;\n    // Different type works only for string and number, everything else is an object.\n    if (typeof a !== typeof b)\n        return false;\n    // Both are nonnullable objects.\n    if (typeof a === \"object\" && a !== null && b !== null) {\n        const aIsUint8Array = Predicate.isUint8Array(a);\n        const bIsUint8Array = Predicate.isUint8Array(b);\n        if (aIsUint8Array && bIsUint8Array) {\n            if (a.length !== b.length)\n                return false;\n            for (let i = 0; i < a.length; i++)\n                if (a[i] !== b[i])\n                    return false;\n            return true;\n        }\n        const aIsArray = Arr.isArray(a);\n        const bIsArray = Arr.isArray(b);\n        if (aIsArray && bIsArray) {\n            if (a.length !== b.length)\n                return false;\n            for (let i = 0; i < a.length; i++)\n                if (!areEqual(a[i], b[i]))\n                    return false;\n            return true;\n        }\n        if (!aIsUint8Array && !bIsUint8Array && !aIsArray && !bIsArray) {\n            const aKeys = Object.keys(a);\n            const bKeys = Object.keys(b);\n            if (aKeys.length !== bKeys.length)\n                return false;\n            for (const key of aKeys)\n                if (!areEqual(a[key], b[key]))\n                    return false;\n            return true;\n        }\n    }\n    return false;\n};\n","/// <reference types=\"./alter-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AlterTableNode = freeze({\n    is(node) {\n        return node.kind === 'AlterTableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'AlterTableNode',\n            table,\n        });\n    },\n    cloneWithTableProps(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithColumnAlteration(node, columnAlteration) {\n        return freeze({\n            ...node,\n            columnAlterations: node.columnAlterations\n                ? [...node.columnAlterations, columnAlteration]\n                : [columnAlteration],\n        });\n    },\n});\n","/// <reference types=\"./create-index-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CreateIndexNode = freeze({\n    is(node) {\n        return node.kind === 'CreateIndexNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateIndexNode',\n            name: IdentifierNode.create(name),\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithColumns(node, columns) {\n        return freeze({\n            ...node,\n            columns: [...(node.columns || []), ...columns],\n        });\n    },\n});\n","/// <reference types=\"./create-schema-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CreateSchemaNode = freeze({\n    is(node) {\n        return node.kind === 'CreateSchemaNode';\n    },\n    create(schema, params) {\n        return freeze({\n            kind: 'CreateSchemaNode',\n            schema: IdentifierNode.create(schema),\n            ...params,\n        });\n    },\n    cloneWith(createSchema, params) {\n        return freeze({\n            ...createSchema,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./create-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport const ON_COMMIT_ACTIONS = ['preserve rows', 'delete rows', 'drop'];\n/**\n * @internal\n */\nexport const CreateTableNode = freeze({\n    is(node) {\n        return node.kind === 'CreateTableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'CreateTableNode',\n            table,\n            columns: freeze([]),\n        });\n    },\n    cloneWithColumn(createTable, column) {\n        return freeze({\n            ...createTable,\n            columns: freeze([...createTable.columns, column]),\n        });\n    },\n    cloneWithConstraint(createTable, constraint) {\n        return freeze({\n            ...createTable,\n            constraints: createTable.constraints\n                ? freeze([...createTable.constraints, constraint])\n                : freeze([constraint]),\n        });\n    },\n    cloneWithFrontModifier(createTable, modifier) {\n        return freeze({\n            ...createTable,\n            frontModifiers: createTable.frontModifiers\n                ? freeze([...createTable.frontModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWithEndModifier(createTable, modifier) {\n        return freeze({\n            ...createTable,\n            endModifiers: createTable.endModifiers\n                ? freeze([...createTable.endModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWith(createTable, params) {\n        return freeze({\n            ...createTable,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./drop-index-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const DropIndexNode = freeze({\n    is(node) {\n        return node.kind === 'DropIndexNode';\n    },\n    create(name, params) {\n        return freeze({\n            kind: 'DropIndexNode',\n            name: SchemableIdentifierNode.create(name),\n            ...params,\n        });\n    },\n    cloneWith(dropIndex, props) {\n        return freeze({\n            ...dropIndex,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./drop-schema-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const DropSchemaNode = freeze({\n    is(node) {\n        return node.kind === 'DropSchemaNode';\n    },\n    create(schema, params) {\n        return freeze({\n            kind: 'DropSchemaNode',\n            schema: IdentifierNode.create(schema),\n            ...params,\n        });\n    },\n    cloneWith(dropSchema, params) {\n        return freeze({\n            ...dropSchema,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./drop-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DropTableNode = freeze({\n    is(node) {\n        return node.kind === 'DropTableNode';\n    },\n    create(table, params) {\n        return freeze({\n            kind: 'DropTableNode',\n            table,\n            ...params,\n        });\n    },\n    cloneWith(dropIndex, params) {\n        return freeze({\n            ...dropIndex,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./add-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AddColumnNode = freeze({\n    is(node) {\n        return node.kind === 'AddColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'AddColumnNode',\n            column,\n        });\n    },\n});\n","/// <reference types=\"./column-definition-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const ColumnDefinitionNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnDefinitionNode';\n    },\n    create(column, dataType) {\n        return freeze({\n            kind: 'ColumnDefinitionNode',\n            column: ColumnNode.create(column),\n            dataType,\n        });\n    },\n    cloneWithFrontModifier(node, modifier) {\n        return freeze({\n            ...node,\n            frontModifiers: node.frontModifiers\n                ? freeze([...node.frontModifiers, modifier])\n                : [modifier],\n        });\n    },\n    cloneWithEndModifier(node, modifier) {\n        return freeze({\n            ...node,\n            endModifiers: node.endModifiers\n                ? freeze([...node.endModifiers, modifier])\n                : [modifier],\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./drop-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const DropColumnNode = freeze({\n    is(node) {\n        return node.kind === 'DropColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'DropColumnNode',\n            column: ColumnNode.create(column),\n        });\n    },\n});\n","/// <reference types=\"./rename-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const RenameColumnNode = freeze({\n    is(node) {\n        return node.kind === 'RenameColumnNode';\n    },\n    create(column, newColumn) {\n        return freeze({\n            kind: 'RenameColumnNode',\n            column: ColumnNode.create(column),\n            renameTo: ColumnNode.create(newColumn),\n        });\n    },\n});\n","/// <reference types=\"./check-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CheckConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'CheckConstraintNode';\n    },\n    create(expression, constraintName) {\n        return freeze({\n            kind: 'CheckConstraintNode',\n            expression,\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n});\n","/// <reference types=\"./references-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport const ON_MODIFY_FOREIGN_ACTIONS = [\n    'no action',\n    'restrict',\n    'cascade',\n    'set null',\n    'set default',\n];\n/**\n * @internal\n */\nexport const ReferencesNode = freeze({\n    is(node) {\n        return node.kind === 'ReferencesNode';\n    },\n    create(table, columns) {\n        return freeze({\n            kind: 'ReferencesNode',\n            table,\n            columns: freeze([...columns]),\n        });\n    },\n    cloneWithOnDelete(references, onDelete) {\n        return freeze({\n            ...references,\n            onDelete,\n        });\n    },\n    cloneWithOnUpdate(references, onUpdate) {\n        return freeze({\n            ...references,\n            onUpdate,\n        });\n    },\n});\n","/// <reference types=\"./default-value-parser.d.ts\" />\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nexport function parseDefaultValueExpression(value) {\n    return isOperationNodeSource(value)\n        ? value.toOperationNode()\n        : ValueNode.createImmediate(value);\n}\n","/// <reference types=\"./generated-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GeneratedNode = freeze({\n    is(node) {\n        return node.kind === 'GeneratedNode';\n    },\n    create(params) {\n        return freeze({\n            kind: 'GeneratedNode',\n            ...params,\n        });\n    },\n    createWithExpression(expression) {\n        return freeze({\n            kind: 'GeneratedNode',\n            always: true,\n            expression,\n        });\n    },\n    cloneWith(node, params) {\n        return freeze({\n            ...node,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./default-value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DefaultValueNode = freeze({\n    is(node) {\n        return node.kind === 'DefaultValueNode';\n    },\n    create(defaultValue) {\n        return freeze({\n            kind: 'DefaultValueNode',\n            defaultValue,\n        });\n    },\n});\n","/// <reference types=\"./on-modify-action-parser.d.ts\" />\nimport { ON_MODIFY_FOREIGN_ACTIONS, } from '../operation-node/references-node.js';\nexport function parseOnModifyForeignAction(action) {\n    if (ON_MODIFY_FOREIGN_ACTIONS.includes(action)) {\n        return action;\n    }\n    throw new Error(`invalid OnModifyForeignAction ${action}`);\n}\n","/// <reference types=\"./column-definition-builder.d.ts\" />\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\nimport { ReferencesNode, } from '../operation-node/references-node.js';\nimport { SelectAllNode } from '../operation-node/select-all-node.js';\nimport { parseStringReference } from '../parser/reference-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { parseDefaultValueExpression, } from '../parser/default-value-parser.js';\nimport { GeneratedNode } from '../operation-node/generated-node.js';\nimport { DefaultValueNode } from '../operation-node/default-value-node.js';\nimport { parseOnModifyForeignAction } from '../parser/on-modify-action-parser.js';\nexport class ColumnDefinitionBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /**\n     * Adds `auto_increment` or `autoincrement` to the column definition\n     * depending on the dialect.\n     *\n     * Some dialects like PostgreSQL don't support this. On PostgreSQL\n     * you can use the `serial` or `bigserial` data type instead.\n     */\n    autoIncrement() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { autoIncrement: true }));\n    }\n    /**\n     * Makes the column an identity column.\n     *\n     * This only works on some dialects like MS SQL Server (MSSQL).\n     *\n     * For PostgreSQL's `generated always as identity` use {@link generatedAlwaysAsIdentity}.\n     */\n    identity() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { identity: true }));\n    }\n    /**\n     * Makes the column the primary key.\n     *\n     * If you want to specify a composite primary key use the\n     * {@link CreateTableBuilder.addPrimaryKeyConstraint} method.\n     */\n    primaryKey() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { primaryKey: true }));\n    }\n    /**\n     * Adds a foreign key constraint for the column.\n     *\n     * If your database engine doesn't support foreign key constraints in the\n     * column definition (like MySQL 5) you need to call the table level\n     * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * col.references('person.id')\n     * ```\n     */\n    references(ref) {\n        const references = parseStringReference(ref);\n        if (!references.table || SelectAllNode.is(references.column)) {\n            throw new Error(`invalid call references('${ref}'). The reference must have format table.column or schema.table.column`);\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.create(references.table, [\n                references.column,\n            ]),\n        }));\n    }\n    /**\n     * Adds an `on delete` constraint for the foreign key column.\n     *\n     * If your database engine doesn't support foreign key constraints in the\n     * column definition (like MySQL 5) you need to call the table level\n     * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * col.references('person.id').onDelete('cascade')\n     * ```\n     */\n    onDelete(onDelete) {\n        if (!this.#node.references) {\n            throw new Error('on delete constraint can only be added for foreign keys');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.cloneWithOnDelete(this.#node.references, parseOnModifyForeignAction(onDelete)),\n        }));\n    }\n    /**\n     * Adds an `on update` constraint for the foreign key column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * col.references('person.id').onUpdate('cascade')\n     * ```\n     */\n    onUpdate(onUpdate) {\n        if (!this.#node.references) {\n            throw new Error('on update constraint can only be added for foreign keys');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.cloneWithOnUpdate(this.#node.references, parseOnModifyForeignAction(onUpdate)),\n        }));\n    }\n    /**\n     * Adds a unique constraint for the column.\n     */\n    unique() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { unique: true }));\n    }\n    /**\n     * Adds a `not null` constraint for the column.\n     */\n    notNull() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { notNull: true }));\n    }\n    /**\n     * Adds a `unsigned` modifier for the column.\n     *\n     * This only works on some dialects like MySQL.\n     */\n    unsigned() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { unsigned: true }));\n    }\n    /**\n     * Adds a default value constraint for the column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema\n     *   .createTable('pet')\n     *   .addColumn('number_of_legs', 'integer', (col) => col.defaultTo(4))\n     *   .execute()\n     * ```\n     *\n     * Values passed to `defaultTo` are interpreted as value literals by default. You can define\n     * an arbitrary SQL expression using the {@link sql} template tag:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * db.schema\n     *   .createTable('pet')\n     *   .addColumn(\n     *     'number_of_legs',\n     *     'integer',\n     *     (col) => col.defaultTo(sql`any SQL here`)\n     *   )\n     *   .execute()\n     * ```\n     */\n    defaultTo(value) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            defaultTo: DefaultValueNode.create(parseDefaultValueExpression(value)),\n        }));\n    }\n    /**\n     * Adds a check constraint for the column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * db.schema\n     *   .createTable('pet')\n     *   .addColumn('number_of_legs', 'integer', (col) =>\n     *     col.check(sql`number_of_legs < 5`)\n     *   )\n     *   .execute()\n     * ```\n     */\n    check(expression) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            check: CheckConstraintNode.create(expression.toOperationNode()),\n        }));\n    }\n    /**\n     * Makes the column a generated column using a `generated always as` statement.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * db.schema\n     *   .createTable('person')\n     *   .addColumn('full_name', 'varchar(255)',\n     *     (col) => col.generatedAlwaysAs(sql`concat(first_name, ' ', last_name)`)\n     *   )\n     *   .execute()\n     * ```\n     */\n    generatedAlwaysAs(expression) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.createWithExpression(expression.toOperationNode()),\n        }));\n    }\n    /**\n     * Adds the `generated always as identity` specifier.\n     *\n     * This only works on some dialects like PostgreSQL.\n     *\n     * For MS SQL Server (MSSQL)'s identity column use {@link identity}.\n     */\n    generatedAlwaysAsIdentity() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.create({ identity: true, always: true }),\n        }));\n    }\n    /**\n     * Adds the `generated by default as identity` specifier on supported dialects.\n     */\n    generatedByDefaultAsIdentity() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.create({ identity: true, byDefault: true }),\n        }));\n    }\n    /**\n     * Makes a generated column stored instead of virtual. This method can only\n     * be used with {@link generatedAlwaysAs}\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema\n     *   .createTable('person')\n     *   .addColumn('full_name', 'varchar(255)', (col) => col\n     *     .generatedAlwaysAs(\"concat(first_name, ' ', last_name)\")\n     *     .stored()\n     *   )\n     *   .execute()\n     * ```\n     */\n    stored() {\n        if (!this.#node.generated) {\n            throw new Error('stored() can only be called after generatedAlwaysAs');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.cloneWith(this.#node.generated, {\n                stored: true,\n            }),\n        }));\n    }\n    /**\n     * This can be used to add any additional SQL right after the column's data type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *  .addColumn('id', 'integer', col => col.primaryKey())\n     *  .addColumn('first_name', 'varchar(36)', col => col.modifyFront(sql`collate utf8mb4_general_ci`).notNull())\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `first_name` varchar(36) collate utf8mb4_general_ci not null\n     * )\n     * ```\n     */\n    modifyFront(modifier) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWithFrontModifier(this.#node, modifier.toOperationNode()));\n    }\n    /**\n     * Adds `nulls not distinct` specifier.\n     * Should be used with `unique` constraint.\n     *\n     * This only works on some dialects like PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *  .addColumn('id', 'integer', col => col.primaryKey())\n     *  .addColumn('first_name', 'varchar(30)', col => col.unique().nullsNotDistinct())\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create table \"person\" (\n     *   \"id\" integer primary key,\n     *   \"first_name\" varchar(30) unique nulls not distinct\n     * )\n     * ```\n     */\n    nullsNotDistinct() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { nullsNotDistinct: true }));\n    }\n    /**\n     * Adds `if not exists` specifier.\n     * This only works for PostgreSQL.\n     */\n    ifNotExists() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { ifNotExists: true }));\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the column definition.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *  .addColumn('id', 'integer', col => col.primaryKey())\n     *  .addColumn('age', 'integer', col => col.unsigned().notNull().modifyEnd(sql`comment ${sql.lit('it is not polite to ask a woman her age')}`))\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `age` integer unsigned not null comment 'it is not polite to ask a woman her age'\n     * )\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWithEndModifier(this.#node, modifier.toOperationNode()));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\npreventAwait(ColumnDefinitionBuilder, \"don't await ColumnDefinitionBuilder instances directly.\");\n","/// <reference types=\"./modify-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ModifyColumnNode = freeze({\n    is(node) {\n        return node.kind === 'ModifyColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'ModifyColumnNode',\n            column,\n        });\n    },\n});\n","/// <reference types=\"./foreign-key-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\nimport { ReferencesNode } from './references-node.js';\n/**\n * @internal\n */\nexport const ForeignKeyConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'ForeignKeyConstraintNode';\n    },\n    create(sourceColumns, targetTable, targetColumns, constraintName) {\n        return freeze({\n            kind: 'ForeignKeyConstraintNode',\n            columns: sourceColumns,\n            references: ReferencesNode.create(targetTable, targetColumns),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./foreign-key-constraint-builder.d.ts\" />\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { parseOnModifyForeignAction } from '../parser/on-modify-action-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class ForeignKeyConstraintBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    onDelete(onDelete) {\n        return new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {\n            onDelete: parseOnModifyForeignAction(onDelete),\n        }));\n    }\n    onUpdate(onUpdate) {\n        return new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {\n            onUpdate: parseOnModifyForeignAction(onUpdate),\n        }));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\npreventAwait(ForeignKeyConstraintBuilder, \"don't await ForeignKeyConstraintBuilder instances directly.\");\n","/// <reference types=\"./add-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AddConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'AddConstraintNode';\n    },\n    create(constraint) {\n        return freeze({\n            kind: 'AddConstraintNode',\n            constraint,\n        });\n    },\n});\n","/// <reference types=\"./unique-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const UniqueConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'UniqueConstraintNode';\n    },\n    create(columns, constraintName, nullsNotDistinct) {\n        return freeze({\n            kind: 'UniqueConstraintNode',\n            columns: freeze(columns.map(ColumnNode.create)),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n            nullsNotDistinct,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./drop-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const DropConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'DropConstraintNode';\n    },\n    create(constraintName) {\n        return freeze({\n            kind: 'DropConstraintNode',\n            constraintName: IdentifierNode.create(constraintName),\n        });\n    },\n    cloneWith(dropConstraint, props) {\n        return freeze({\n            ...dropConstraint,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./alter-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const AlterColumnNode = freeze({\n    is(node) {\n        return node.kind === 'AlterColumnNode';\n    },\n    create(column, prop, value) {\n        return freeze({\n            kind: 'AlterColumnNode',\n            column: ColumnNode.create(column),\n            [prop]: value,\n        });\n    },\n});\n","/// <reference types=\"./alter-column-builder.d.ts\" />\nimport { AlterColumnNode } from '../operation-node/alter-column-node.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { parseDefaultValueExpression, } from '../parser/default-value-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class AlterColumnBuilder {\n    #column;\n    constructor(column) {\n        this.#column = column;\n    }\n    setDataType(dataType) {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'dataType', parseDataTypeExpression(dataType)));\n    }\n    setDefault(value) {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'setDefault', parseDefaultValueExpression(value)));\n    }\n    dropDefault() {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'dropDefault', true));\n    }\n    setNotNull() {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'setNotNull', true));\n    }\n    dropNotNull() {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'dropNotNull', true));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n}\npreventAwait(AlterColumnBuilder, \"don't await AlterColumnBuilder instances\");\n/**\n * Allows us to force consumers to do exactly one alteration to a column.\n *\n * Basically, deny the following:\n *\n * ```ts\n * db.schema.alterTable('person').alterColumn('age', (ac) => ac)\n * ```\n *\n * ```ts\n * db.schema.alterTable('person').alterColumn('age', (ac) => ac.dropNotNull().setNotNull())\n * ```\n *\n * Which would now throw a compilation error, instead of a runtime error.\n */\nexport class AlteredColumnBuilder {\n    #alterColumnNode;\n    constructor(alterColumnNode) {\n        this.#alterColumnNode = alterColumnNode;\n    }\n    toOperationNode() {\n        return this.#alterColumnNode;\n    }\n}\npreventAwait(AlteredColumnBuilder, \"don't await AlteredColumnBuilder instances\");\n","/// <reference types=\"./alter-table-executor.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class AlterTableExecutor {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableExecutor, \"don't await AlterTableExecutor instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./alter-table-add-foreign-key-constraint-builder.d.ts\" />\nimport { AddConstraintNode } from '../operation-node/add-constraint-node.js';\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class AlterTableAddForeignKeyConstraintBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    onDelete(onDelete) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.onDelete(onDelete),\n        });\n    }\n    onUpdate(onUpdate) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.onUpdate(onUpdate),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(AlterTableNode.cloneWithTableProps(this.#props.node, {\n            addConstraint: AddConstraintNode.create(this.#props.constraintBuilder.toOperationNode()),\n        }), this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableAddForeignKeyConstraintBuilder, \"don't await AlterTableAddForeignKeyConstraintBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./alter-table-drop-constraint-builder.d.ts\" />\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { DropConstraintNode } from '../operation-node/drop-constraint-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class AlterTableDropConstraintBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    ifExists: true,\n                }),\n            }),\n        });\n    }\n    cascade() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    modifier: 'cascade',\n                }),\n            }),\n        });\n    }\n    restrict() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    modifier: 'restrict',\n                }),\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableDropConstraintBuilder, \"don't await AlterTableDropConstraintBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./primary-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const PrimaryConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'PrimaryKeyConstraintNode';\n    },\n    create(columns, constraintName) {\n        return freeze({\n            kind: 'PrimaryKeyConstraintNode',\n            columns: freeze(columns.map(ColumnNode.create)),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n});\n","/// <reference types=\"./add-index-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const AddIndexNode = freeze({\n    is(node) {\n        return node.kind === 'AddIndexNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'AddIndexNode',\n            name: IdentifierNode.create(name),\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithColumns(node, columns) {\n        return freeze({\n            ...node,\n            columns: [...(node.columns || []), ...columns],\n        });\n    },\n});\n","/// <reference types=\"./alter-table-add-index-builder.d.ts\" />\nimport { AddIndexNode } from '../operation-node/add-index-node.js';\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { parseOrderedColumnName, } from '../parser/reference-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class AlterTableAddIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Makes the index unique.\n     */\n    unique() {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWith(this.#props.node.addIndex, {\n                    unique: true,\n                }),\n            }),\n        });\n    }\n    /**\n     * Adds a column to the index.\n     *\n     * Also see {@link columns} for adding multiple columns at once or {@link expression}\n     * for specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *         .alterTable('person')\n     *         .createIndex('person_first_name_and_age_index')\n     *         .column('first_name')\n     *         .column('age desc')\n     *         .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` add index `person_first_name_and_age_index` (`first_name`, `age` desc)\n     * ```\n     */\n    column(column) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWithColumns(this.#props.node.addIndex, [\n                    parseOrderedColumnName(column),\n                ]),\n            }),\n        });\n    }\n    /**\n     * Specifies a list of columns for the index.\n     *\n     * Also see {@link column} for adding a single column or {@link expression} for\n     * specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *         .alterTable('person')\n     *         .addIndex('person_first_name_and_age_index')\n     *         .columns(['first_name', 'age desc'])\n     *         .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` add index `person_first_name_and_age_index` (`first_name`, `age` desc)\n     * ```\n     */\n    columns(columns) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWithColumns(this.#props.node.addIndex, columns.map(parseOrderedColumnName)),\n            }),\n        });\n    }\n    /**\n     * Specifies an arbitrary expression for the index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .alterTable('person')\n     *   .addIndex('person_first_name_index')\n     *   .expression(sql<boolean>`(first_name < 'Sami')`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` add index `person_first_name_index` ((first_name < 'Sami'))\n     * ```\n     */\n    expression(expression) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWithColumns(this.#props.node.addIndex, [\n                    expression.toOperationNode(),\n                ]),\n            }),\n        });\n    }\n    using(indexType) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWith(this.#props.node.addIndex, {\n                    using: RawNode.createWithSql(indexType),\n                }),\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableAddIndexBuilder, \"don't await AlterTableAddIndexBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./unique-constraint-builder.d.ts\" />\nimport { UniqueConstraintNode } from '../operation-node/unique-constraint-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class UniqueConstraintNodeBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n    /**\n     * Adds `nulls not distinct` to the unique constraint definition\n     *\n     * Supported by PostgreSQL dialect only\n     */\n    nullsNotDistinct() {\n        return new UniqueConstraintNodeBuilder(UniqueConstraintNode.cloneWith(this.#node, { nullsNotDistinct: true }));\n    }\n}\npreventAwait(UniqueConstraintNodeBuilder, \"don't await UniqueConstraintNodeBuilder instances directly.\");\n","/// <reference types=\"./alter-table-builder.d.ts\" />\nimport { AddColumnNode } from '../operation-node/add-column-node.js';\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { DropColumnNode } from '../operation-node/drop-column-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { RenameColumnNode } from '../operation-node/rename-column-node.js';\nimport { freeze, noop } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { ColumnDefinitionBuilder, } from './column-definition-builder.js';\nimport { ModifyColumnNode } from '../operation-node/modify-column-node.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { ForeignKeyConstraintBuilder } from './foreign-key-constraint-builder.js';\nimport { AddConstraintNode } from '../operation-node/add-constraint-node.js';\nimport { UniqueConstraintNode } from '../operation-node/unique-constraint-node.js';\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { DropConstraintNode } from '../operation-node/drop-constraint-node.js';\nimport { AlterColumnBuilder, } from './alter-column-builder.js';\nimport { AlterTableExecutor } from './alter-table-executor.js';\nimport { AlterTableAddForeignKeyConstraintBuilder } from './alter-table-add-foreign-key-constraint-builder.js';\nimport { AlterTableDropConstraintBuilder } from './alter-table-drop-constraint-builder.js';\nimport { PrimaryConstraintNode } from '../operation-node/primary-constraint-node.js';\nimport { DropIndexNode } from '../operation-node/drop-index-node.js';\nimport { AddIndexNode } from '../operation-node/add-index-node.js';\nimport { AlterTableAddIndexBuilder } from './alter-table-add-index-builder.js';\nimport { UniqueConstraintNodeBuilder, } from './unique-constraint-builder.js';\n/**\n * This builder can be used to create a `alter table` query.\n */\nexport class AlterTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    renameTo(newTableName) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                renameTo: parseTable(newTableName),\n            }),\n        });\n    }\n    setSchema(newSchema) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                setSchema: IdentifierNode.create(newSchema),\n            }),\n        });\n    }\n    alterColumn(column, alteration) {\n        const builder = alteration(new AlterColumnBuilder(column));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    dropColumn(column) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, DropColumnNode.create(column)),\n        });\n    }\n    renameColumn(column, newColumn) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, RenameColumnNode.create(column, newColumn)),\n        });\n    }\n    addColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, AddColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    modifyColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, ModifyColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addUniqueConstraint}\n     */\n    addUniqueConstraint(constraintName, columns, build = noop) {\n        const uniqueConstraintBuilder = build(new UniqueConstraintNodeBuilder(UniqueConstraintNode.create(columns, constraintName)));\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: AddConstraintNode.create(uniqueConstraintBuilder.toOperationNode()),\n            }),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addCheckConstraint}\n     */\n    addCheckConstraint(constraintName, checkExpression) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: AddConstraintNode.create(CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName)),\n            }),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addForeignKeyConstraint}\n     *\n     * Unlike {@link CreateTableBuilder.addForeignKeyConstraint} this method returns\n     * the constraint builder and doesn't take a callback as the last argument. This\n     * is because you can only add one column per `ALTER TABLE` query.\n     */\n    addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), parseTable(targetTable), targetColumns.map(ColumnNode.create), constraintName)),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addPrimaryKeyConstraint}\n     */\n    addPrimaryKeyConstraint(constraintName, columns) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: AddConstraintNode.create(PrimaryConstraintNode.create(columns, constraintName)),\n            }),\n        });\n    }\n    dropConstraint(constraintName) {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.create(constraintName),\n            }),\n        });\n    }\n    /**\n     * This can be used to add index to table.\n     *\n     *  ### Examples\n     *\n     * ```ts\n     * db.schema.alterTable('person')\n     *   .addIndex('person_email_index')\n     *   .column('email')\n     *   .unique()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` add unique index `person_email_index` (`email`)\n     * ```\n     */\n    addIndex(indexName) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.create(indexName),\n            }),\n        });\n    }\n    /**\n     * This can be used to drop index from table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.alterTable('person')\n     *   .dropIndex('person_email_index')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` drop index `test_first_name_index`\n     * ```\n     */\n    dropIndex(indexName) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropIndex: DropIndexNode.create(indexName),\n            }),\n        });\n    }\n    /**\n     * Calls the given function passing `this` as the only argument.\n     *\n     * See {@link CreateTableBuilder.$call}\n     */\n    $call(func) {\n        return func(this);\n    }\n}\npreventAwait(AlterTableBuilder, \"don't await AlterTableBuilder instances\");\nexport class AlterTableColumnAlteringBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    alterColumn(column, alteration) {\n        const builder = alteration(new AlterColumnBuilder(column));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    dropColumn(column) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, DropColumnNode.create(column)),\n        });\n    }\n    renameColumn(column, newColumn) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, RenameColumnNode.create(column, newColumn)),\n        });\n    }\n    addColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, AddColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    modifyColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, ModifyColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableColumnAlteringBuilder, \"don't await AlterTableColumnAlteringBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./immediate-value-transformer.d.ts\" />\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\n/**\n * Transforms all ValueNodes to immediate.\n *\n * WARNING! This should never be part of the public API. Users should never use this.\n * This is an internal helper.\n *\n * @internal\n */\nexport class ImmediateValueTransformer extends OperationNodeTransformer {\n    transformValue(node) {\n        return {\n            ...super.transformValue(node),\n            immediate: true,\n        };\n    }\n}\n","/// <reference types=\"./create-index-builder.d.ts\" />\nimport { CreateIndexNode, } from '../operation-node/create-index-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { parseOrderedColumnName, } from '../parser/reference-parser.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { ImmediateValueTransformer } from '../plugin/immediate-value/immediate-value-transformer.js';\nexport class CreateIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"if not exists\" modifier.\n     *\n     * If the index already exists, no error is thrown if this method has been called.\n     */\n    ifNotExists() {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    /**\n     * Makes the index unique.\n     */\n    unique() {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                unique: true,\n            }),\n        });\n    }\n    /**\n     * Adds `nulls not distinct` specifier to index.\n     * This only works on some dialects like PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createIndex('person_first_name_index')\n     *  .on('person')\n     *  .column('first_name')\n     *  .nullsNotDistinct()\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_index\"\n     * on \"test\" (\"first_name\")\n     * nulls not distinct;\n     * ```\n     */\n    nullsNotDistinct() {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                nullsNotDistinct: true,\n            }),\n        });\n    }\n    /**\n     * Specifies the table for the index.\n     */\n    on(table) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                table: parseTable(table),\n            }),\n        });\n    }\n    /**\n     * Adds a column to the index.\n     *\n     * Also see {@link columns} for adding multiple columns at once or {@link expression}\n     * for specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *         .createIndex('person_first_name_and_age_index')\n     *         .on('person')\n     *         .column('first_name')\n     *         .column('age desc')\n     *         .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_and_age_index\" on \"person\" (\"first_name\", \"age\" desc)\n     * ```\n     */\n    column(column) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWithColumns(this.#props.node, [\n                parseOrderedColumnName(column),\n            ]),\n        });\n    }\n    /**\n     * Specifies a list of columns for the index.\n     *\n     * Also see {@link column} for adding a single column or {@link expression} for\n     * specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *         .createIndex('person_first_name_and_age_index')\n     *         .on('person')\n     *         .columns(['first_name', 'age desc'])\n     *         .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_and_age_index\" on \"person\" (\"first_name\", \"age\" desc)\n     * ```\n     */\n    columns(columns) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWithColumns(this.#props.node, columns.map(parseOrderedColumnName)),\n        });\n    }\n    /**\n     * Specifies an arbitrary expression for the index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createIndex('person_first_name_index')\n     *   .on('person')\n     *   .expression(sql`first_name COLLATE \"fi_FI\"`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_index\" on \"person\" (first_name COLLATE \"fi_FI\")\n     * ```\n     */\n    expression(expression) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWithColumns(this.#props.node, [\n                expression.toOperationNode(),\n            ]),\n        });\n    }\n    using(indexType) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                using: RawNode.createWithSql(indexType),\n            }),\n        });\n    }\n    where(...args) {\n        const transformer = new ImmediateValueTransformer();\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: QueryNode.cloneWithWhere(this.#props.node, transformer.transformNode(parseValueBinaryOperationOrExpression(args))),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateIndexBuilder, \"don't await CreateIndexBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./create-schema-builder.d.ts\" />\nimport { CreateSchemaNode } from '../operation-node/create-schema-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class CreateSchemaBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifNotExists() {\n        return new CreateSchemaBuilder({\n            ...this.#props,\n            node: CreateSchemaNode.cloneWith(this.#props.node, { ifNotExists: true }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateSchemaBuilder, \"don't await CreateSchemaBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./on-commit-action-parse.d.ts\" />\nimport { ON_COMMIT_ACTIONS, } from '../operation-node/create-table-node.js';\nexport function parseOnCommitAction(action) {\n    if (ON_COMMIT_ACTIONS.includes(action)) {\n        return action;\n    }\n    throw new Error(`invalid OnCommitAction ${action}`);\n}\n","/// <reference types=\"./create-table-builder.d.ts\" />\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { CreateTableNode, } from '../operation-node/create-table-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { ColumnDefinitionBuilder } from './column-definition-builder.js';\nimport { freeze, noop } from '../util/object-utils.js';\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ForeignKeyConstraintBuilder } from './foreign-key-constraint-builder.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { PrimaryConstraintNode } from '../operation-node/primary-constraint-node.js';\nimport { UniqueConstraintNode } from '../operation-node/unique-constraint-node.js';\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { parseOnCommitAction } from '../parser/on-commit-action-parse.js';\nimport { UniqueConstraintNodeBuilder, } from './unique-constraint-builder.js';\nimport { parseExpression } from '../parser/expression-parser.js';\n/**\n * This builder can be used to create a `create table` query.\n */\nexport class CreateTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"temporary\" modifier.\n     *\n     * Use this to create a temporary table.\n     */\n    temporary() {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                temporary: true,\n            }),\n        });\n    }\n    /**\n     * Adds an \"on commit\" statement.\n     *\n     * This can be used in conjunction with temporary tables on supported databases\n     * like PostgreSQL.\n     */\n    onCommit(onCommit) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                onCommit: parseOnCommitAction(onCommit),\n            }),\n        });\n    }\n    /**\n     * Adds the \"if not exists\" modifier.\n     *\n     * If the table already exists, no error is thrown if this method has been called.\n     */\n    ifNotExists() {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    /**\n     * Adds a column to the table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', (col) => col.autoIncrement().primaryKey()),\n     *   .addColumn('first_name', 'varchar(50)', (col) => col.notNull())\n     *   .addColumn('last_name', 'varchar(255)')\n     *   .addColumn('bank_balance', 'numeric(8, 2)')\n     *   // You can specify any data type using the `sql` tag if the types\n     *   // don't include it.\n     *   .addColumn('data', sql`any_type_here`)\n     *   .addColumn('parent_id', 'integer', (col) =>\n     *     col.references('person.id').onDelete('cascade'))\n     *   )\n     * ```\n     *\n     * With this method, it's once again good to remember that Kysely just builds the\n     * query and doesn't provide the same API for all databases. For example, some\n     * databases like older MySQL don't support the `references` statement in the\n     * column definition. Instead foreign key constraints need to be defined in the\n     * `create table` query. See the next example:\n     *\n     * ```ts\n     *   .addColumn('parent_id', 'integer')\n     *   .addForeignKeyConstraint(\n     *     'person_parent_id_fk', ['parent_id'], 'person', ['id'],\n     *     (cb) => cb.onDelete('cascade')\n     *   )\n     * ```\n     *\n     * Another good example is that PostgreSQL doesn't support the `auto_increment`\n     * keyword and you need to define an autoincrementing column for example using\n     * `serial`:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'serial', (col) => col.primaryKey()),\n     * ```\n     */\n    addColumn(columnName, dataType, build = noop) {\n        const columnBuilder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithColumn(this.#props.node, columnBuilder.toOperationNode()),\n        });\n    }\n    /**\n     * Adds a primary key constraint for one or more columns.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addPrimaryKeyConstraint('primary_key', ['first_name', 'last_name'])\n     * ```\n     */\n    addPrimaryKeyConstraint(constraintName, columns) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, PrimaryConstraintNode.create(columns, constraintName)),\n        });\n    }\n    /**\n     * Adds a unique constraint for one or more columns.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addUniqueConstraint('first_name_last_name_unique', ['first_name', 'last_name'])\n     * ```\n     *\n     * In dialects such as PostgreSQL you can specify `nulls not distinct` as follows:\n     * ```ts\n     * addUniqueConstraint('first_name_last_name_unique', ['first_name', 'last_name'], (builder) => builder.nullsNotDistinct())\n     * ```\n     */\n    addUniqueConstraint(constraintName, columns, build = noop) {\n        const uniqueConstraintBuilder = build(new UniqueConstraintNodeBuilder(UniqueConstraintNode.create(columns, constraintName)));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, uniqueConstraintBuilder.toOperationNode()),\n        });\n    }\n    /**\n     * Adds a check constraint.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * addCheckConstraint('check_legs', sql`number_of_legs < 5`)\n     * ```\n     */\n    addCheckConstraint(constraintName, checkExpression) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName)),\n        });\n    }\n    /**\n     * Adds a foreign key constraint.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addForeignKeyConstraint(\n     *   'owner_id_foreign',\n     *   ['owner_id'],\n     *   'person',\n     *   ['id'],\n     * )\n     * ```\n     *\n     * Add constraint for multiple columns:\n     *\n     * ```ts\n     * addForeignKeyConstraint(\n     *   'owner_id_foreign',\n     *   ['owner_id1', 'owner_id2'],\n     *   'person',\n     *   ['id1', 'id2'],\n     *   (cb) => cb.onDelete('cascade')\n     * )\n     * ```\n     */\n    addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns, build = noop) {\n        const builder = build(new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), parseTable(targetTable), targetColumns.map(ColumnNode.create), constraintName)));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the front of the query __after__ the `create` keyword.\n     *\n     * Also see {@link temporary}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *   .modifyFront(sql`global temporary`)\n     *   .addColumn('id', 'integer', col => col.primaryKey())\n     *   .addColumn('first_name', 'varchar(64)', col => col.notNull())\n     *   .addColumn('last_name', 'varchar(64), col => col.notNull())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (Postgres):\n     *\n     * ```sql\n     * create global temporary table \"person\" (\n     *   \"id\" integer primary key,\n     *   \"first_name\" varchar(64) not null,\n     *   \"last_name\" varchar(64) not null\n     * )\n     * ```\n     */\n    modifyFront(modifier) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithFrontModifier(this.#props.node, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * Also see {@link onCommit}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *   .addColumn('id', 'integer', col => col => primaryKey())\n     *   .addColumn('first_name', 'varchar(64)', col => col.notNull())\n     *   .addColumn('last_name', 'varchar(64), col => col.notNull())\n     *   .modifyEnd(sql`collate utf8_unicode_ci`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `first_name` varchar(64) not null,\n     *   `last_name` varchar(64) not null\n     * ) collate utf8_unicode_ci\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithEndModifier(this.#props.node, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * Allows to create table from `select` query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('copy')\n     *   .temporary()\n     *   .as(db.selectFrom('person').select(['first_name', 'last_name']))\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create temporary table \"copy\" as\n     * select \"first_name\", \"last_name\" from \"person\"\n     * ```\n     */\n    as(expression) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                selectQuery: parseExpression(expression),\n            }),\n        });\n    }\n    /**\n     * Calls the given function passing `this` as the only argument.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema\n     *   .createTable('test')\n     *   .$call((builder) => builder.addColumn('id', 'integer'))\n     *   .execute()\n     * ```\n     *\n     * ```ts\n     * const addDefaultColumns = <T extends string, C extends string = never>(\n     *   builder: CreateTableBuilder<T, C>\n     * ) => {\n     *   return builder\n     *     .addColumn('id', 'integer', (col) => col.notNull())\n     *     .addColumn('created_at', 'date', (col) =>\n     *       col.notNull().defaultTo(sql`now()`)\n     *     )\n     *     .addColumn('updated_at', 'date', (col) =>\n     *       col.notNull().defaultTo(sql`now()`)\n     *     )\n     * }\n     *\n     * db.schema\n     *   .createTable('test')\n     *   .$call(addDefaultColumns)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateTableBuilder, \"don't await CreateTableBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./drop-index-builder.d.ts\" />\nimport { DropIndexNode } from '../operation-node/drop-index-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Specifies the table the index was created for. This is not needed\n     * in all dialects.\n     */\n    on(table) {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: DropIndexNode.cloneWith(this.#props.node, {\n                table: parseTable(table),\n            }),\n        });\n    }\n    ifExists() {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: DropIndexNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: DropIndexNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropIndexBuilder, \"don't await DropIndexBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./drop-schema-builder.d.ts\" />\nimport { DropSchemaNode } from '../operation-node/drop-schema-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropSchemaBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new DropSchemaBuilder({\n            ...this.#props,\n            node: DropSchemaNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropSchemaBuilder({\n            ...this.#props,\n            node: DropSchemaNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropSchemaBuilder, \"don't await DropSchemaBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./drop-table-builder.d.ts\" />\nimport { DropTableNode } from '../operation-node/drop-table-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new DropTableBuilder({\n            ...this.#props,\n            node: DropTableNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropTableBuilder({\n            ...this.#props,\n            node: DropTableNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropTableBuilder, \"don't await DropTableBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./create-view-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const CreateViewNode = freeze({\n    is(node) {\n        return node.kind === 'CreateViewNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateViewNode',\n            name: SchemableIdentifierNode.create(name),\n        });\n    },\n    cloneWith(createView, params) {\n        return freeze({\n            ...createView,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./immediate-value-plugin.d.ts\" />\nimport { ImmediateValueTransformer } from './immediate-value-transformer.js';\n/**\n * Transforms all ValueNodes to immediate.\n *\n * WARNING! This should never be part of the public API. Users should never use this.\n * This is an internal helper.\n *\n * @internal\n */\nexport class ImmediateValuePlugin {\n    #transformer = new ImmediateValueTransformer();\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node);\n    }\n    transformResult(args) {\n        return Promise.resolve(args.result);\n    }\n}\n","/// <reference types=\"./create-view-builder.d.ts\" />\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { parseColumnName } from '../parser/reference-parser.js';\nimport { ImmediateValuePlugin } from '../plugin/immediate-value/immediate-value-plugin.js';\nexport class CreateViewBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"temporary\" modifier.\n     *\n     * Use this to create a temporary view.\n     */\n    temporary() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                temporary: true,\n            }),\n        });\n    }\n    materialized() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    /**\n     * Only implemented on some dialects like SQLite. On most dialects, use {@link orReplace}.\n     */\n    ifNotExists() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    orReplace() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                orReplace: true,\n            }),\n        });\n    }\n    columns(columns) {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                columns: columns.map(parseColumnName),\n            }),\n        });\n    }\n    /**\n     * Sets the select query or a `values` statement that creates the view.\n     *\n     * WARNING!\n     * Some dialects don't support parameterized queries in DDL statements and therefore\n     * the query or raw {@link sql } expression passed here is interpolated into a single\n     * string opening an SQL injection vulnerability. DO NOT pass unchecked user input\n     * into the query or raw expression passed to this method!\n     */\n    as(query) {\n        const queryNode = query\n            .withPlugin(new ImmediateValuePlugin())\n            .toOperationNode();\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                as: queryNode,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateViewBuilder, \"don't await CreateViewBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./drop-view-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const DropViewNode = freeze({\n    is(node) {\n        return node.kind === 'DropViewNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'DropViewNode',\n            name: SchemableIdentifierNode.create(name),\n        });\n    },\n    cloneWith(dropView, params) {\n        return freeze({\n            ...dropView,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./drop-view-builder.d.ts\" />\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { DropViewNode } from '../operation-node/drop-view-node.js';\nexport class DropViewBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    materialized() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: DropViewNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    ifExists() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: DropViewNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: DropViewNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropViewBuilder, \"don't await DropViewBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./create-type-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ValueListNode } from './value-list-node.js';\nimport { ValueNode } from './value-node.js';\n/**\n * @internal\n */\nexport const CreateTypeNode = freeze({\n    is(node) {\n        return node.kind === 'CreateTypeNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateTypeNode',\n            name,\n        });\n    },\n    cloneWithEnum(createType, values) {\n        return freeze({\n            ...createType,\n            enum: ValueListNode.create(values.map((value) => ValueNode.createImmediate(value))),\n        });\n    },\n});\n","/// <reference types=\"./create-type-builder.d.ts\" />\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { CreateTypeNode } from '../operation-node/create-type-node.js';\nexport class CreateTypeBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    /**\n     * Creates an anum type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createType('species').asEnum(['cat', 'dog', 'frog'])\n     * ```\n     */\n    asEnum(values) {\n        return new CreateTypeBuilder({\n            ...this.#props,\n            node: CreateTypeNode.cloneWithEnum(this.#props.node, values),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateTypeBuilder, \"don't await CreateTypeBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./drop-type-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DropTypeNode = freeze({\n    is(node) {\n        return node.kind === 'DropTypeNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'DropTypeNode',\n            name,\n        });\n    },\n    cloneWith(dropType, params) {\n        return freeze({\n            ...dropType,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./drop-type-builder.d.ts\" />\nimport { DropTypeNode } from '../operation-node/drop-type-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropTypeBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new DropTypeBuilder({\n            ...this.#props,\n            node: DropTypeNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropTypeBuilder, \"don't await DropTypeBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./identifier-parser.d.ts\" />\nimport { SchemableIdentifierNode } from '../operation-node/schemable-identifier-node.js';\nexport function parseSchemableIdentifier(id) {\n    const SCHEMA_SEPARATOR = '.';\n    if (id.includes(SCHEMA_SEPARATOR)) {\n        const parts = id.split(SCHEMA_SEPARATOR).map(trim);\n        if (parts.length === 2) {\n            return SchemableIdentifierNode.createWithSchema(parts[0], parts[1]);\n        }\n        else {\n            throw new Error(`invalid schemable identifier ${id}`);\n        }\n    }\n    else {\n        return SchemableIdentifierNode.create(id);\n    }\n}\nfunction trim(str) {\n    return str.trim();\n}\n","/// <reference types=\"./schema.d.ts\" />\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { CreateIndexNode } from '../operation-node/create-index-node.js';\nimport { CreateSchemaNode } from '../operation-node/create-schema-node.js';\nimport { CreateTableNode } from '../operation-node/create-table-node.js';\nimport { DropIndexNode } from '../operation-node/drop-index-node.js';\nimport { DropSchemaNode } from '../operation-node/drop-schema-node.js';\nimport { DropTableNode } from '../operation-node/drop-table-node.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { AlterTableBuilder } from './alter-table-builder.js';\nimport { CreateIndexBuilder } from './create-index-builder.js';\nimport { CreateSchemaBuilder } from './create-schema-builder.js';\nimport { CreateTableBuilder } from './create-table-builder.js';\nimport { DropIndexBuilder } from './drop-index-builder.js';\nimport { DropSchemaBuilder } from './drop-schema-builder.js';\nimport { DropTableBuilder } from './drop-table-builder.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { CreateViewBuilder } from './create-view-builder.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { DropViewBuilder } from './drop-view-builder.js';\nimport { DropViewNode } from '../operation-node/drop-view-node.js';\nimport { CreateTypeBuilder } from './create-type-builder.js';\nimport { DropTypeBuilder } from './drop-type-builder.js';\nimport { CreateTypeNode } from '../operation-node/create-type-node.js';\nimport { DropTypeNode } from '../operation-node/drop-type-node.js';\nimport { parseSchemableIdentifier } from '../parser/identifier-parser.js';\n/**\n * Provides methods for building database schema.\n */\nexport class SchemaModule {\n    #executor;\n    constructor(executor) {\n        this.#executor = executor;\n    }\n    /**\n     * Create a new table.\n     *\n     * ### Examples\n     *\n     * This example creates a new table with columns `id`, `first_name`,\n     * `last_name` and `gender`:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('first_name', 'varchar', col => col.notNull())\n     *   .addColumn('last_name', 'varchar', col => col.notNull())\n     *   .addColumn('gender', 'varchar')\n     *   .execute()\n     * ```\n     *\n     * This example creates a table with a foreign key. Not all database\n     * engines support column-level foreign key constraint definitions.\n     * For example if you are using MySQL 5.X see the next example after\n     * this one.\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('owner_id', 'integer', col => col\n     *     .references('person.id')\n     *     .onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * This example adds a foreign key constraint for a columns just\n     * like the previous example, but using a table-level statement.\n     * On MySQL 5.X you need to define foreign key constraints like\n     * this:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('owner_id', 'integer')\n     *   .addForeignKeyConstraint(\n     *     'pet_owner_id_foreign', ['owner_id'], 'person', ['id'],\n     *     (constraint) => constraint.onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     */\n    createTable(table) {\n        return new CreateTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateTableNode.create(parseTable(table)),\n        });\n    }\n    /**\n     * Drop a table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropTable('person')\n     *   .execute()\n     * ```\n     */\n    dropTable(table) {\n        return new DropTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropTableNode.create(parseTable(table)),\n        });\n    }\n    /**\n     * Create a new index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createIndex('person_full_name_unique_index')\n     *   .on('person')\n     *   .columns(['first_name', 'last_name'])\n     *   .execute()\n     * ```\n     */\n    createIndex(indexName) {\n        return new CreateIndexBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateIndexNode.create(indexName),\n        });\n    }\n    /**\n     * Drop an index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropIndex('person_full_name_unique_index')\n     *   .execute()\n     * ```\n     */\n    dropIndex(indexName) {\n        return new DropIndexBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropIndexNode.create(indexName),\n        });\n    }\n    /**\n     * Create a new schema.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createSchema('some_schema')\n     *   .execute()\n     * ```\n     */\n    createSchema(schema) {\n        return new CreateSchemaBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateSchemaNode.create(schema),\n        });\n    }\n    /**\n     * Drop a schema.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropSchema('some_schema')\n     *   .execute()\n     * ```\n     */\n    dropSchema(schema) {\n        return new DropSchemaBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropSchemaNode.create(schema),\n        });\n    }\n    /**\n     * Alter a table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .alterTable('person')\n     *   .alterColumn('first_name', (ac) => ac.setDataType('text'))\n     *   .execute()\n     * ```\n     */\n    alterTable(table) {\n        return new AlterTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: AlterTableNode.create(parseTable(table)),\n        });\n    }\n    /**\n     * Create a new view.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createView('dogs')\n     *   .orReplace()\n     *   .as(db.selectFrom('pet').selectAll().where('species', '=', 'dog'))\n     *   .execute()\n     * ```\n     */\n    createView(viewName) {\n        return new CreateViewBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateViewNode.create(viewName),\n        });\n    }\n    /**\n     * Drop a view.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropView('dogs')\n     *   .ifExists()\n     *   .execute()\n     * ```\n     */\n    dropView(viewName) {\n        return new DropViewBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropViewNode.create(viewName),\n        });\n    }\n    /**\n     * Create a new type.\n     *\n     * Only some dialects like PostgreSQL have user-defined types.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createType('species')\n     *   .asEnum(['dog', 'cat', 'frog'])\n     *   .execute()\n     * ```\n     */\n    createType(typeName) {\n        return new CreateTypeBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateTypeNode.create(parseSchemableIdentifier(typeName)),\n        });\n    }\n    /**\n     * Drop a type.\n     *\n     * Only some dialects like PostgreSQL have user-defined types.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropType('species')\n     *   .ifExists()\n     *   .execute()\n     * ```\n     */\n    dropType(typeName) {\n        return new DropTypeBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropTypeNode.create(parseSchemableIdentifier(typeName)),\n        });\n    }\n    /**\n     * Returns a copy of this schema module with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new SchemaModule(this.#executor.withPlugin(plugin));\n    }\n    /**\n     * Returns a copy of this schema module  without any plugins.\n     */\n    withoutPlugins() {\n        return new SchemaModule(this.#executor.withoutPlugins());\n    }\n    /**\n     * See {@link QueryCreator.withSchema}\n     */\n    withSchema(schema) {\n        return new SchemaModule(this.#executor.withPluginAtFront(new WithSchemaPlugin(schema)));\n    }\n}\n","/// <reference types=\"./dynamic.d.ts\" />\nimport { DynamicReferenceBuilder } from './dynamic-reference-builder.js';\nexport class DynamicModule {\n    /**\n     * Creates a dynamic reference to a column that is not know at compile time.\n     *\n     * Kysely is built in a way that by default you can't refer to tables or columns\n     * that are not actually visible in the current query and context. This is all\n     * done by TypeScript at compile time, which means that you need to know the\n     * columns and tables at compile time. This is not always the case of course.\n     *\n     * This method is meant to be used in those cases where the column names\n     * come from the user input or are not otherwise known at compile time.\n     *\n     * WARNING! Unlike values, column names are not escaped by the database engine\n     * or Kysely and if you pass in unchecked column names using this method, you\n     * create an SQL injection vulnerability. Always __always__ validate the user\n     * input before passing it to this method.\n     *\n     * There are couple of examples below for some use cases, but you can pass\n     * `ref` to other methods as well. If the types allow you to pass a `ref`\n     * value to some place, it should work.\n     *\n     * ### Examples\n     *\n     * Filter by a column not know at compile time:\n     *\n     * ```ts\n     * async function someQuery(filterColumn: string, filterValue: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .selectAll()\n     *     .where(ref(filterColumn), '=', filterValue)\n     *     .execute()\n     * }\n     *\n     * someQuery('first_name', 'Arnold')\n     * someQuery('person.last_name', 'Aniston')\n     * ```\n     *\n     * Order by a column not know at compile time:\n     *\n     * ```ts\n     * async function someQuery(orderBy: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .select('person.first_name as fn')\n     *     .orderBy(ref(orderBy))\n     *     .execute()\n     * }\n     *\n     * someQuery('fn')\n     * ```\n     *\n     * In this example we add selections dynamically:\n     *\n     * ```ts\n     * const { ref } = db.dynamic\n     *\n     * // Some column name provided by the user. Value not known at compile time.\n     * const columnFromUserInput = req.query.select;\n     *\n     * // A type that lists all possible values `columnFromUserInput` can have.\n     * // You can use `keyof Person` if any column of an interface is allowed.\n     * type PossibleColumns = 'last_name' | 'first_name' | 'birth_date'\n     *\n     * const [person] = await db.selectFrom('person')\n     *   .select([\n     *     ref<PossibleColumns>(columnFromUserInput),\n     *     'id'\n     *   ])\n     *   .execute()\n     *\n     * // The resulting type contains all `PossibleColumns` as optional fields\n     * // because we cannot know which field was actually selected before\n     * // running the code.\n     * const lastName: string | undefined = person.last_name\n     * const firstName: string | undefined = person.first_name\n     * const birthDate: string | undefined = person.birth_date\n     *\n     * // The result type also contains the compile time selection `id`.\n     * person.id\n     * ```\n     */\n    ref(reference) {\n        return new DynamicReferenceBuilder(reference);\n    }\n}\n","/// <reference types=\"./default-connection-provider.d.ts\" />\nexport class DefaultConnectionProvider {\n    #driver;\n    constructor(driver) {\n        this.#driver = driver;\n    }\n    async provideConnection(consumer) {\n        const connection = await this.#driver.acquireConnection();\n        try {\n            return await consumer(connection);\n        }\n        finally {\n            await this.#driver.releaseConnection(connection);\n        }\n    }\n}\n","/// <reference types=\"./default-query-executor.d.ts\" />\nimport { QueryExecutorBase } from './query-executor-base.js';\nexport class DefaultQueryExecutor extends QueryExecutorBase {\n    #compiler;\n    #adapter;\n    #connectionProvider;\n    constructor(compiler, adapter, connectionProvider, plugins = []) {\n        super(plugins);\n        this.#compiler = compiler;\n        this.#adapter = adapter;\n        this.#connectionProvider = connectionProvider;\n    }\n    get adapter() {\n        return this.#adapter;\n    }\n    compileQuery(node) {\n        return this.#compiler.compileQuery(node);\n    }\n    provideConnection(consumer) {\n        return this.#connectionProvider.provideConnection(consumer);\n    }\n    withPlugins(plugins) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, ...plugins]);\n    }\n    withPlugin(plugin) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, plugin]);\n    }\n    withPluginAtFront(plugin) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [plugin, ...this.plugins]);\n    }\n    withConnectionProvider(connectionProvider) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, connectionProvider, [...this.plugins]);\n    }\n    withoutPlugins() {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, []);\n    }\n}\n","/// <reference types=\"./performance-now.d.ts\" />\nimport { isFunction } from './object-utils.js';\nexport function performanceNow() {\n    if (typeof performance !== 'undefined' && isFunction(performance.now)) {\n        return performance.now();\n    }\n    else {\n        return Date.now();\n    }\n}\n","/// <reference types=\"./runtime-driver.d.ts\" />\nimport { performanceNow } from '../util/performance-now.js';\n/**\n * A small wrapper around {@link Driver} that makes sure the driver is\n * initialized before it is used, only initialized and destroyed\n * once etc.\n */\nexport class RuntimeDriver {\n    #driver;\n    #log;\n    #initPromise;\n    #initDone;\n    #destroyPromise;\n    #connections = new WeakSet();\n    constructor(driver, log) {\n        this.#initDone = false;\n        this.#driver = driver;\n        this.#log = log;\n    }\n    async init() {\n        if (this.#destroyPromise) {\n            throw new Error('driver has already been destroyed');\n        }\n        if (!this.#initPromise) {\n            this.#initPromise = this.#driver\n                .init()\n                .then(() => {\n                this.#initDone = true;\n            })\n                .catch((err) => {\n                this.#initPromise = undefined;\n                return Promise.reject(err);\n            });\n        }\n        await this.#initPromise;\n    }\n    async acquireConnection() {\n        if (this.#destroyPromise) {\n            throw new Error('driver has already been destroyed');\n        }\n        if (!this.#initDone) {\n            await this.init();\n        }\n        const connection = await this.#driver.acquireConnection();\n        if (!this.#connections.has(connection)) {\n            if (this.#needsLogging()) {\n                this.#addLogging(connection);\n            }\n            this.#connections.add(connection);\n        }\n        return connection;\n    }\n    async releaseConnection(connection) {\n        await this.#driver.releaseConnection(connection);\n    }\n    beginTransaction(connection, settings) {\n        return this.#driver.beginTransaction(connection, settings);\n    }\n    commitTransaction(connection) {\n        return this.#driver.commitTransaction(connection);\n    }\n    rollbackTransaction(connection) {\n        return this.#driver.rollbackTransaction(connection);\n    }\n    async destroy() {\n        if (!this.#initPromise) {\n            return;\n        }\n        await this.#initPromise;\n        if (!this.#destroyPromise) {\n            this.#destroyPromise = this.#driver.destroy().catch((err) => {\n                this.#destroyPromise = undefined;\n                return Promise.reject(err);\n            });\n        }\n        await this.#destroyPromise;\n    }\n    #needsLogging() {\n        return (this.#log.isLevelEnabled('query') || this.#log.isLevelEnabled('error'));\n    }\n    // This method monkey patches the database connection's executeQuery method\n    // by adding logging code around it. Monkey patching is not pretty, but it's\n    // the best option in this case.\n    #addLogging(connection) {\n        const executeQuery = connection.executeQuery;\n        connection.executeQuery = async (compiledQuery) => {\n            let caughtError;\n            const startTime = performanceNow();\n            try {\n                return await executeQuery.call(connection, compiledQuery);\n            }\n            catch (error) {\n                caughtError = error;\n                await this.#logError(error, compiledQuery, startTime);\n                throw error;\n            }\n            finally {\n                if (!caughtError) {\n                    await this.#logQuery(compiledQuery, startTime);\n                }\n            }\n        };\n    }\n    async #logError(error, compiledQuery, startTime) {\n        await this.#log.error(() => ({\n            level: 'error',\n            error,\n            query: compiledQuery,\n            queryDurationMillis: this.#calculateDurationMillis(startTime),\n        }));\n    }\n    async #logQuery(compiledQuery, startTime) {\n        await this.#log.query(() => ({\n            level: 'query',\n            query: compiledQuery,\n            queryDurationMillis: this.#calculateDurationMillis(startTime),\n        }));\n    }\n    #calculateDurationMillis(startTime) {\n        return performanceNow() - startTime;\n    }\n}\n","/// <reference types=\"./single-connection-provider.d.ts\" />\nconst ignoreError = () => { };\nexport class SingleConnectionProvider {\n    #connection;\n    #runningPromise;\n    constructor(connection) {\n        this.#connection = connection;\n    }\n    async provideConnection(consumer) {\n        while (this.#runningPromise) {\n            await this.#runningPromise.catch(ignoreError);\n        }\n        // `#runningPromise` must be set to undefined before it's\n        // resolved or rejected. Otherwise the while loop above\n        // will misbehave.\n        this.#runningPromise = this.#run(consumer).finally(() => {\n            this.#runningPromise = undefined;\n        });\n        return this.#runningPromise;\n    }\n    // Run the runner in an async function to make sure it doesn't\n    // throw synchronous errors.\n    async #run(runner) {\n        return await runner(this.#connection);\n    }\n}\n","/// <reference types=\"./driver.d.ts\" />\nexport const TRANSACTION_ISOLATION_LEVELS = [\n    'read uncommitted',\n    'read committed',\n    'repeatable read',\n    'serializable',\n    'snapshot',\n];\n","/// <reference types=\"./log.d.ts\" />\nimport { freeze, isFunction } from './object-utils.js';\nexport const LOG_LEVELS = freeze(['query', 'error']);\nexport class Log {\n    #levels;\n    #logger;\n    constructor(config) {\n        if (isFunction(config)) {\n            this.#logger = config;\n            this.#levels = freeze({\n                query: true,\n                error: true,\n            });\n        }\n        else {\n            this.#logger = defaultLogger;\n            this.#levels = freeze({\n                query: config.includes('query'),\n                error: config.includes('error'),\n            });\n        }\n    }\n    isLevelEnabled(level) {\n        return this.#levels[level];\n    }\n    async query(getEvent) {\n        if (this.#levels.query) {\n            await this.#logger(getEvent());\n        }\n    }\n    async error(getEvent) {\n        if (this.#levels.error) {\n            await this.#logger(getEvent());\n        }\n    }\n}\nfunction defaultLogger(event) {\n    if (event.level === 'query') {\n        console.log(`kysely:query: ${event.query.sql}`);\n        console.log(`kysely:query: duration: ${event.queryDurationMillis.toFixed(1)}ms`);\n    }\n    else if (event.level === 'error') {\n        if (event.error instanceof Error) {\n            console.error(`kysely:error: ${event.error.stack ?? event.error.message}`);\n        }\n        else {\n            console.error(`kysely:error: ${JSON.stringify({\n                error: event.error,\n                query: event.query.sql,\n                queryDurationMillis: event.queryDurationMillis,\n            })}`);\n        }\n    }\n}\n","/// <reference types=\"./kysely.d.ts\" />\nimport { SchemaModule } from './schema/schema.js';\nimport { DynamicModule } from './dynamic/dynamic.js';\nimport { DefaultConnectionProvider } from './driver/default-connection-provider.js';\nimport { QueryCreator } from './query-creator.js';\nimport { DefaultQueryExecutor } from './query-executor/default-query-executor.js';\nimport { freeze, isObject, isUndefined } from './util/object-utils.js';\nimport { RuntimeDriver } from './driver/runtime-driver.js';\nimport { SingleConnectionProvider } from './driver/single-connection-provider.js';\nimport { TRANSACTION_ISOLATION_LEVELS, } from './driver/driver.js';\nimport { preventAwait } from './util/prevent-await.js';\nimport { createFunctionModule, } from './query-builder/function-module.js';\nimport { Log } from './util/log.js';\nimport { createQueryId } from './util/query-id.js';\nimport { isCompilable } from './util/compilable.js';\nimport { CaseBuilder } from './query-builder/case-builder.js';\nimport { CaseNode } from './operation-node/case-node.js';\nimport { parseExpression } from './parser/expression-parser.js';\nimport { WithSchemaPlugin } from './plugin/with-schema/with-schema-plugin.js';\n/**\n * The main Kysely class.\n *\n * You should create one instance of `Kysely` per database using the {@link Kysely}\n * constructor. Each `Kysely` instance maintains its own connection pool.\n *\n * ### Examples\n *\n * This example assumes your database has tables `person` and `pet`:\n *\n * ```ts\n * import { Kysely, Generated, PostgresDialect } from 'kysely'\n *\n * interface PersonTable {\n *   id: Generated<number>\n *   first_name: string\n *   last_name: string\n * }\n *\n * interface PetTable {\n *   id: Generated<number>\n *   owner_id: number\n *   name: string\n *   species: 'cat' | 'dog'\n * }\n *\n * interface Database {\n *   person: PersonTable,\n *   pet: PetTable\n * }\n *\n * const db = new Kysely<Database>({\n *   dialect: new PostgresDialect({\n *     host: 'localhost',\n *     database: 'kysely_test',\n *   })\n * })\n * ```\n *\n * @typeParam DB - The database interface type. Keys of this type must be table names\n *    in the database and values must be interfaces that describe the rows in those\n *    tables. See the examples above.\n */\nexport class Kysely extends QueryCreator {\n    #props;\n    constructor(args) {\n        let superProps;\n        let props;\n        if (isKyselyProps(args)) {\n            superProps = { executor: args.executor };\n            props = { ...args };\n        }\n        else {\n            const dialect = args.dialect;\n            const driver = dialect.createDriver();\n            const compiler = dialect.createQueryCompiler();\n            const adapter = dialect.createAdapter();\n            const log = new Log(args.log ?? []);\n            const runtimeDriver = new RuntimeDriver(driver, log);\n            const connectionProvider = new DefaultConnectionProvider(runtimeDriver);\n            const executor = new DefaultQueryExecutor(compiler, adapter, connectionProvider, args.plugins ?? []);\n            superProps = { executor };\n            props = {\n                config: args,\n                executor,\n                dialect,\n                driver: runtimeDriver,\n            };\n        }\n        super(superProps);\n        this.#props = freeze(props);\n    }\n    /**\n     * Returns the {@link SchemaModule} module for building database schema.\n     */\n    get schema() {\n        return new SchemaModule(this.#props.executor);\n    }\n    /**\n     * Returns a the {@link DynamicModule} module.\n     *\n     * The {@link DynamicModule} module can be used to bypass strict typing and\n     * passing in dynamic values for the queries.\n     */\n    get dynamic() {\n        return new DynamicModule();\n    }\n    /**\n     * Returns a {@link DatabaseIntrospector | database introspector}.\n     */\n    get introspection() {\n        return this.#props.dialect.createIntrospector(this.withoutPlugins());\n    }\n    case(value) {\n        return new CaseBuilder({\n            node: CaseNode.create(isUndefined(value) ? undefined : parseExpression(value)),\n        });\n    }\n    /**\n     * Returns a {@link FunctionModule} that can be used to write type safe function\n     * calls.\n     *\n     * ```ts\n     * await db.selectFrom('person')\n     *   .innerJoin('pet', 'pet.owner_id', 'person.id')\n     *   .select((eb) => [\n     *     'person.id',\n     *     eb.fn.count('pet.id').as('pet_count')\n     *   ])\n     *   .groupBy('person.id')\n     *   .having((eb) => eb.fn.count('pet.id'), '>', 10)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"person\".\"id\", count(\"pet\".\"id\") as \"pet_count\"\n     * from \"person\"\n     * inner join \"pet\" on \"pet\".\"owner_id\" = \"person\".\"id\"\n     * group by \"person\".\"id\"\n     * having count(\"pet\".\"id\") > $1\n     * ```\n     */\n    get fn() {\n        return createFunctionModule();\n    }\n    /**\n     * Creates a {@link TransactionBuilder} that can be used to run queries inside a transaction.\n     *\n     * The returned {@link TransactionBuilder} can be used to configure the transaction. The\n     * {@link TransactionBuilder.execute} method can then be called to run the transaction.\n     * {@link TransactionBuilder.execute} takes a function that is run inside the\n     * transaction. If the function throws, the transaction is rolled back. Otherwise\n     * the transaction is committed.\n     *\n     * The callback function passed to the {@link TransactionBuilder.execute | execute}\n     * method gets the transaction object as its only argument. The transaction is\n     * of type {@link Transaction} which inherits {@link Kysely}. Any query\n     * started through the transaction object is executed inside the transaction.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"transactions\", \"Simple transaction\", 10) -->\n     *\n     * This example inserts two rows in a transaction. If an error is thrown inside\n     * the callback passed to the `execute` method, the transaction is rolled back.\n     * Otherwise it's committed.\n     *\n     * ```ts\n     * const catto = await db.transaction().execute(async (trx) => {\n     *   const jennifer = await trx.insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       last_name: 'Aniston',\n     *       age: 40,\n     *     })\n     *     .returning('id')\n     *     .executeTakeFirstOrThrow()\n     *\n     *   return await trx.insertInto('pet')\n     *     .values({\n     *       owner_id: jennifer.id,\n     *       name: 'Catto',\n     *       species: 'cat',\n     *       is_favorite: false,\n     *     })\n     *     .returningAll()\n     *     .executeTakeFirst()\n     * })\n     * ```\n     *\n     * Setting the isolation level:\n     *\n     * ```ts\n     * await db\n     *   .transaction()\n     *   .setIsolationLevel('serializable')\n     *   .execute(async (trx) => {\n     *     await doStuff(trx)\n     *   })\n     * ```\n     */\n    transaction() {\n        return new TransactionBuilder({ ...this.#props });\n    }\n    /**\n     * Provides a kysely instance bound to a single database connection.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .connection()\n     *   .execute(async (db) => {\n     *     // `db` is an instance of `Kysely` that's bound to a single\n     *     // database connection. All queries executed through `db` use\n     *     // the same connection.\n     *     await doStuff(db)\n     *   })\n     * ```\n     */\n    connection() {\n        return new ConnectionBuilder({ ...this.#props });\n    }\n    /**\n     * Returns a copy of this Kysely instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    /**\n     * Returns a copy of this Kysely instance without any plugins.\n     */\n    withoutPlugins() {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * @override\n     */\n    withSchema(schema) {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n    /**\n     * Returns a copy of this Kysely instance with tables added to its\n     * database type.\n     *\n     * This method only modifies the types and doesn't affect any of the\n     * executed queries in any way.\n     *\n     * ### Examples\n     *\n     * The following example adds and uses a temporary table:\n     *\n     * @example\n     * ```ts\n     * await db.schema\n     *   .createTable('temp_table')\n     *   .temporary()\n     *   .addColumn('some_column', 'integer')\n     *   .execute()\n     *\n     * const tempDb = db.withTables<{\n     *   temp_table: {\n     *     some_column: number\n     *   }\n     * }>()\n     *\n     * await tempDb\n     *   .insertInto('temp_table')\n     *   .values({ some_column: 100 })\n     *   .execute()\n     * ```\n     */\n    withTables() {\n        return new Kysely({ ...this.#props });\n    }\n    /**\n     * Releases all resources and disconnects from the database.\n     *\n     * You need to call this when you are done using the `Kysely` instance.\n     */\n    async destroy() {\n        await this.#props.driver.destroy();\n    }\n    /**\n     * Returns true if this `Kysely` instance is a transaction.\n     *\n     * You can also use `db instanceof Transaction`.\n     */\n    get isTransaction() {\n        return false;\n    }\n    /**\n     * @internal\n     * @private\n     */\n    getExecutor() {\n        return this.#props.executor;\n    }\n    /**\n     * Executes a given compiled query or query builder.\n     *\n     * See {@link https://github.com/koskimas/kysely/blob/master/site/docs/recipes/splitting-build-compile-and-execute-code.md#execute-compiled-queries splitting build, compile and execute code recipe} for more information.\n     */\n    executeQuery(query, queryId = createQueryId()) {\n        const compiledQuery = isCompilable(query) ? query.compile() : query;\n        return this.getExecutor().executeQuery(compiledQuery, queryId);\n    }\n}\nexport class Transaction extends Kysely {\n    #props;\n    constructor(props) {\n        super(props);\n        this.#props = props;\n    }\n    // The return type is `true` instead of `boolean` to make Kysely<DB>\n    // unassignable to Transaction<DB> while allowing assignment the\n    // other way around.\n    get isTransaction() {\n        return true;\n    }\n    transaction() {\n        throw new Error('calling the transaction method for a Transaction is not supported');\n    }\n    connection() {\n        throw new Error('calling the connection method for a Transaction is not supported');\n    }\n    async destroy() {\n        throw new Error('calling the destroy method for a Transaction is not supported');\n    }\n    withPlugin(plugin) {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    withoutPlugins() {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * @override\n     */\n    withSchema(schema) {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n    withTables() {\n        return new Transaction({ ...this.#props });\n    }\n}\nexport function isKyselyProps(obj) {\n    return (isObject(obj) &&\n        isObject(obj.config) &&\n        isObject(obj.driver) &&\n        isObject(obj.executor) &&\n        isObject(obj.dialect));\n}\nexport class ConnectionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    async execute(callback) {\n        return this.#props.executor.provideConnection(async (connection) => {\n            const executor = this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection));\n            const db = new Kysely({\n                ...this.#props,\n                executor,\n            });\n            return await callback(db);\n        });\n    }\n}\npreventAwait(ConnectionBuilder, \"don't await ConnectionBuilder instances directly. To execute the query you need to call the `execute` method\");\nexport class TransactionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    setIsolationLevel(isolationLevel) {\n        return new TransactionBuilder({\n            ...this.#props,\n            isolationLevel,\n        });\n    }\n    async execute(callback) {\n        const { isolationLevel, ...kyselyProps } = this.#props;\n        const settings = { isolationLevel };\n        validateTransactionSettings(settings);\n        return this.#props.executor.provideConnection(async (connection) => {\n            const executor = this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection));\n            const transaction = new Transaction({\n                ...kyselyProps,\n                executor,\n            });\n            try {\n                await this.#props.driver.beginTransaction(connection, settings);\n                const result = await callback(transaction);\n                await this.#props.driver.commitTransaction(connection);\n                return result;\n            }\n            catch (error) {\n                await this.#props.driver.rollbackTransaction(connection);\n                throw error;\n            }\n        });\n    }\n}\npreventAwait(TransactionBuilder, \"don't await TransactionBuilder instances directly. To execute the transaction you need to call the `execute` method\");\nfunction validateTransactionSettings(settings) {\n    if (settings.isolationLevel &&\n        !TRANSACTION_ISOLATION_LEVELS.includes(settings.isolationLevel)) {\n        throw new Error(`invalid transaction isolation level ${settings.isolationLevel}`);\n    }\n}\n","/// <reference types=\"./compilable.d.ts\" />\nimport { isFunction, isObject } from './object-utils.js';\nexport function isCompilable(value) {\n    return isObject(value) && isFunction(value.compile);\n}\n","/// <reference types=\"./dialect-adapter-base.d.ts\" />\n/**\n * A basic implementation of `DialectAdapter` with sensible default values.\n * Third-party dialects can extend this instead of implementing the `DialectAdapter`\n * interface from scratch. That way all new settings will get default values when\n * they are added and there will be less breaking changes.\n */\nexport class DialectAdapterBase {\n    get supportsCreateIfNotExists() {\n        return true;\n    }\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return false;\n    }\n    get supportsOutput() {\n        return false;\n    }\n}\n","/// <reference types=\"./sqlite-adapter.d.ts\" />\nimport { DialectAdapterBase } from '../dialect-adapter-base.js';\nexport class SqliteAdapter extends DialectAdapterBase {\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return true;\n    }\n    async acquireMigrationLock(_db, _opt) {\n        // SQLite only has one connection that's reserved by the migration system\n        // for the whole time between acquireMigrationLock and releaseMigrationLock.\n        // We don't need to do anything here.\n    }\n    async releaseMigrationLock(_db, _opt) {\n        // SQLite only has one connection that's reserved by the migration system\n        // for the whole time between acquireMigrationLock and releaseMigrationLock.\n        // We don't need to do anything here.\n    }\n}\n","/// <reference types=\"./dummy-driver.d.ts\" />\n/**\n * A driver that does absolutely nothing.\n *\n * You can use this to create Kysely instances solely for building queries\n *\n * ### Examples\n *\n * This example creates a Kysely instance for building postgres queries:\n *\n * ```ts\n * const db = new Kysely<Database>({\n *   dialect: {\n *     createAdapter() {\n *       return new PostgresAdapter()\n *     },\n *     createDriver() {\n *       return new DummyDriver()\n *     },\n *     createIntrospector(db: Kysely<any>) {\n *       return new PostgresIntrospector(db)\n *     },\n *     createQueryCompiler() {\n *       return new PostgresQueryCompiler()\n *     },\n *   },\n * })\n * ```\n *\n * You can use it to build a query and compile it to SQL but trying to\n * execute the query will throw an error.\n *\n * ```ts\n * const { sql } = db.selectFrom('person').selectAll().compile()\n * console.log(sql) // select * from \"person\"\n * ```\n */\nexport class DummyDriver {\n    async init() {\n        // Nothing to do here.\n    }\n    async acquireConnection() {\n        return new DummyConnection();\n    }\n    async beginTransaction() {\n        // Nothing to do here.\n    }\n    async commitTransaction() {\n        // Nothing to do here.\n    }\n    async rollbackTransaction() {\n        // Nothing to do here.\n    }\n    async releaseConnection() {\n        // Nothing to do here.\n    }\n    async destroy() {\n        // Nothing to do here.\n    }\n}\nclass DummyConnection {\n    async executeQuery() {\n        return {\n            rows: [],\n        };\n    }\n    async *streamQuery() {\n        // Nothing to do here.\n    }\n}\n","/// <reference types=\"./operation-node-visitor.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport class OperationNodeVisitor {\n    nodeStack = [];\n    get parentNode() {\n        return this.nodeStack[this.nodeStack.length - 2];\n    }\n    #visitors = freeze({\n        AliasNode: this.visitAlias.bind(this),\n        ColumnNode: this.visitColumn.bind(this),\n        IdentifierNode: this.visitIdentifier.bind(this),\n        SchemableIdentifierNode: this.visitSchemableIdentifier.bind(this),\n        RawNode: this.visitRaw.bind(this),\n        ReferenceNode: this.visitReference.bind(this),\n        SelectQueryNode: this.visitSelectQuery.bind(this),\n        SelectionNode: this.visitSelection.bind(this),\n        TableNode: this.visitTable.bind(this),\n        FromNode: this.visitFrom.bind(this),\n        SelectAllNode: this.visitSelectAll.bind(this),\n        AndNode: this.visitAnd.bind(this),\n        OrNode: this.visitOr.bind(this),\n        ValueNode: this.visitValue.bind(this),\n        ValueListNode: this.visitValueList.bind(this),\n        PrimitiveValueListNode: this.visitPrimitiveValueList.bind(this),\n        ParensNode: this.visitParens.bind(this),\n        JoinNode: this.visitJoin.bind(this),\n        OperatorNode: this.visitOperator.bind(this),\n        WhereNode: this.visitWhere.bind(this),\n        InsertQueryNode: this.visitInsertQuery.bind(this),\n        DeleteQueryNode: this.visitDeleteQuery.bind(this),\n        ReturningNode: this.visitReturning.bind(this),\n        CreateTableNode: this.visitCreateTable.bind(this),\n        AddColumnNode: this.visitAddColumn.bind(this),\n        ColumnDefinitionNode: this.visitColumnDefinition.bind(this),\n        DropTableNode: this.visitDropTable.bind(this),\n        DataTypeNode: this.visitDataType.bind(this),\n        OrderByNode: this.visitOrderBy.bind(this),\n        OrderByItemNode: this.visitOrderByItem.bind(this),\n        GroupByNode: this.visitGroupBy.bind(this),\n        GroupByItemNode: this.visitGroupByItem.bind(this),\n        UpdateQueryNode: this.visitUpdateQuery.bind(this),\n        ColumnUpdateNode: this.visitColumnUpdate.bind(this),\n        LimitNode: this.visitLimit.bind(this),\n        OffsetNode: this.visitOffset.bind(this),\n        OnConflictNode: this.visitOnConflict.bind(this),\n        OnDuplicateKeyNode: this.visitOnDuplicateKey.bind(this),\n        CreateIndexNode: this.visitCreateIndex.bind(this),\n        DropIndexNode: this.visitDropIndex.bind(this),\n        ListNode: this.visitList.bind(this),\n        PrimaryKeyConstraintNode: this.visitPrimaryKeyConstraint.bind(this),\n        UniqueConstraintNode: this.visitUniqueConstraint.bind(this),\n        ReferencesNode: this.visitReferences.bind(this),\n        CheckConstraintNode: this.visitCheckConstraint.bind(this),\n        WithNode: this.visitWith.bind(this),\n        CommonTableExpressionNode: this.visitCommonTableExpression.bind(this),\n        CommonTableExpressionNameNode: this.visitCommonTableExpressionName.bind(this),\n        HavingNode: this.visitHaving.bind(this),\n        CreateSchemaNode: this.visitCreateSchema.bind(this),\n        DropSchemaNode: this.visitDropSchema.bind(this),\n        AlterTableNode: this.visitAlterTable.bind(this),\n        DropColumnNode: this.visitDropColumn.bind(this),\n        RenameColumnNode: this.visitRenameColumn.bind(this),\n        AlterColumnNode: this.visitAlterColumn.bind(this),\n        ModifyColumnNode: this.visitModifyColumn.bind(this),\n        AddConstraintNode: this.visitAddConstraint.bind(this),\n        DropConstraintNode: this.visitDropConstraint.bind(this),\n        ForeignKeyConstraintNode: this.visitForeignKeyConstraint.bind(this),\n        CreateViewNode: this.visitCreateView.bind(this),\n        DropViewNode: this.visitDropView.bind(this),\n        GeneratedNode: this.visitGenerated.bind(this),\n        DefaultValueNode: this.visitDefaultValue.bind(this),\n        OnNode: this.visitOn.bind(this),\n        ValuesNode: this.visitValues.bind(this),\n        SelectModifierNode: this.visitSelectModifier.bind(this),\n        CreateTypeNode: this.visitCreateType.bind(this),\n        DropTypeNode: this.visitDropType.bind(this),\n        ExplainNode: this.visitExplain.bind(this),\n        DefaultInsertValueNode: this.visitDefaultInsertValue.bind(this),\n        AggregateFunctionNode: this.visitAggregateFunction.bind(this),\n        OverNode: this.visitOver.bind(this),\n        PartitionByNode: this.visitPartitionBy.bind(this),\n        PartitionByItemNode: this.visitPartitionByItem.bind(this),\n        SetOperationNode: this.visitSetOperation.bind(this),\n        BinaryOperationNode: this.visitBinaryOperation.bind(this),\n        UnaryOperationNode: this.visitUnaryOperation.bind(this),\n        UsingNode: this.visitUsing.bind(this),\n        FunctionNode: this.visitFunction.bind(this),\n        CaseNode: this.visitCase.bind(this),\n        WhenNode: this.visitWhen.bind(this),\n        JSONReferenceNode: this.visitJSONReference.bind(this),\n        JSONPathNode: this.visitJSONPath.bind(this),\n        JSONPathLegNode: this.visitJSONPathLeg.bind(this),\n        JSONOperatorChainNode: this.visitJSONOperatorChain.bind(this),\n        TupleNode: this.visitTuple.bind(this),\n        MergeQueryNode: this.visitMergeQuery.bind(this),\n        MatchedNode: this.visitMatched.bind(this),\n        AddIndexNode: this.visitAddIndex.bind(this),\n        CastNode: this.visitCast.bind(this),\n        FetchNode: this.visitFetch.bind(this),\n        TopNode: this.visitTop.bind(this),\n        OutputNode: this.visitOutput.bind(this),\n    });\n    visitNode = (node) => {\n        this.nodeStack.push(node);\n        this.#visitors[node.kind](node);\n        this.nodeStack.pop();\n    };\n}\n","/// <reference types=\"./default-query-compiler.d.ts\" />\nimport { CreateTableNode } from '../operation-node/create-table-node.js';\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { OperationNodeVisitor } from '../operation-node/operation-node-visitor.js';\nimport { OperatorNode } from '../operation-node/operator-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { freeze, isString, isNumber, isBoolean, isNull, isDate, isBigInt, } from '../util/object-utils.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { SetOperationNode } from '../operation-node/set-operation-node.js';\nimport { MergeQueryNode } from '../operation-node/merge-query-node.js';\nexport class DefaultQueryCompiler extends OperationNodeVisitor {\n    #sql = '';\n    #parameters = [];\n    get numParameters() {\n        return this.#parameters.length;\n    }\n    compileQuery(node) {\n        this.#sql = '';\n        this.#parameters = [];\n        this.nodeStack.splice(0, this.nodeStack.length);\n        this.visitNode(node);\n        return freeze({\n            query: node,\n            sql: this.getSql(),\n            parameters: [...this.#parameters],\n        });\n    }\n    getSql() {\n        return this.#sql;\n    }\n    visitSelectQuery(node) {\n        const wrapInParens = this.parentNode !== undefined &&\n            !ParensNode.is(this.parentNode) &&\n            !InsertQueryNode.is(this.parentNode) &&\n            !CreateTableNode.is(this.parentNode) &&\n            !CreateViewNode.is(this.parentNode) &&\n            !SetOperationNode.is(this.parentNode);\n        if (this.parentNode === undefined && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (wrapInParens) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('select');\n        if (node.distinctOn) {\n            this.append(' ');\n            this.compileDistinctOn(node.distinctOn);\n        }\n        if (node.frontModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.frontModifiers, ' ');\n        }\n        if (node.top) {\n            this.append(' ');\n            this.visitNode(node.top);\n        }\n        if (node.selections) {\n            this.append(' ');\n            this.compileList(node.selections);\n        }\n        if (node.from) {\n            this.append(' ');\n            this.visitNode(node.from);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.groupBy) {\n            this.append(' ');\n            this.visitNode(node.groupBy);\n        }\n        if (node.having) {\n            this.append(' ');\n            this.visitNode(node.having);\n        }\n        if (node.setOperations) {\n            this.append(' ');\n            this.compileList(node.setOperations, ' ');\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.offset) {\n            this.append(' ');\n            this.visitNode(node.offset);\n        }\n        if (node.fetch) {\n            this.append(' ');\n            this.visitNode(node.fetch);\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(this.sortSelectModifiers([...node.endModifiers]), ' ');\n        }\n        if (wrapInParens) {\n            this.append(')');\n        }\n    }\n    visitFrom(node) {\n        this.append('from ');\n        this.compileList(node.froms);\n    }\n    visitSelection(node) {\n        this.visitNode(node.selection);\n    }\n    visitColumn(node) {\n        this.visitNode(node.column);\n    }\n    compileDistinctOn(expressions) {\n        this.append('distinct on (');\n        this.compileList(expressions);\n        this.append(')');\n    }\n    compileList(nodes, separator = ', ') {\n        const lastIndex = nodes.length - 1;\n        for (let i = 0; i <= lastIndex; i++) {\n            this.visitNode(nodes[i]);\n            if (i < lastIndex) {\n                this.append(separator);\n            }\n        }\n    }\n    visitWhere(node) {\n        this.append('where ');\n        this.visitNode(node.where);\n    }\n    visitHaving(node) {\n        this.append('having ');\n        this.visitNode(node.having);\n    }\n    visitInsertQuery(node) {\n        const rootQueryNode = this.nodeStack.find(QueryNode.is);\n        const isSubQuery = rootQueryNode !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append(node.replace ? 'replace' : 'insert');\n        if (node.ignore) {\n            this.append(' ignore');\n        }\n        if (node.top) {\n            this.append(' ');\n            this.visitNode(node.top);\n        }\n        if (node.into) {\n            this.append(' into ');\n            this.visitNode(node.into);\n        }\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.values) {\n            this.append(' ');\n            this.visitNode(node.values);\n        }\n        if (node.defaultValues) {\n            this.append(' ');\n            this.append('default values');\n        }\n        if (node.onConflict) {\n            this.append(' ');\n            this.visitNode(node.onConflict);\n        }\n        if (node.onDuplicateKey) {\n            this.append(' ');\n            this.visitNode(node.onDuplicateKey);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append(')');\n        }\n    }\n    visitValues(node) {\n        this.append('values ');\n        this.compileList(node.values);\n    }\n    visitDeleteQuery(node) {\n        const isSubQuery = this.nodeStack.find(QueryNode.is) !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('delete ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        this.visitNode(node.from);\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.using) {\n            this.append(' ');\n            this.visitNode(node.using);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery) {\n            this.append(')');\n        }\n    }\n    visitReturning(node) {\n        this.append('returning ');\n        this.compileList(node.selections);\n    }\n    visitAlias(node) {\n        this.visitNode(node.node);\n        this.append(' as ');\n        this.visitNode(node.alias);\n    }\n    visitReference(node) {\n        if (node.table) {\n            this.visitNode(node.table);\n            this.append('.');\n        }\n        this.visitNode(node.column);\n    }\n    visitSelectAll(_) {\n        this.append('*');\n    }\n    visitIdentifier(node) {\n        this.append(this.getLeftIdentifierWrapper());\n        this.compileUnwrappedIdentifier(node);\n        this.append(this.getRightIdentifierWrapper());\n    }\n    compileUnwrappedIdentifier(node) {\n        if (!isString(node.name)) {\n            throw new Error('a non-string identifier was passed to compileUnwrappedIdentifier.');\n        }\n        this.append(this.sanitizeIdentifier(node.name));\n    }\n    visitAnd(node) {\n        this.visitNode(node.left);\n        this.append(' and ');\n        this.visitNode(node.right);\n    }\n    visitOr(node) {\n        this.visitNode(node.left);\n        this.append(' or ');\n        this.visitNode(node.right);\n    }\n    visitValue(node) {\n        if (node.immediate) {\n            this.appendImmediateValue(node.value);\n        }\n        else {\n            this.appendValue(node.value);\n        }\n    }\n    visitValueList(node) {\n        this.append('(');\n        this.compileList(node.values);\n        this.append(')');\n    }\n    visitTuple(node) {\n        this.append('(');\n        this.compileList(node.values);\n        this.append(')');\n    }\n    visitPrimitiveValueList(node) {\n        this.append('(');\n        const { values } = node;\n        for (let i = 0; i < values.length; ++i) {\n            this.appendValue(values[i]);\n            if (i !== values.length - 1) {\n                this.append(', ');\n            }\n        }\n        this.append(')');\n    }\n    visitParens(node) {\n        this.append('(');\n        this.visitNode(node.node);\n        this.append(')');\n    }\n    visitJoin(node) {\n        this.append(JOIN_TYPE_SQL[node.joinType]);\n        this.append(' ');\n        this.visitNode(node.table);\n        if (node.on) {\n            this.append(' ');\n            this.visitNode(node.on);\n        }\n    }\n    visitOn(node) {\n        this.append('on ');\n        this.visitNode(node.on);\n    }\n    visitRaw(node) {\n        const { sqlFragments, parameters: params } = node;\n        for (let i = 0; i < sqlFragments.length; ++i) {\n            this.append(sqlFragments[i]);\n            if (params.length > i) {\n                this.visitNode(params[i]);\n            }\n        }\n    }\n    visitOperator(node) {\n        this.append(node.operator);\n    }\n    visitTable(node) {\n        this.visitNode(node.table);\n    }\n    visitSchemableIdentifier(node) {\n        if (node.schema) {\n            this.visitNode(node.schema);\n            this.append('.');\n        }\n        this.visitNode(node.identifier);\n    }\n    visitCreateTable(node) {\n        this.append('create ');\n        if (node.frontModifiers && node.frontModifiers.length > 0) {\n            this.compileList(node.frontModifiers, ' ');\n            this.append(' ');\n        }\n        if (node.temporary) {\n            this.append('temporary ');\n        }\n        this.append('table ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.table);\n        if (node.selectQuery) {\n            this.append(' as ');\n            this.visitNode(node.selectQuery);\n        }\n        else {\n            this.append(' (');\n            this.compileList([...node.columns, ...(node.constraints ?? [])]);\n            this.append(')');\n            if (node.onCommit) {\n                this.append(' on commit ');\n                this.append(node.onCommit);\n            }\n            if (node.endModifiers && node.endModifiers.length > 0) {\n                this.append(' ');\n                this.compileList(node.endModifiers, ' ');\n            }\n        }\n    }\n    visitColumnDefinition(node) {\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.column);\n        this.append(' ');\n        this.visitNode(node.dataType);\n        if (node.unsigned) {\n            this.append(' unsigned');\n        }\n        if (node.frontModifiers && node.frontModifiers.length > 0) {\n            this.append(' ');\n            this.compileList(node.frontModifiers, ' ');\n        }\n        if (node.generated) {\n            this.append(' ');\n            this.visitNode(node.generated);\n        }\n        if (node.identity) {\n            this.append(' identity');\n        }\n        if (node.defaultTo) {\n            this.append(' ');\n            this.visitNode(node.defaultTo);\n        }\n        if (node.notNull) {\n            this.append(' not null');\n        }\n        if (node.unique) {\n            this.append(' unique');\n        }\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        if (node.primaryKey) {\n            this.append(' primary key');\n        }\n        if (node.autoIncrement) {\n            this.append(' ');\n            this.append(this.getAutoIncrement());\n        }\n        if (node.references) {\n            this.append(' ');\n            this.visitNode(node.references);\n        }\n        if (node.check) {\n            this.append(' ');\n            this.visitNode(node.check);\n        }\n        if (node.endModifiers && node.endModifiers.length > 0) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    getAutoIncrement() {\n        return 'auto_increment';\n    }\n    visitReferences(node) {\n        this.append('references ');\n        this.visitNode(node.table);\n        this.append(' (');\n        this.compileList(node.columns);\n        this.append(')');\n        if (node.onDelete) {\n            this.append(' on delete ');\n            this.append(node.onDelete);\n        }\n        if (node.onUpdate) {\n            this.append(' on update ');\n            this.append(node.onUpdate);\n        }\n    }\n    visitDropTable(node) {\n        this.append('drop table ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.table);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitDataType(node) {\n        this.append(node.dataType);\n    }\n    visitOrderBy(node) {\n        this.append('order by ');\n        this.compileList(node.items);\n    }\n    visitOrderByItem(node) {\n        this.visitNode(node.orderBy);\n        if (node.direction) {\n            this.append(' ');\n            this.visitNode(node.direction);\n        }\n    }\n    visitGroupBy(node) {\n        this.append('group by ');\n        this.compileList(node.items);\n    }\n    visitGroupByItem(node) {\n        this.visitNode(node.groupBy);\n    }\n    visitUpdateQuery(node) {\n        const rootQueryNode = this.nodeStack.find(QueryNode.is);\n        const isSubQuery = rootQueryNode !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('update ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        if (node.table) {\n            this.visitNode(node.table);\n            this.append(' ');\n        }\n        this.append('set ');\n        if (node.updates) {\n            this.compileList(node.updates);\n        }\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.from) {\n            this.append(' ');\n            this.visitNode(node.from);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append(')');\n        }\n    }\n    visitColumnUpdate(node) {\n        this.visitNode(node.column);\n        this.append(' = ');\n        this.visitNode(node.value);\n    }\n    visitLimit(node) {\n        this.append('limit ');\n        this.visitNode(node.limit);\n    }\n    visitOffset(node) {\n        this.append('offset ');\n        this.visitNode(node.offset);\n    }\n    visitOnConflict(node) {\n        this.append('on conflict');\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        else if (node.constraint) {\n            this.append(' on constraint ');\n            this.visitNode(node.constraint);\n        }\n        else if (node.indexExpression) {\n            this.append(' (');\n            this.visitNode(node.indexExpression);\n            this.append(')');\n        }\n        if (node.indexWhere) {\n            this.append(' ');\n            this.visitNode(node.indexWhere);\n        }\n        if (node.doNothing === true) {\n            this.append(' do nothing');\n        }\n        else if (node.updates) {\n            this.append(' do update set ');\n            this.compileList(node.updates);\n            if (node.updateWhere) {\n                this.append(' ');\n                this.visitNode(node.updateWhere);\n            }\n        }\n    }\n    visitOnDuplicateKey(node) {\n        this.append('on duplicate key update ');\n        this.compileList(node.updates);\n    }\n    visitCreateIndex(node) {\n        this.append('create ');\n        if (node.unique) {\n            this.append('unique ');\n        }\n        this.append('index ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.using) {\n            this.append(' using ');\n            this.visitNode(node.using);\n        }\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n    }\n    visitDropIndex(node) {\n        this.append('drop index ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitCreateSchema(node) {\n        this.append('create schema ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.schema);\n    }\n    visitDropSchema(node) {\n        this.append('drop schema ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.schema);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitPrimaryKeyConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('primary key (');\n        this.compileList(node.columns);\n        this.append(')');\n    }\n    visitUniqueConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('unique');\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        this.append(' (');\n        this.compileList(node.columns);\n        this.append(')');\n    }\n    visitCheckConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('check (');\n        this.visitNode(node.expression);\n        this.append(')');\n    }\n    visitForeignKeyConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('foreign key (');\n        this.compileList(node.columns);\n        this.append(') ');\n        this.visitNode(node.references);\n        if (node.onDelete) {\n            this.append(' on delete ');\n            this.append(node.onDelete);\n        }\n        if (node.onUpdate) {\n            this.append(' on update ');\n            this.append(node.onUpdate);\n        }\n    }\n    visitList(node) {\n        this.compileList(node.items);\n    }\n    visitWith(node) {\n        this.append('with ');\n        if (node.recursive) {\n            this.append('recursive ');\n        }\n        this.compileList(node.expressions);\n    }\n    visitCommonTableExpression(node) {\n        this.visitNode(node.name);\n        this.append(' as ');\n        if (isBoolean(node.materialized)) {\n            if (!node.materialized) {\n                this.append('not ');\n            }\n            this.append('materialized ');\n        }\n        this.visitNode(node.expression);\n    }\n    visitCommonTableExpressionName(node) {\n        this.visitNode(node.table);\n        if (node.columns) {\n            this.append('(');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n    }\n    visitAlterTable(node) {\n        this.append('alter table ');\n        this.visitNode(node.table);\n        this.append(' ');\n        if (node.renameTo) {\n            this.append('rename to ');\n            this.visitNode(node.renameTo);\n        }\n        if (node.setSchema) {\n            this.append('set schema ');\n            this.visitNode(node.setSchema);\n        }\n        if (node.addConstraint) {\n            this.visitNode(node.addConstraint);\n        }\n        if (node.dropConstraint) {\n            this.visitNode(node.dropConstraint);\n        }\n        if (node.columnAlterations) {\n            this.compileColumnAlterations(node.columnAlterations);\n        }\n        if (node.addIndex) {\n            this.visitNode(node.addIndex);\n        }\n        if (node.dropIndex) {\n            this.visitNode(node.dropIndex);\n        }\n    }\n    visitAddColumn(node) {\n        this.append('add column ');\n        this.visitNode(node.column);\n    }\n    visitRenameColumn(node) {\n        this.append('rename column ');\n        this.visitNode(node.column);\n        this.append(' to ');\n        this.visitNode(node.renameTo);\n    }\n    visitDropColumn(node) {\n        this.append('drop column ');\n        this.visitNode(node.column);\n    }\n    visitAlterColumn(node) {\n        this.append('alter column ');\n        this.visitNode(node.column);\n        this.append(' ');\n        if (node.dataType) {\n            if (this.announcesNewColumnDataType()) {\n                this.append('type ');\n            }\n            this.visitNode(node.dataType);\n            if (node.dataTypeExpression) {\n                this.append('using ');\n                this.visitNode(node.dataTypeExpression);\n            }\n        }\n        if (node.setDefault) {\n            this.append('set default ');\n            this.visitNode(node.setDefault);\n        }\n        if (node.dropDefault) {\n            this.append('drop default');\n        }\n        if (node.setNotNull) {\n            this.append('set not null');\n        }\n        if (node.dropNotNull) {\n            this.append('drop not null');\n        }\n    }\n    visitModifyColumn(node) {\n        this.append('modify column ');\n        this.visitNode(node.column);\n    }\n    visitAddConstraint(node) {\n        this.append('add ');\n        this.visitNode(node.constraint);\n    }\n    visitDropConstraint(node) {\n        this.append('drop constraint ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.constraintName);\n        if (node.modifier === 'cascade') {\n            this.append(' cascade');\n        }\n        else if (node.modifier === 'restrict') {\n            this.append(' restrict');\n        }\n    }\n    visitSetOperation(node) {\n        this.append(node.operator);\n        this.append(' ');\n        if (node.all) {\n            this.append('all ');\n        }\n        this.visitNode(node.expression);\n    }\n    visitCreateView(node) {\n        this.append('create ');\n        if (node.orReplace) {\n            this.append('or replace ');\n        }\n        if (node.materialized) {\n            this.append('materialized ');\n        }\n        if (node.temporary) {\n            this.append('temporary ');\n        }\n        this.append('view ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        this.append(' ');\n        if (node.columns) {\n            this.append('(');\n            this.compileList(node.columns);\n            this.append(') ');\n        }\n        if (node.as) {\n            this.append('as ');\n            this.visitNode(node.as);\n        }\n    }\n    visitDropView(node) {\n        this.append('drop ');\n        if (node.materialized) {\n            this.append('materialized ');\n        }\n        this.append('view ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitGenerated(node) {\n        this.append('generated ');\n        if (node.always) {\n            this.append('always ');\n        }\n        if (node.byDefault) {\n            this.append('by default ');\n        }\n        this.append('as ');\n        if (node.identity) {\n            this.append('identity');\n        }\n        if (node.expression) {\n            this.append('(');\n            this.visitNode(node.expression);\n            this.append(')');\n        }\n        if (node.stored) {\n            this.append(' stored');\n        }\n    }\n    visitDefaultValue(node) {\n        this.append('default ');\n        this.visitNode(node.defaultValue);\n    }\n    visitSelectModifier(node) {\n        if (node.rawModifier) {\n            this.visitNode(node.rawModifier);\n        }\n        else {\n            this.append(SELECT_MODIFIER_SQL[node.modifier]);\n        }\n        if (node.of) {\n            this.append(' of ');\n            this.compileList(node.of, ', ');\n        }\n    }\n    visitCreateType(node) {\n        this.append('create type ');\n        this.visitNode(node.name);\n        if (node.enum) {\n            this.append(' as enum ');\n            this.visitNode(node.enum);\n        }\n    }\n    visitDropType(node) {\n        this.append('drop type ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n    }\n    visitExplain(node) {\n        this.append('explain');\n        if (node.options || node.format) {\n            this.append(' ');\n            this.append(this.getLeftExplainOptionsWrapper());\n            if (node.options) {\n                this.visitNode(node.options);\n                if (node.format) {\n                    this.append(this.getExplainOptionsDelimiter());\n                }\n            }\n            if (node.format) {\n                this.append('format');\n                this.append(this.getExplainOptionAssignment());\n                this.append(node.format);\n            }\n            this.append(this.getRightExplainOptionsWrapper());\n        }\n    }\n    visitDefaultInsertValue(_) {\n        this.append('default');\n    }\n    visitAggregateFunction(node) {\n        this.append(node.func);\n        this.append('(');\n        if (node.distinct) {\n            this.append('distinct ');\n        }\n        this.compileList(node.aggregated);\n        this.append(')');\n        if (node.filter) {\n            this.append(' filter(');\n            this.visitNode(node.filter);\n            this.append(')');\n        }\n        if (node.over) {\n            this.append(' ');\n            this.visitNode(node.over);\n        }\n    }\n    visitOver(node) {\n        this.append('over(');\n        if (node.partitionBy) {\n            this.visitNode(node.partitionBy);\n            if (node.orderBy) {\n                this.append(' ');\n            }\n        }\n        if (node.orderBy) {\n            this.visitNode(node.orderBy);\n        }\n        this.append(')');\n    }\n    visitPartitionBy(node) {\n        this.append('partition by ');\n        this.compileList(node.items);\n    }\n    visitPartitionByItem(node) {\n        this.visitNode(node.partitionBy);\n    }\n    visitBinaryOperation(node) {\n        this.visitNode(node.leftOperand);\n        this.append(' ');\n        this.visitNode(node.operator);\n        this.append(' ');\n        this.visitNode(node.rightOperand);\n    }\n    visitUnaryOperation(node) {\n        this.visitNode(node.operator);\n        if (!this.isMinusOperator(node.operator)) {\n            this.append(' ');\n        }\n        this.visitNode(node.operand);\n    }\n    isMinusOperator(node) {\n        return OperatorNode.is(node) && node.operator === '-';\n    }\n    visitUsing(node) {\n        this.append('using ');\n        this.compileList(node.tables);\n    }\n    visitFunction(node) {\n        this.append(node.func);\n        this.append('(');\n        this.compileList(node.arguments);\n        this.append(')');\n    }\n    visitCase(node) {\n        this.append('case');\n        if (node.value) {\n            this.append(' ');\n            this.visitNode(node.value);\n        }\n        if (node.when) {\n            this.append(' ');\n            this.compileList(node.when, ' ');\n        }\n        if (node.else) {\n            this.append(' else ');\n            this.visitNode(node.else);\n        }\n        this.append(' end');\n        if (node.isStatement) {\n            this.append(' case');\n        }\n    }\n    visitWhen(node) {\n        this.append('when ');\n        this.visitNode(node.condition);\n        if (node.result) {\n            this.append(' then ');\n            this.visitNode(node.result);\n        }\n    }\n    visitJSONReference(node) {\n        this.visitNode(node.reference);\n        this.visitNode(node.traversal);\n    }\n    visitJSONPath(node) {\n        if (node.inOperator) {\n            this.visitNode(node.inOperator);\n        }\n        this.append(\"'$\");\n        for (const pathLeg of node.pathLegs) {\n            this.visitNode(pathLeg);\n        }\n        this.append(\"'\");\n    }\n    visitJSONPathLeg(node) {\n        const isArrayLocation = node.type === 'ArrayLocation';\n        this.append(isArrayLocation ? '[' : '.');\n        this.append(String(node.value));\n        if (isArrayLocation) {\n            this.append(']');\n        }\n    }\n    visitJSONOperatorChain(node) {\n        for (let i = 0, len = node.values.length; i < len; i++) {\n            if (i === len - 1) {\n                this.visitNode(node.operator);\n            }\n            else {\n                this.append('->');\n            }\n            this.visitNode(node.values[i]);\n        }\n    }\n    visitMergeQuery(node) {\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('merge ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        this.append('into ');\n        this.visitNode(node.into);\n        if (node.using) {\n            this.append(' ');\n            this.visitNode(node.using);\n        }\n        if (node.whens) {\n            this.append(' ');\n            this.compileList(node.whens, ' ');\n        }\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n    }\n    visitMatched(node) {\n        if (node.not) {\n            this.append('not ');\n        }\n        this.append('matched');\n        if (node.bySource) {\n            this.append(' by source');\n        }\n    }\n    visitAddIndex(node) {\n        this.append('add ');\n        if (node.unique) {\n            this.append('unique ');\n        }\n        this.append('index ');\n        this.visitNode(node.name);\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.using) {\n            this.append(' using ');\n            this.visitNode(node.using);\n        }\n    }\n    visitCast(node) {\n        this.append('cast(');\n        this.visitNode(node.expression);\n        this.append(' as ');\n        this.visitNode(node.dataType);\n        this.append(')');\n    }\n    visitFetch(node) {\n        this.append('fetch next ');\n        this.visitNode(node.rowCount);\n        this.append(` rows ${node.modifier}`);\n    }\n    visitOutput(node) {\n        this.append('output ');\n        this.compileList(node.selections);\n    }\n    visitTop(node) {\n        this.append(`top(${node.expression})`);\n        if (node.modifiers) {\n            this.append(` ${node.modifiers}`);\n        }\n    }\n    append(str) {\n        this.#sql += str;\n    }\n    appendValue(parameter) {\n        this.addParameter(parameter);\n        this.append(this.getCurrentParameterPlaceholder());\n    }\n    getLeftIdentifierWrapper() {\n        return '\"';\n    }\n    getRightIdentifierWrapper() {\n        return '\"';\n    }\n    getCurrentParameterPlaceholder() {\n        return '$' + this.numParameters;\n    }\n    getLeftExplainOptionsWrapper() {\n        return '(';\n    }\n    getExplainOptionAssignment() {\n        return ' ';\n    }\n    getExplainOptionsDelimiter() {\n        return ', ';\n    }\n    getRightExplainOptionsWrapper() {\n        return ')';\n    }\n    sanitizeIdentifier(identifier) {\n        const leftWrap = this.getLeftIdentifierWrapper();\n        const rightWrap = this.getRightIdentifierWrapper();\n        let sanitized = '';\n        for (const c of identifier) {\n            sanitized += c;\n            if (c === leftWrap) {\n                sanitized += leftWrap;\n            }\n            else if (c === rightWrap) {\n                sanitized += rightWrap;\n            }\n        }\n        return sanitized;\n    }\n    addParameter(parameter) {\n        this.#parameters.push(parameter);\n    }\n    appendImmediateValue(value) {\n        if (isString(value)) {\n            this.append(`'${value}'`);\n        }\n        else if (isNumber(value) || isBoolean(value)) {\n            this.append(value.toString());\n        }\n        else if (isNull(value)) {\n            this.append('null');\n        }\n        else if (isDate(value)) {\n            this.appendImmediateValue(value.toISOString());\n        }\n        else if (isBigInt(value)) {\n            this.appendImmediateValue(value.toString());\n        }\n        else {\n            throw new Error(`invalid immediate value ${value}`);\n        }\n    }\n    sortSelectModifiers(arr) {\n        arr.sort((left, right) => left.modifier && right.modifier\n            ? SELECT_MODIFIER_PRIORITY[left.modifier] -\n                SELECT_MODIFIER_PRIORITY[right.modifier]\n            : 1);\n        return freeze(arr);\n    }\n    compileColumnAlterations(columnAlterations) {\n        this.compileList(columnAlterations);\n    }\n    /**\n     * controls whether the dialect adds a \"type\" keyword before a column's new data\n     * type in an ALTER TABLE statement.\n     */\n    announcesNewColumnDataType() {\n        return true;\n    }\n}\nconst SELECT_MODIFIER_SQL = freeze({\n    ForKeyShare: 'for key share',\n    ForNoKeyUpdate: 'for no key update',\n    ForUpdate: 'for update',\n    ForShare: 'for share',\n    NoWait: 'nowait',\n    SkipLocked: 'skip locked',\n    Distinct: 'distinct',\n});\nconst SELECT_MODIFIER_PRIORITY = freeze({\n    ForKeyShare: 1,\n    ForNoKeyUpdate: 1,\n    ForUpdate: 1,\n    ForShare: 1,\n    NoWait: 2,\n    SkipLocked: 2,\n    Distinct: 0,\n});\nconst JOIN_TYPE_SQL = freeze({\n    InnerJoin: 'inner join',\n    LeftJoin: 'left join',\n    RightJoin: 'right join',\n    FullJoin: 'full join',\n    LateralInnerJoin: 'inner join lateral',\n    LateralLeftJoin: 'left join lateral',\n    Using: 'using',\n});\n","/// <reference types=\"./sqlite-query-compiler.d.ts\" />\nimport { DefaultQueryCompiler } from '../../query-compiler/default-query-compiler.js';\nconst ID_WRAP_REGEX = /\"/g;\nexport class SqliteQueryCompiler extends DefaultQueryCompiler {\n    getCurrentParameterPlaceholder() {\n        return '?';\n    }\n    getLeftExplainOptionsWrapper() {\n        return '';\n    }\n    getRightExplainOptionsWrapper() {\n        return '';\n    }\n    getLeftIdentifierWrapper() {\n        return '\"';\n    }\n    getRightIdentifierWrapper() {\n        return '\"';\n    }\n    getAutoIncrement() {\n        return 'autoincrement';\n    }\n    sanitizeIdentifier(identifier) {\n        return identifier.replace(ID_WRAP_REGEX, '\"\"');\n    }\n    visitDefaultInsertValue(_) {\n        // sqlite doesn't support the `default` keyword in inserts.\n        this.append('null');\n    }\n}\n","let syncTimeout;\nlet lockTimeout;\nlet socketTimeout;\nlet isLocked = false;\nconst SocketTimeout = 3000;\nconst SyncTimeout = 500;\nconst SyncLockTimeout = 500;\nlet socket;\nconst processWebsocketEvent = (sync, event) => {\n    if (typeof event.data === \"string\" || isLocked === true)\n        return;\n    clearTimeout(syncTimeout);\n    syncTimeout = undefined;\n    syncTimeout = setTimeout(() => {\n        isLocked = true;\n        sync({ refreshQueries: true })();\n        clearTimeout(syncTimeout);\n        syncTimeout = undefined;\n        lockTimeout = setTimeout(() => {\n            isLocked = false;\n        }, SyncLockTimeout);\n    }, SyncTimeout);\n};\nexport const createSocket = (sync, config, owner) => {\n    if (config.externalWebsocketConnection) {\n        // Hook up to an external WebSocket connection\n        config.externalWebsocketConnection.send(JSON.stringify({ message: \"subscribe\", channelId: owner.id }));\n        config.externalWebsocketConnection.addEventListener(\"message\", (event) => processWebsocketEvent(sync, event));\n        return config.externalWebsocketConnection;\n    }\n    if (config.enableWebsocketConnection) {\n        // Create a WebSocket connection\n        socket = new WebSocket(config.syncUrl?.replace(\"http\", \"ws\"));\n        // Handle incoming WebSocket messages\n        socket.addEventListener(\"message\", (event) => processWebsocketEvent(sync, event));\n        // Handle WebSocket errors\n        socket.onerror = (error) => {\n            console.error(\"WebSocket error:\", error);\n        };\n        // Handle WebSocket closure\n        socket.onclose = () => {\n            socketTimeout = setTimeout(() => createSocket(sync, config, owner), SocketTimeout);\n        };\n        socket.onopen = () => {\n            socket.send(JSON.stringify({ message: \"subscribe\", channelId: owner.id }));\n            clearTimeout(socketTimeout);\n        };\n        return socket;\n    }\n};\n","import * as AST from \"@effect/schema/AST\";\nimport { make } from \"@effect/schema/Schema\";\nimport * as Arr from \"effect/Array\";\nimport * as Context from \"effect/Context\";\nimport * as Effect from \"effect/Effect\";\nimport { constVoid, flow, pipe } from \"effect/Function\";\nimport * as Layer from \"effect/Layer\";\nimport * as Number from \"effect/Number\";\nimport * as Option from \"effect/Option\";\nimport * as Predicate from \"effect/Predicate\";\nimport * as Record from \"effect/Record\";\nimport * as Kysely from \"kysely\";\nimport { Config, createRuntime, defaultConfig } from \"./Config.js\";\nimport { NanoIdGenerator } from \"./Crypto.js\";\nimport { createSocket } from \"./Socket.js\";\nimport { DbFactory, deserializeQuery, emptyRows, queryResultFromRows, serializeQuery, } from \"./Db.js\";\nimport { applyPatches } from \"./Diff.js\";\nimport { makeUnexpectedError } from \"./Error.js\";\nimport { AppState, FlushSync } from \"./Platform.js\";\nimport { isSqlMutation, } from \"./Sqlite.js\";\nimport { makeStore } from \"./Store.js\";\nimport { initialSyncState } from \"./Sync.js\";\nexport class EvoluFactory extends Context.Tag(\"EvoluFactory\")() {\n}\nEvoluFactory.Common = Layer.effect(EvoluFactory, Effect.gen(function* () {\n    const flushSync = yield* Effect.map(Effect.serviceOption(FlushSync), Option.getOrElse(() => (callback) => callback()));\n    const context = Context.empty().pipe(Context.add(DbFactory, yield* DbFactory), Context.add(NanoIdGenerator, yield* NanoIdGenerator), Context.add(FlushSync, flushSync), Context.add(AppState, yield* AppState));\n    // For hot/live reloading and future Evolu dynamic import.\n    const instances = new Map();\n    return EvoluFactory.of({\n        createEvolu: (schema, { indexes, initialData, mnemonic, ...config } = {}) => {\n            const runtime = createRuntime(config);\n            const name = config?.name || defaultConfig.name;\n            const dbSchema = {\n                tables: schemaToTables(schema),\n                indexes: indexes || [],\n            };\n            let evolu = instances.get(name);\n            if (evolu == null) {\n                evolu = createEvolu(dbSchema, runtime, initialData, mnemonic).pipe(Effect.provide(context), runtime.runSync);\n                instances.set(name, evolu);\n            }\n            else {\n                evolu.ensureSchema(dbSchema);\n            }\n            return evolu;\n        },\n    });\n}));\nconst schemaToTables = (schema) => pipe(getPropertySignatures(schema), Record.toEntries, Arr.map(([name, schema]) => ({\n    name,\n    columns: Object.keys(getPropertySignatures(schema)),\n})));\n// TODO: Simplify.\n// https://discord.com/channels/795981131316985866/1218626687546294386/1218796529725476935\nconst getPropertySignatures = (schema) => {\n    const out = {};\n    const propertySignatures = AST.getPropertySignatures(schema.ast);\n    for (let i = 0; i < propertySignatures.length; i++) {\n        const propertySignature = propertySignatures[i];\n        out[propertySignature.name] = make(propertySignature.type);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return out;\n};\nconst createEvolu = (schema, runtime, initialData, mnemonic) => Effect.gen(function* () {\n    yield* Effect.logTrace(\"EvoluFactory createEvolu\");\n    const config = yield* Config;\n    const dbFactory = yield* DbFactory;\n    const appState = yield* AppState;\n    const nanoIdGenerator = yield* NanoIdGenerator;\n    const flushSync = yield* FlushSync;\n    const db = yield* dbFactory.createDb;\n    const errorStore = yield* makeStore(null);\n    const ownerStore = yield* makeStore(null);\n    const rowsStore = yield* makeStore(new Map());\n    const syncStateStore = yield* makeStore(initialSyncState);\n    const loadingPromises = new Map();\n    const subscribedQueries = new Map();\n    const handleAllErrors = (effect) => effect.pipe(Effect.catchAllDefect((error) => Effect.fail(makeUnexpectedError(error))), Effect.tapError(Effect.logError), Effect.tapError(errorStore.setState));\n    const runFork = flow(handleAllErrors, runtime.runFork);\n    const runSync = flow(handleAllErrors, runtime.runSync);\n    const runPromise = flow(handleAllErrors, runtime.runPromise);\n    const initialDataAsMutations = yield* Effect.provideService(initialDataToMutations(initialData), NanoIdGenerator, nanoIdGenerator);\n    const handleDbError = (error) => {\n        Effect.fail(error).pipe(runFork);\n    };\n    const handleSyncStateChange = (state) => {\n        Effect.logDebug([\"Evolu handleSyncStateChange\", { state }]).pipe(Effect.zipRight(syncStateStore.setState(state)), runFork);\n    };\n    const handleDbReceive = () => {\n        Effect.gen(function* () {\n            yield* Effect.logTrace(\"Evolu handleDbReceive\");\n            releaseUnsubscribedLoadingPromises();\n            const queries = [...subscribedQueries.keys()];\n            if (queries.length > 0) {\n                yield* Effect.flatMap(db.loadQueries(queries), handlePatches());\n            }\n        }).pipe(runFork);\n    };\n    const sync = ({ refreshQueries }) => () => {\n        Effect.flatMap(db.sync(refreshQueries ? [...subscribedQueries.keys()] : []), handlePatches()).pipe(runFork);\n    };\n    db.init(schema, initialDataAsMutations, handleDbError, handleSyncStateChange, handleDbReceive, mnemonic).pipe(Effect.tap(sync({ refreshQueries: false })), Effect.flatMap(ownerStore.setState), Effect.catchTag(\"NotSupportedPlatformError\", () => Effect.void), // no-op\n    runFork);\n    let socketResolved = false;\n    const socket = new Promise(resolve => {\n        ownerStore.subscribe(() => {\n            const owner = ownerStore.getState();\n            if (!socketResolved && typeof owner?.id === \"string\") {\n                socketResolved = true;\n                resolve(createSocket(sync, config, owner));\n            }\n        });\n    });\n    const appStateReset = yield* appState.init({\n        onRequestSync: sync({ refreshQueries: true }),\n        reloadUrl: config.reloadUrl,\n    });\n    const handlePatches = (options) => (patches) => Effect.logDebug([\"Evolu handlePatches\", { patches }]).pipe(Effect.zipRight(rowsStoreStateFromPatches(patches)), Effect.tap((nextState) => Effect.forEach(patches, ({ query }) => resolveLoadingPromises(query, nextState.get(query) || emptyRows()))), Effect.tap((nextState) => {\n        if (options?.flushSync) {\n            flushSync(() => {\n                rowsStore.setState(nextState).pipe(runSync);\n            });\n        }\n        else {\n            rowsStore.setState(nextState).pipe(runSync);\n        }\n    }));\n    const rowsStoreStateFromPatches = (patches) => Effect.sync(() => {\n        const rowsStoreState = rowsStore.getState();\n        if (patches.length === 0)\n            return rowsStoreState;\n        const queriesRows = Arr.map(patches, ({ query, patches }) => [\n            query,\n            applyPatches(patches, rowsStoreState.get(query) || emptyRows()),\n        ]);\n        return new Map([...rowsStoreState, ...queriesRows]);\n    });\n    const resolveLoadingPromises = (query, rows) => Effect.sync(() => {\n        const loadingPromise = loadingPromises.get(query);\n        if (!loadingPromise)\n            return;\n        const result = queryResultFromRows(rows);\n        if (loadingPromise.promise.status !== \"fulfilled\") {\n            loadingPromise.resolve(result);\n        }\n        else {\n            // A promise can't be fulfilled 2x, so we need a new one.\n            loadingPromise.promise = Promise.resolve(result);\n        }\n        /**\n         * \"For example, a data framework can set the status and value fields on\n         * a promise preemptively, before passing to React, so that React can\n         * unwrap it without waiting a microtask.\"\n         * https://github.com/acdlite/rfcs/blob/first-class-promises/text/0000-first-class-support-for-promises.md\n         */\n        Object.assign(loadingPromise.promise, {\n            status: \"fulfilled\",\n            value: result,\n        });\n        if (loadingPromise.releaseOnResolve) {\n            loadingPromises.delete(query);\n        }\n    });\n    /**\n     * We can't delete loading promises in `resolveLoadingPromises` because they\n     * must be cached, so repeated calls to `loadQuery` will always return the\n     * same promise until the data changes, and we also can't cache them forever\n     * because only subscribed queries are automatically updated (reactivity is\n     * expensive) hence this function must be called manually on any mutation.\n     */\n    const releaseUnsubscribedLoadingPromises = () => {\n        [...loadingPromises.entries()]\n            .filter(([query]) => !subscribedQueries.has(query))\n            .forEach(([query, loadingPromise]) => {\n            if (loadingPromise.promise.status === \"fulfilled\") {\n                loadingPromises.delete(query);\n            }\n            else {\n                loadingPromise.releaseOnResolve = true;\n            }\n        });\n    };\n    const mutate = (() => {\n        let queue = [];\n        return (table, { id, ...values }, onComplete) => {\n            Effect.logDebug([\"Evolu mutate\", { table, id, values }]).pipe(runSync);\n            const isInsert = id == null;\n            if (isInsert)\n                id = nanoIdGenerator.rowId.pipe(runSync);\n            queue = [...queue, [{ table, id, values, isInsert }, onComplete]];\n            if (queue.length === 1)\n                queueMicrotask(() => {\n                    const [mutations, onCompletes] = Arr.unzip(queue);\n                    queue = [];\n                    const onCompletesDef = onCompletes.filter(Predicate.isNotUndefined);\n                    releaseUnsubscribedLoadingPromises();\n                    db.mutate(mutations, [...subscribedQueries.keys()]).pipe(Effect.flatMap(handlePatches({ flushSync: onCompletesDef.length > 0 })), Effect.tap(() => {\n                        onCompletesDef.forEach((onComplete) => onComplete());\n                    }), runFork);\n                });\n            return { id };\n        };\n    })();\n    const evolu = {\n        socket,\n        subscribeError: errorStore.subscribe,\n        getError: errorStore.getState,\n        createQuery: (queryCallback, options) => pipe(queryCallback(kysely).compile(), (compiledQuery) => {\n            if (isSqlMutation(compiledQuery.sql))\n                throw new Error(\"SQL mutation (INSERT, UPDATE, DELETE, etc.) isn't allowed in the Evolu `createQuery` function. Kysely suggests it because there is no read-only Kysely yet, and removing such an API is not possible. For mutations, use Evolu mutation API.\");\n            const parameters = compiledQuery.parameters;\n            return {\n                sql: compiledQuery.sql,\n                parameters,\n                ...(options && { options }),\n            };\n        }, (query) => serializeQuery(query)),\n        loadQuery: (() => {\n            let queue = [];\n            return (query) => {\n                Effect.logDebug([\n                    \"Evolu loadQuery\",\n                    { query: deserializeQuery(query) },\n                ]).pipe(runSync);\n                let loadingPromise = loadingPromises.get(query);\n                if (!loadingPromise) {\n                    let resolve = constVoid;\n                    const promise = new Promise((_resolve) => {\n                        resolve = _resolve;\n                    });\n                    loadingPromise = { resolve, promise, releaseOnResolve: false };\n                    loadingPromises.set(query, loadingPromise);\n                    queue = [...queue, query];\n                    if (queue.length === 1) {\n                        queueMicrotask(() => {\n                            db.loadQueries(Arr.dedupe(queue)).pipe(Effect.flatMap(handlePatches()), runFork);\n                            queue = [];\n                        });\n                    }\n                }\n                return loadingPromise.promise;\n            };\n        })(),\n        loadQueries: (queries) => queries.map(evolu.loadQuery),\n        subscribeQuery: (query) => (listener) => {\n            subscribedQueries.set(query, Number.increment(subscribedQueries.get(query) ?? 0));\n            const unsubscribe = rowsStore.subscribe(listener);\n            return () => {\n                const count = subscribedQueries.get(query);\n                if (count != null && count > 1)\n                    subscribedQueries.set(query, Number.decrement(count));\n                else\n                    subscribedQueries.delete(query);\n                unsubscribe();\n            };\n        },\n        getQuery: (query) => queryResultFromRows(rowsStore.getState().get(query) || emptyRows()),\n        subscribeOwner: ownerStore.subscribe,\n        getOwner: ownerStore.getState,\n        subscribeSyncState: syncStateStore.subscribe,\n        getSyncState: syncStateStore.getState,\n        create: mutate,\n        update: mutate,\n        createOrUpdate: mutate,\n        resetOwner: (options) => Effect.gen(function* () {\n            yield* db.resetOwner();\n            if (options?.reload !== false)\n                yield* appStateReset.reset;\n        }).pipe(runPromise),\n        restoreOwner: (mnemonic, options) => Effect.gen(function* () {\n            yield* db.restoreOwner(schema, mnemonic);\n            if (options?.reload !== false)\n                yield* appStateReset.reset;\n        }).pipe(runPromise),\n        reloadApp: () => {\n            appStateReset.reset.pipe(runFork);\n        },\n        ensureSchema: (schema) => {\n            db.ensureSchema(schema).pipe(runFork);\n        },\n        exportDatabase: () => db.exportDatabase().pipe(runPromise),\n    };\n    return evolu;\n});\nconst initialDataToMutations = (initialData = constVoid) => Effect.map(NanoIdGenerator, (nanoIdGenerator) => {\n    const mutations = [];\n    const mutate = (table, { id, ...values }) => {\n        if (id == null)\n            id = nanoIdGenerator.rowId.pipe(Effect.runSync);\n        mutations.push({ isInsert: true, id, table: table, values });\n        return { id };\n    };\n    const evolu = {\n        create: mutate,\n        createOrUpdate: mutate,\n    };\n    initialData(evolu);\n    return mutations;\n});\n// https://kysely.dev/docs/recipes/splitting-query-building-and-execution\nconst kysely = new Kysely.Kysely({\n    dialect: {\n        createAdapter: () => new Kysely.SqliteAdapter(),\n        createDriver: () => new Kysely.DummyDriver(),\n        createIntrospector() {\n            throw \"Not implemeneted\";\n        },\n        createQueryCompiler: () => new Kysely.SqliteQueryCompiler(),\n    },\n});\nconst createIndex = kysely.schema.createIndex.bind(kysely.schema);\n/**\n * Create SQLite indexes.\n *\n * See https://www.evolu.dev/docs/indexes\n *\n * @example\n *   const indexes = createIndexes((create) => [\n *     create(\"indexTodoCreatedAt\").on(\"todo\").column(\"createdAt\"),\n *     create(\"indexTodoCategoryCreatedAt\")\n *       .on(\"todoCategory\")\n *       .column(\"createdAt\"),\n *   ]);\n */\nexport const createIndexes = (callback) => callback(createIndex).map((index) => ({\n    name: index.toOperationNode().name.name,\n    sql: index.compile().sql,\n}));\n/** Create a namespaced lock name. */\nexport const getLockName = (name) => Effect.map(Config, (config) => `evolu:${config.name}:${name}`);\n","import * as S from \"@effect/schema/Schema\";\nimport { maybeJson } from \"./Sqlite.js\";\n/** Branded Id Schema. To create Id Schema for a specific table, use {@link id}. */\nexport const Id = S.String.pipe(S.pattern(/^[\\w-]{21}$/), S.brand(\"Id\"));\n/**\n * A factory function to create {@link Id} Schema for a specific table.\n *\n * @example\n *   import * as S from \"@effect/schema/Schema\";\n *   import { id } from \"@evolu/react\";\n *\n *   const TodoId = id(\"Todo\");\n *   type TodoId = typeof TodoId.Type;\n */\nexport const id = (table) => Id.pipe(S.brand(table));\n/**\n * SQLite doesn't support the Date type, so Evolu uses SqliteDate instead. Use\n * the {@link cast} helper to cast SqliteDate from Date and back.\n * https://www.sqlite.org/quirks.html#no_separate_datetime_datatype\n */\nexport const SqliteDate = S.String.pipe(S.filter((s) => !isNaN(Date.parse(s))), S.brand(\"SqliteDate\"));\n/**\n * SQLite doesn't support the boolean type, so Evolu uses SqliteBoolean instead.\n * Use the {@link cast} helper to cast SqliteBoolean from boolean and back.\n * https://www.sqlite.org/quirks.html#no_separate_boolean_datatype\n */\nexport const SqliteBoolean = S.Number.pipe(S.int(), S.filter((s) => s === 0 || s === 1), S.brand(\"SqliteBoolean\"));\nexport function cast(value) {\n    if (typeof value === \"boolean\")\n        return (value === true ? 1 : 0);\n    if (typeof value === \"number\")\n        return value === 1;\n    if (value instanceof Date)\n        return value.toISOString();\n    return new Date(value);\n}\n/**\n * Create table schema.\n *\n * Supported types are null, string, number, Uint8Array, JSON Object, and JSON\n * Array. Use SqliteDate for dates and SqliteBoolean for booleans.\n *\n * Reserved columns are createdAt, updatedAt, isDeleted. Those columns are added\n * by default.\n *\n * @example\n *   const TodoId = id(\"Todo\");\n *   type TodoId = typeof TodoId.Type;\n *\n *   const TodoTable = table({\n *     id: TodoId,\n *     title: NonEmptyString1000,\n *     isCompleted: S.nullable(SqliteBoolean),\n *   });\n *   type TodoTable = typeof TodoTable.Type;\n */\nexport const table = (fields) => S.Struct(fields).pipe(S.extend(ReservedColumns));\nconst ReservedColumns = S.Struct({\n    createdAt: SqliteDate,\n    updatedAt: SqliteDate,\n    isDeleted: SqliteBoolean,\n});\n/**\n * Create database schema.\n *\n * Tables with a name prefixed with _ are local-only, which means they are not\n * synced. Local-only tables are useful for device-specific or temporal data.\n *\n * @example\n *   const Database = database({\n *     // A local-only table.\n *     _todo: TodoTable,\n *     todo: TodoTable,\n *     todoCategory: TodoCategoryTable,\n *   });\n *   type Database = typeof Database.Type;\n */\nexport const database = S.Struct;\n/**\n * String schema represents a string that is not stringified JSON. Using String\n * schema for strings stored in SQLite is crucial to ensure a stored string is\n * not automatically parsed to a JSON object or array when retrieved. Use String\n * schema for all string-based schemas.\n */\nexport const String = S.String.pipe(S.filter((s) => {\n    if (!maybeJson(s))\n        return true;\n    try {\n        JSON.parse(s);\n    }\n    catch (e) {\n        return true;\n    }\n    return false;\n}, { message: () => \"a string that is not stringified JSON\" }), S.brand(\"String\"));\n/**\n * A string with a maximum length of 1000 characters.\n *\n * @example\n *   import * as S from \"@effect/schema/Schema\";\n *   import { String1000 } from \"@evolu/react\";\n *\n *   S.decode(String1000)(value);\n */\nexport const String1000 = String.pipe(S.maxLength(1000), S.brand(\"String1000\"));\n/**\n * A nonempty string with a maximum length of 1000 characters.\n *\n * @example\n *   import * as S from \"@effect/schema/Schema\";\n *   import { NonEmptyString1000 } from \"@evolu/react\";\n *\n *   S.decode(NonEmptyString1000)(value);\n */\nexport const NonEmptyString1000 = String.pipe(S.minLength(1), S.maxLength(1000), S.brand(\"NonEmptyString1000\"));\n/**\n * A positive integer.\n *\n * @example\n *   import * as S from \"@effect/schema/Schema\";\n *   import { PositiveInt } from \"@evolu/react\";\n *\n *   S.decode(PositiveInt)(value);\n */\nexport const PositiveInt = S.Number.pipe(S.int(), S.positive(), S.brand(\"PositiveInt\"));\n","import * as Context from \"effect/Context\";\nexport const FlushSync = Context.GenericTag(\"FlushSync\");\nexport class AppState extends Context.Tag(\"AppState\")() {\n}\nexport class SyncLock extends Context.Tag(\"SyncLock\")() {\n}\nexport class SyncLockAlreadySyncingError {\n    constructor() {\n        this._tag = \"SyncLockAlreadySyncingError\";\n    }\n}\n","import * as Console from \"effect/Console\";\nimport * as Context from \"effect/Context\";\nimport * as Effect from \"effect/Effect\";\nimport * as Exit from \"effect/Exit\";\nimport * as Layer from \"effect/Layer\";\nimport * as Predicate from \"effect/Predicate\";\nexport const Sqlite = Context.GenericTag(\"Sqlite\");\nexport class SqliteFactory extends Context.Tag(\"SqliteFactory\")() {\n}\nSqliteFactory.Common = Layer.effect(SqliteFactory, Effect.map(SqliteFactory, (platformSqliteFactory) => ({\n    createSqlite: Effect.logTrace(\"SqliteFactory createSqlite\").pipe(Effect.zipRight(platformSqliteFactory.createSqlite), Effect.map((platformSqlite) => ({\n        ...platformSqlite,\n        exec: (query) => platformSqlite.exec(query).pipe(Effect.tap((result) => {\n            maybeParseJson(result.rows);\n        }), Effect.tap((result) => [\"begin\", \"rollback\", \"commit\"].includes(query.sql)\n            ? Effect.logDebug(`SQLiteCommon ${query.sql} transaction`)\n            : Effect.logDebug([\"SQLiteCommon exec\", query, result]))),\n        transaction: (mode) => (effect) => {\n            // Shared is for readonly queries.\n            if (mode === \"shared\")\n                return platformSqlite.transaction(mode)(effect);\n            return Effect.flatMap(Sqlite, (sqlite) => Effect.acquireUseRelease(sqlite.exec({ sql: \"begin\" }), () => effect, (_, exit) => Exit.isFailure(exit)\n                ? sqlite.exec({ sql: \"rollback\" })\n                : sqlite.exec({ sql: \"commit\" }))).pipe(platformSqlite.transaction(mode));\n        },\n    }))),\n})));\nexport const isJsonObjectOrArray = (value) => value !== null && typeof value === \"object\" && !Predicate.isUint8Array(value);\nexport const valuesToSqliteValues = (values) => values.map((value) => isJsonObjectOrArray(value) ? JSON.stringify(value) : value);\n/** This function mutates for better performance. */\nexport const maybeParseJson = (rows) => {\n    parseArray(rows);\n};\nconst parseArray = (a) => {\n    for (let i = 0; i < a.length; ++i)\n        a[i] = parse(a[i]);\n    return a;\n};\nconst parse = (o) => {\n    if (Predicate.isString(o))\n        return parseString(o);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    if (Array.isArray(o))\n        return parseArray(o);\n    if (typeof o === \"object\" && o !== null && !Predicate.isUint8Array(o))\n        return parseObject(o);\n    return o;\n};\nconst parseString = (s) => {\n    if (maybeJson(s))\n        try {\n            return parse(JSON.parse(s));\n        }\n        catch (err) {\n            // Nothing to do.\n        }\n    return s;\n};\nexport const maybeJson = (value) => value.match(/^[[{]/) != null;\nconst parseObject = (o) => {\n    for (const key in o)\n        o[key] = parse(o[key]);\n    return o;\n};\n/** This is good enough detection because SQL strings in Evolu are predictable. */\nconst isSqlMutationRegEx = new RegExp(`\\\\b(${[\n    \"alter\",\n    \"create\",\n    \"delete\",\n    \"drop\",\n    \"insert\",\n    \"replace\",\n    \"update\",\n].join(\"|\")})\\\\b`);\nexport const isSqlMutation = (sql) => isSqlMutationRegEx.test(sql);\nexport const maybeLogSqliteQueryExecutionTime = (query) => (effect) => {\n    if (!query.options?.logQueryExecutionTime)\n        return effect;\n    return Effect.Do.pipe(Effect.let(\"start\", () => performance.now()), Effect.bind(\"result\", () => effect), Effect.let(\"elapsed\", ({ start }) => performance.now() - start), Effect.tap(({ elapsed }) => Console.log(`QueryExecutionTime: ${elapsed}ms`, query)), Effect.map(({ result }) => result));\n};\nexport const drawSqliteQueryPlan = (rows) => rows\n    .map((row) => {\n    let parentId = row.parent;\n    let indent = 0;\n    do {\n        const parent = rows.find((r) => r.id === parentId);\n        if (!parent)\n            break;\n        parentId = parent.parent;\n        indent++;\n        // eslint-disable-next-line no-constant-condition\n    } while (true);\n    return `${\"  \".repeat(indent)}${row.detail}`;\n})\n    .join(\"\\n\");\n","import * as Effect from \"effect/Effect\";\nexport const makeStore = (initialState) => Effect.sync(() => {\n    const listeners = new Set();\n    let currentState = initialState;\n    const store = {\n        subscribe(listener) {\n            listeners.add(listener);\n            return () => {\n                listeners.delete(listener);\n            };\n        },\n        getState() {\n            return currentState;\n        },\n        setState: (state) => Effect.sync(() => {\n            if (state === currentState)\n                return;\n            currentState = state;\n            listeners.forEach((listener) => listener());\n        }),\n    };\n    return store;\n});\n","/**\n * @since 2.0.0\n */\nimport type * as Context from \"./Context.js\"\nimport type { Effect } from \"./Effect.js\"\nimport * as internal from \"./internal/console.js\"\nimport * as defaultConsole from \"./internal/defaultServices/console.js\"\nimport type * as Layer from \"./Layer.js\"\nimport type { Scope } from \"./Scope.js\"\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const TypeId: unique symbol = defaultConsole.TypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Console {\n  readonly [TypeId]: TypeId\n  assert(condition: boolean, ...args: ReadonlyArray<any>): Effect<void>\n  readonly clear: Effect<void>\n  count(label?: string): Effect<void>\n  countReset(label?: string): Effect<void>\n  debug(...args: ReadonlyArray<any>): Effect<void>\n  dir(item: any, options?: any): Effect<void>\n  dirxml(...args: ReadonlyArray<any>): Effect<void>\n  error(...args: ReadonlyArray<any>): Effect<void>\n  group(options?: {\n    readonly label?: string | undefined\n    readonly collapsed?: boolean | undefined\n  }): Effect<void>\n  readonly groupEnd: Effect<void>\n  info(...args: ReadonlyArray<any>): Effect<void>\n  log(...args: ReadonlyArray<any>): Effect<void>\n  table(tabularData: any, properties?: ReadonlyArray<string>): Effect<void>\n  time(label?: string): Effect<void>\n  timeEnd(label?: string): Effect<void>\n  timeLog(label?: string, ...args: ReadonlyArray<any>): Effect<void>\n  trace(...args: ReadonlyArray<any>): Effect<void>\n  warn(...args: ReadonlyArray<any>): Effect<void>\n  readonly unsafe: UnsafeConsole\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface UnsafeConsole {\n  assert(condition: boolean, ...args: ReadonlyArray<any>): void\n  clear(): void\n  count(label?: string): void\n  countReset(label?: string): void\n  debug(...args: ReadonlyArray<any>): void\n  dir(item: any, options?: any): void\n  dirxml(...args: ReadonlyArray<any>): void\n  error(...args: ReadonlyArray<any>): void\n  group(...args: ReadonlyArray<any>): void\n  groupCollapsed(...args: ReadonlyArray<any>): void\n  groupEnd(): void\n  info(...args: ReadonlyArray<any>): void\n  log(...args: ReadonlyArray<any>): void\n  table(tabularData: any, properties?: ReadonlyArray<string>): void\n  time(label?: string): void\n  timeEnd(label?: string): void\n  timeLog(label?: string, ...args: ReadonlyArray<any>): void\n  trace(...args: ReadonlyArray<any>): void\n  warn(...args: ReadonlyArray<any>): void\n}\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const Console: Context.Tag<Console, Console> = defaultConsole.consoleTag\n\n/**\n * @since 2.0.0\n * @category default services\n */\nexport const withConsole: {\n  <C extends Console>(console: C): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R, C extends Console>(effect: Effect<A, E, R>, console: C): Effect<A, E, R>\n} = internal.withConsole\n\n/**\n * @since 2.0.0\n * @category default services\n */\nexport const setConsole: <A extends Console>(console: A) => Layer.Layer<never> = internal.setConsole\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const consoleWith: <A, E, R>(f: (console: Console) => Effect<A, E, R>) => Effect<A, E, R> = internal.consoleWith\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const assert: (condition: boolean, ...args: ReadonlyArray<any>) => Effect<void> = internal.assert\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const clear: Effect<void> = internal.clear\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const count: (label?: string) => Effect<void> = internal.count\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const countReset: (label?: string) => Effect<void> = internal.countReset\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const debug: (...args: ReadonlyArray<any>) => Effect<void> = internal.debug\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const dir: (item: any, options?: any) => Effect<void> = internal.dir\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const dirxml: (...args: ReadonlyArray<any>) => Effect<void> = internal.dirxml\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const error: (...args: ReadonlyArray<any>) => Effect<void> = internal.error\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const group: (\n  options?: { label?: string | undefined; collapsed?: boolean | undefined } | undefined\n) => Effect<void, never, Scope> = internal.group\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const info: (...args: ReadonlyArray<any>) => Effect<void> = internal.info\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const log: (...args: ReadonlyArray<any>) => Effect<void> = internal.log\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const table: (tabularData: any, properties?: ReadonlyArray<string>) => Effect<void> = internal.table\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const time: (label?: string | undefined) => Effect<void, never, Scope> = internal.time\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const timeLog: (label?: string, ...args: ReadonlyArray<any>) => Effect<void> = internal.timeLog\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const trace: (...args: ReadonlyArray<any>) => Effect<void> = internal.trace\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const warn: (...args: ReadonlyArray<any>) => Effect<void> = internal.warn\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const withGroup: {\n  (options?: {\n    readonly label?: string | undefined\n    readonly collapsed?: boolean | undefined\n  }): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, options?: {\n    readonly label?: string | undefined\n    readonly collapsed?: boolean | undefined\n  }): Effect<A, E, R>\n} = internal.withGroup\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const withTime: {\n  (label?: string): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, label?: string): Effect<A, E, R>\n} = internal.withTime\n","/// <reference types=\"./dynamic-reference-builder.d.ts\" />\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { parseSimpleReferenceExpression } from '../parser/reference-parser.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport class DynamicReferenceBuilder {\n    #dynamicReference;\n    get dynamicReference() {\n        return this.#dynamicReference;\n    }\n    /**\n     * @private\n     *\n     * This needs to be here just so that the typings work. Without this\n     * the generated .d.ts file contains no reference to the type param R\n     * which causes this type to be equal to DynamicReferenceBuilder with\n     * any R.\n     */\n    get refType() {\n        return undefined;\n    }\n    constructor(reference) {\n        this.#dynamicReference = reference;\n    }\n    toOperationNode() {\n        return parseSimpleReferenceExpression(this.#dynamicReference);\n    }\n}\nexport function isDynamicReferenceBuilder(obj) {\n    return (isObject(obj) &&\n        isOperationNodeSource(obj) &&\n        isString(obj.dynamicReference));\n}\n","/// <reference types=\"./unary-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const UnaryOperationNode = freeze({\n    is(node) {\n        return node.kind === 'UnaryOperationNode';\n    },\n    create(operator, operand) {\n        return freeze({\n            kind: 'UnaryOperationNode',\n            operator,\n            operand,\n        });\n    },\n});\n","/// <reference types=\"./unary-operation-parser.d.ts\" />\nimport { OperatorNode } from '../operation-node/operator-node.js';\nimport { UnaryOperationNode } from '../operation-node/unary-operation-node.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nexport function parseExists(operand) {\n    return parseUnaryOperation('exists', operand);\n}\nexport function parseNotExists(operand) {\n    return parseUnaryOperation('not exists', operand);\n}\nexport function parseUnaryOperation(operator, operand) {\n    return UnaryOperationNode.create(OperatorNode.create(operator), parseReferenceExpression(operand));\n}\n","/// <reference types=\"./json-path-leg-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONPathLegNode = freeze({\n    is(node) {\n        return node.kind === 'JSONPathLegNode';\n    },\n    create(type, value) {\n        return freeze({\n            kind: 'JSONPathLegNode',\n            type,\n            value,\n        });\n    },\n});\n","/// <reference types=\"./json-path-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { JSONOperatorChainNode } from '../operation-node/json-operator-chain-node.js';\nimport { JSONPathLegNode, } from '../operation-node/json-path-leg-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nimport { JSONReferenceNode } from '../operation-node/json-reference-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nexport class JSONPathBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /**\n     * Access an element of a JSON array in a specific location.\n     *\n     * Since there's no guarantee an element exists in the given array location, the\n     * resulting type is always nullable. If you're sure the element exists, you\n     * should use {@link SelectQueryBuilder.$assertType} to narrow the type safely.\n     *\n     * See also {@link key} to access properties of JSON objects.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->').at(0).as('primary_nickname')\n     * )\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"nicknames\"->0 as \"primary_nickname\" from \"person\"\n     *```\n     *\n     * Combined with {@link key}:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('experience', '->').at(0).key('role').as('first_role')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"experience\"->0->'role' as \"first_role\" from \"person\"\n     * ```\n     *\n     * You can use `'last'` to access the last element of the array in MySQL:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->$').at('last').as('last_nickname')\n     * )\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * select `nicknames`->'$[last]' as `last_nickname` from `person`\n     * ```\n     *\n     * Or `'#-1'` in SQLite:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->>$').at('#-1').as('last_nickname')\n     * )\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * select \"nicknames\"->>'$[#-1]' as `last_nickname` from `person`\n     * ```\n     */\n    at(index) {\n        return this.#createBuilderWithPathLeg('ArrayLocation', index);\n    }\n    /**\n     * Access a property of a JSON object.\n     *\n     * If a field is optional, the resulting type will be nullable.\n     *\n     * See also {@link at} to access elements of JSON arrays.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('address', '->').key('city').as('city')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"address\"->'city' as \"city\" from \"person\"\n     * ```\n     *\n     * Going deeper:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('profile', '->$').key('website').key('url').as('website_url')\n     * )\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * select `profile`->'$.website.url' as `website_url` from `person`\n     * ```\n     *\n     * Combined with {@link at}:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('profile', '->').key('addresses').at(0).key('city').as('city')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"profile\"->'addresses'->0->'city' as \"city\" from \"person\"\n     * ```\n     */\n    key(key) {\n        return this.#createBuilderWithPathLeg('Member', key);\n    }\n    #createBuilderWithPathLeg(legType, value) {\n        if (JSONReferenceNode.is(this.#node)) {\n            return new TraversedJSONPathBuilder(JSONReferenceNode.cloneWithTraversal(this.#node, JSONPathNode.is(this.#node.traversal)\n                ? JSONPathNode.cloneWithLeg(this.#node.traversal, JSONPathLegNode.create(legType, value))\n                : JSONOperatorChainNode.cloneWithValue(this.#node.traversal, ValueNode.createImmediate(value))));\n        }\n        return new TraversedJSONPathBuilder(JSONPathNode.cloneWithLeg(this.#node, JSONPathLegNode.create(legType, value)));\n    }\n}\nexport class TraversedJSONPathBuilder extends JSONPathBuilder {\n    #node;\n    constructor(node) {\n        super(node);\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedJSONPathBuilder(this, alias);\n    }\n    /**\n     * Change the output type of the json path.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `JSONPathBuilder` with a new output type.\n     */\n    $castTo() {\n        return new JSONPathBuilder(this.#node);\n    }\n    $notNull() {\n        return new JSONPathBuilder(this.#node);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexport class AliasedJSONPathBuilder {\n    #jsonPath;\n    #alias;\n    constructor(jsonPath, alias) {\n        this.#jsonPath = jsonPath;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#jsonPath;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#jsonPath.toOperationNode(), isOperationNodeSource(this.#alias)\n            ? this.#alias.toOperationNode()\n            : IdentifierNode.create(this.#alias));\n    }\n}\n","/// <reference types=\"./tuple-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const TupleNode = freeze({\n    is(node) {\n        return node.kind === 'TupleNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'TupleNode',\n            values: freeze(values),\n        });\n    },\n});\n","/// <reference types=\"./cast-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const CastNode = freeze({\n    is(node) {\n        return node.kind === 'CastNode';\n    },\n    create(expression, dataType) {\n        return freeze({\n            kind: 'CastNode',\n            expression,\n            dataType,\n        });\n    },\n});\n","/// <reference types=\"./expression-builder.d.ts\" />\nimport { createSelectQueryBuilder, } from '../query-builder/select-query-builder.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { parseTableExpressionOrList, parseTable, } from '../parser/table-parser.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { createFunctionModule, } from '../query-builder/function-module.js';\nimport { parseJSONReference, parseReferenceExpression, parseStringReference, } from '../parser/reference-parser.js';\nimport { parseFilterList, parseFilterObject, parseValueBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { ExpressionWrapper } from './expression-wrapper.js';\nimport { OperatorNode, } from '../operation-node/operator-node.js';\nimport { parseUnaryOperation } from '../parser/unary-operation-parser.js';\nimport { parseSafeImmediateValue, parseValueExpression, } from '../parser/value-parser.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { CaseBuilder } from '../query-builder/case-builder.js';\nimport { CaseNode } from '../operation-node/case-node.js';\nimport { isReadonlyArray, isUndefined } from '../util/object-utils.js';\nimport { JSONPathBuilder } from '../query-builder/json-path-builder.js';\nimport { BinaryOperationNode } from '../operation-node/binary-operation-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { TupleNode } from '../operation-node/tuple-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { CastNode } from '../operation-node/cast-node.js';\nexport function createExpressionBuilder(executor = NOOP_QUERY_EXECUTOR) {\n    function binary(lhs, op, rhs) {\n        return new ExpressionWrapper(parseValueBinaryOperation(lhs, op, rhs));\n    }\n    function unary(op, expr) {\n        return new ExpressionWrapper(parseUnaryOperation(op, expr));\n    }\n    const eb = Object.assign(binary, {\n        fn: undefined,\n        eb: undefined,\n        selectFrom(table) {\n            return createSelectQueryBuilder({\n                queryId: createQueryId(),\n                executor,\n                queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(table)),\n            });\n        },\n        case(reference) {\n            return new CaseBuilder({\n                node: CaseNode.create(isUndefined(reference)\n                    ? undefined\n                    : parseReferenceExpression(reference)),\n            });\n        },\n        ref(reference, op) {\n            if (isUndefined(op)) {\n                return new ExpressionWrapper(parseStringReference(reference));\n            }\n            return new JSONPathBuilder(parseJSONReference(reference, op));\n        },\n        jsonPath() {\n            return new JSONPathBuilder(JSONPathNode.create());\n        },\n        table(table) {\n            return new ExpressionWrapper(parseTable(table));\n        },\n        val(value) {\n            return new ExpressionWrapper(parseValueExpression(value));\n        },\n        refTuple(...values) {\n            return new ExpressionWrapper(TupleNode.create(values.map(parseReferenceExpression)));\n        },\n        tuple(...values) {\n            return new ExpressionWrapper(TupleNode.create(values.map(parseValueExpression)));\n        },\n        lit(value) {\n            return new ExpressionWrapper(parseSafeImmediateValue(value));\n        },\n        unary,\n        not(expr) {\n            return unary('not', expr);\n        },\n        exists(expr) {\n            return unary('exists', expr);\n        },\n        neg(expr) {\n            return unary('-', expr);\n        },\n        between(expr, start, end) {\n            return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create('between'), AndNode.create(parseValueExpression(start), parseValueExpression(end))));\n        },\n        betweenSymmetric(expr, start, end) {\n            return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create('between symmetric'), AndNode.create(parseValueExpression(start), parseValueExpression(end))));\n        },\n        and(exprs) {\n            if (isReadonlyArray(exprs)) {\n                return new ExpressionWrapper(parseFilterList(exprs, 'and'));\n            }\n            return new ExpressionWrapper(parseFilterObject(exprs, 'and'));\n        },\n        or(exprs) {\n            if (isReadonlyArray(exprs)) {\n                return new ExpressionWrapper(parseFilterList(exprs, 'or'));\n            }\n            return new ExpressionWrapper(parseFilterObject(exprs, 'or'));\n        },\n        parens(...args) {\n            const node = parseValueBinaryOperationOrExpression(args);\n            if (ParensNode.is(node)) {\n                // No double wrapping.\n                return new ExpressionWrapper(node);\n            }\n            else {\n                return new ExpressionWrapper(ParensNode.create(node));\n            }\n        },\n        cast(expr, dataType) {\n            return new ExpressionWrapper(CastNode.create(parseReferenceExpression(expr), parseDataTypeExpression(dataType)));\n        },\n        withSchema(schema) {\n            return createExpressionBuilder(executor.withPluginAtFront(new WithSchemaPlugin(schema)));\n        },\n    });\n    eb.fn = createFunctionModule();\n    eb.eb = eb;\n    return eb;\n}\nexport function expressionBuilder(_) {\n    return createExpressionBuilder();\n}\n","/// <reference types=\"./expression-wrapper.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { OrNode } from '../operation-node/or-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nexport class ExpressionWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    or(...args) {\n        return new OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    and(...args) {\n        return new AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `ExpressionWrapper` with a new output type.\n     */\n    $castTo() {\n        return new ExpressionWrapper(this.#node);\n    }\n    /**\n     * Omit null from the expression's type.\n     *\n     * This function can be useful in cases where you know an expression can't be\n     * null, but Kysely is unable to infer it.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of `this` with a new output type.\n     */\n    $notNull() {\n        return new ExpressionWrapper(this.#node);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexport class AliasedExpressionWrapper {\n    #expr;\n    #alias;\n    constructor(expr, alias) {\n        this.#expr = expr;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#expr;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#expr.toOperationNode(), isOperationNodeSource(this.#alias)\n            ? this.#alias.toOperationNode()\n            : IdentifierNode.create(this.#alias));\n    }\n}\nexport class OrWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    or(...args) {\n        return new OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `OrWrapper` with a new output type.\n     */\n    $castTo() {\n        return new OrWrapper(this.#node);\n    }\n    toOperationNode() {\n        return ParensNode.create(this.#node);\n    }\n}\nexport class AndWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    and(...args) {\n        return new AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `AndWrapper` with a new output type.\n     */\n    $castTo() {\n        return new AndWrapper(this.#node);\n    }\n    toOperationNode() {\n        return ParensNode.create(this.#node);\n    }\n}\n","/// <reference types=\"./alias-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AliasNode = freeze({\n    is(node) {\n        return node.kind === 'AliasNode';\n    },\n    create(node, alias) {\n        return freeze({\n            kind: 'AliasNode',\n            node,\n            alias,\n        });\n    },\n});\n","/// <reference types=\"./and-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AndNode = freeze({\n    is(node) {\n        return node.kind === 'AndNode';\n    },\n    create(left, right) {\n        return freeze({\n            kind: 'AndNode',\n            left,\n            right,\n        });\n    },\n});\n","/// <reference types=\"./binary-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const BinaryOperationNode = freeze({\n    is(node) {\n        return node.kind === 'BinaryOperationNode';\n    },\n    create(leftOperand, operator, rightOperand) {\n        return freeze({\n            kind: 'BinaryOperationNode',\n            leftOperand,\n            operator,\n            rightOperand,\n        });\n    },\n});\n","/// <reference types=\"./case-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhenNode } from './when-node.js';\n/**\n * @internal\n */\nexport const CaseNode = freeze({\n    is(node) {\n        return node.kind === 'CaseNode';\n    },\n    create(value) {\n        return freeze({\n            kind: 'CaseNode',\n            value,\n        });\n    },\n    cloneWithWhen(caseNode, when) {\n        return freeze({\n            ...caseNode,\n            when: freeze(caseNode.when ? [...caseNode.when, when] : [when]),\n        });\n    },\n    cloneWithThen(caseNode, then) {\n        return freeze({\n            ...caseNode,\n            when: caseNode.when\n                ? freeze([\n                    ...caseNode.when.slice(0, -1),\n                    WhenNode.cloneWithResult(caseNode.when[caseNode.when.length - 1], then),\n                ])\n                : undefined,\n        });\n    },\n    cloneWith(caseNode, props) {\n        return freeze({\n            ...caseNode,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const ColumnNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'ColumnNode',\n            column: IdentifierNode.create(column),\n        });\n    },\n});\n","/// <reference types=\"./using-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const UsingNode = freeze({\n    is(node) {\n        return node.kind === 'UsingNode';\n    },\n    create(tables) {\n        return freeze({\n            kind: 'UsingNode',\n            tables: freeze(tables),\n        });\n    },\n    cloneWithTables(using, tables) {\n        return freeze({\n            ...using,\n            tables: freeze([...using.tables, ...tables]),\n        });\n    },\n});\n","/// <reference types=\"./delete-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\nimport { OrderByNode } from './order-by-node.js';\nimport { UsingNode } from './using-node.js';\n/**\n * @internal\n */\nexport const DeleteQueryNode = freeze({\n    is(node) {\n        return node.kind === 'DeleteQueryNode';\n    },\n    create(fromItems, withNode) {\n        return freeze({\n            kind: 'DeleteQueryNode',\n            from: FromNode.create(fromItems),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithOrderByItems(deleteNode, items) {\n        return freeze({\n            ...deleteNode,\n            orderBy: deleteNode.orderBy\n                ? OrderByNode.cloneWithItems(deleteNode.orderBy, items)\n                : OrderByNode.create(items),\n        });\n    },\n    cloneWithoutOrderBy(deleteNode) {\n        return freeze({\n            ...deleteNode,\n            orderBy: undefined,\n        });\n    },\n    cloneWithLimit(deleteNode, limit) {\n        return freeze({\n            ...deleteNode,\n            limit,\n        });\n    },\n    cloneWithoutLimit(deleteNode) {\n        return freeze({\n            ...deleteNode,\n            limit: undefined,\n        });\n    },\n    cloneWithUsing(deleteNode, tables) {\n        return freeze({\n            ...deleteNode,\n            using: deleteNode.using !== undefined\n                ? UsingNode.cloneWithTables(deleteNode.using, tables)\n                : UsingNode.create(tables),\n        });\n    },\n});\n","/// <reference types=\"./from-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const FromNode = freeze({\n    is(node) {\n        return node.kind === 'FromNode';\n    },\n    create(froms) {\n        return freeze({\n            kind: 'FromNode',\n            froms: freeze(froms),\n        });\n    },\n    cloneWithFroms(from, froms) {\n        return freeze({\n            ...from,\n            froms: freeze([...from.froms, ...froms]),\n        });\n    },\n});\n","/// <reference types=\"./identifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const IdentifierNode = freeze({\n    is(node) {\n        return node.kind === 'IdentifierNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'IdentifierNode',\n            name,\n        });\n    },\n});\n","/// <reference types=\"./insert-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const InsertQueryNode = freeze({\n    is(node) {\n        return node.kind === 'InsertQueryNode';\n    },\n    create(into, withNode, replace) {\n        return freeze({\n            kind: 'InsertQueryNode',\n            into,\n            ...(withNode && { with: withNode }),\n            replace,\n        });\n    },\n    createWithoutInto() {\n        return freeze({\n            kind: 'InsertQueryNode',\n        });\n    },\n    cloneWith(insertQuery, props) {\n        return freeze({\n            ...insertQuery,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./on-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const OnNode = freeze({\n    is(node) {\n        return node.kind === 'OnNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'OnNode',\n            on: filter,\n        });\n    },\n    cloneWithOperation(onNode, operator, operation) {\n        return freeze({\n            ...onNode,\n            on: operator === 'And'\n                ? AndNode.create(onNode.on, operation)\n                : OrNode.create(onNode.on, operation),\n        });\n    },\n});\n","/// <reference types=\"./join-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { OnNode } from './on-node.js';\n/**\n * @internal\n */\nexport const JoinNode = freeze({\n    is(node) {\n        return node.kind === 'JoinNode';\n    },\n    create(joinType, table) {\n        return freeze({\n            kind: 'JoinNode',\n            joinType,\n            table,\n            on: undefined,\n        });\n    },\n    createWithOn(joinType, table, on) {\n        return freeze({\n            kind: 'JoinNode',\n            joinType,\n            table,\n            on: OnNode.create(on),\n        });\n    },\n    cloneWithOn(joinNode, operation) {\n        return freeze({\n            ...joinNode,\n            on: joinNode.on\n                ? OnNode.cloneWithOperation(joinNode.on, 'And', operation)\n                : OnNode.create(operation),\n        });\n    },\n});\n","/// <reference types=\"./json-operator-chain-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONOperatorChainNode = freeze({\n    is(node) {\n        return node.kind === 'JSONOperatorChainNode';\n    },\n    create(operator) {\n        return freeze({\n            kind: 'JSONOperatorChainNode',\n            operator,\n            values: freeze([]),\n        });\n    },\n    cloneWithValue(node, value) {\n        return freeze({\n            ...node,\n            values: freeze([...node.values, value]),\n        });\n    },\n});\n","/// <reference types=\"./json-path-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONPathNode = freeze({\n    is(node) {\n        return node.kind === 'JSONPathNode';\n    },\n    create(inOperator) {\n        return freeze({\n            kind: 'JSONPathNode',\n            inOperator,\n            pathLegs: freeze([]),\n        });\n    },\n    cloneWithLeg(jsonPathNode, pathLeg) {\n        return freeze({\n            ...jsonPathNode,\n            pathLegs: freeze([...jsonPathNode.pathLegs, pathLeg]),\n        });\n    },\n});\n","/// <reference types=\"./json-reference-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONReferenceNode = freeze({\n    is(node) {\n        return node.kind === 'JSONReferenceNode';\n    },\n    create(reference, traversal) {\n        return freeze({\n            kind: 'JSONReferenceNode',\n            reference,\n            traversal,\n        });\n    },\n    cloneWithTraversal(node, traversal) {\n        return freeze({\n            ...node,\n            traversal,\n        });\n    },\n});\n","/// <reference types=\"./limit-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const LimitNode = freeze({\n    is(node) {\n        return node.kind === 'LimitNode';\n    },\n    create(limit) {\n        return freeze({\n            kind: 'LimitNode',\n            limit,\n        });\n    },\n});\n","/// <reference types=\"./merge-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhenNode } from './when-node.js';\n/**\n * @internal\n */\nexport const MergeQueryNode = freeze({\n    is(node) {\n        return node.kind === 'MergeQueryNode';\n    },\n    create(into, withNode) {\n        return freeze({\n            kind: 'MergeQueryNode',\n            into,\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithUsing(mergeNode, using) {\n        return freeze({\n            ...mergeNode,\n            using,\n        });\n    },\n    cloneWithWhen(mergeNode, when) {\n        return freeze({\n            ...mergeNode,\n            whens: mergeNode.whens\n                ? freeze([...mergeNode.whens, when])\n                : freeze([when]),\n        });\n    },\n    cloneWithThen(mergeNode, then) {\n        return freeze({\n            ...mergeNode,\n            whens: mergeNode.whens\n                ? freeze([\n                    ...mergeNode.whens.slice(0, -1),\n                    WhenNode.cloneWithResult(mergeNode.whens[mergeNode.whens.length - 1], then),\n                ])\n                : undefined,\n        });\n    },\n});\n","/// <reference types=\"./operation-node-source.d.ts\" />\nimport { isFunction, isObject } from '../util/object-utils.js';\nexport function isOperationNodeSource(obj) {\n    return isObject(obj) && isFunction(obj.toOperationNode);\n}\n","/// <reference types=\"./operation-node-transformer.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { requireAllProps } from '../util/require-all-props.js';\n/**\n * Transforms an operation node tree into another one.\n *\n * Kysely queries are expressed internally as a tree of objects (operation nodes).\n * `OperationNodeTransformer` takes such a tree as its input and returns a\n * transformed deep copy of it. By default the `OperationNodeTransformer`\n * does nothing. You need to override one or more methods to make it do\n * something.\n *\n * There's a method for each node type. For example if you'd like to convert\n * each identifier (table name, column name, alias etc.) from camelCase to\n * snake_case, you'd do something like this:\n *\n * ```ts\n * class CamelCaseTransformer extends OperationNodeTransformer {\n *   transformIdentifier(node: IdentifierNode): IdentifierNode {\n *     node = super.transformIdentifier(node),\n *\n *     return {\n *       ...node,\n *       name: snakeCase(node.name),\n *     }\n *   }\n * }\n *\n * const transformer = new CamelCaseTransformer()\n * const tree = transformer.transformNode(tree)\n * ```\n */\nexport class OperationNodeTransformer {\n    nodeStack = [];\n    #transformers = freeze({\n        AliasNode: this.transformAlias.bind(this),\n        ColumnNode: this.transformColumn.bind(this),\n        IdentifierNode: this.transformIdentifier.bind(this),\n        SchemableIdentifierNode: this.transformSchemableIdentifier.bind(this),\n        RawNode: this.transformRaw.bind(this),\n        ReferenceNode: this.transformReference.bind(this),\n        SelectQueryNode: this.transformSelectQuery.bind(this),\n        SelectionNode: this.transformSelection.bind(this),\n        TableNode: this.transformTable.bind(this),\n        FromNode: this.transformFrom.bind(this),\n        SelectAllNode: this.transformSelectAll.bind(this),\n        AndNode: this.transformAnd.bind(this),\n        OrNode: this.transformOr.bind(this),\n        ValueNode: this.transformValue.bind(this),\n        ValueListNode: this.transformValueList.bind(this),\n        PrimitiveValueListNode: this.transformPrimitiveValueList.bind(this),\n        ParensNode: this.transformParens.bind(this),\n        JoinNode: this.transformJoin.bind(this),\n        OperatorNode: this.transformOperator.bind(this),\n        WhereNode: this.transformWhere.bind(this),\n        InsertQueryNode: this.transformInsertQuery.bind(this),\n        DeleteQueryNode: this.transformDeleteQuery.bind(this),\n        ReturningNode: this.transformReturning.bind(this),\n        CreateTableNode: this.transformCreateTable.bind(this),\n        AddColumnNode: this.transformAddColumn.bind(this),\n        ColumnDefinitionNode: this.transformColumnDefinition.bind(this),\n        DropTableNode: this.transformDropTable.bind(this),\n        DataTypeNode: this.transformDataType.bind(this),\n        OrderByNode: this.transformOrderBy.bind(this),\n        OrderByItemNode: this.transformOrderByItem.bind(this),\n        GroupByNode: this.transformGroupBy.bind(this),\n        GroupByItemNode: this.transformGroupByItem.bind(this),\n        UpdateQueryNode: this.transformUpdateQuery.bind(this),\n        ColumnUpdateNode: this.transformColumnUpdate.bind(this),\n        LimitNode: this.transformLimit.bind(this),\n        OffsetNode: this.transformOffset.bind(this),\n        OnConflictNode: this.transformOnConflict.bind(this),\n        OnDuplicateKeyNode: this.transformOnDuplicateKey.bind(this),\n        CreateIndexNode: this.transformCreateIndex.bind(this),\n        DropIndexNode: this.transformDropIndex.bind(this),\n        ListNode: this.transformList.bind(this),\n        PrimaryKeyConstraintNode: this.transformPrimaryKeyConstraint.bind(this),\n        UniqueConstraintNode: this.transformUniqueConstraint.bind(this),\n        ReferencesNode: this.transformReferences.bind(this),\n        CheckConstraintNode: this.transformCheckConstraint.bind(this),\n        WithNode: this.transformWith.bind(this),\n        CommonTableExpressionNode: this.transformCommonTableExpression.bind(this),\n        CommonTableExpressionNameNode: this.transformCommonTableExpressionName.bind(this),\n        HavingNode: this.transformHaving.bind(this),\n        CreateSchemaNode: this.transformCreateSchema.bind(this),\n        DropSchemaNode: this.transformDropSchema.bind(this),\n        AlterTableNode: this.transformAlterTable.bind(this),\n        DropColumnNode: this.transformDropColumn.bind(this),\n        RenameColumnNode: this.transformRenameColumn.bind(this),\n        AlterColumnNode: this.transformAlterColumn.bind(this),\n        ModifyColumnNode: this.transformModifyColumn.bind(this),\n        AddConstraintNode: this.transformAddConstraint.bind(this),\n        DropConstraintNode: this.transformDropConstraint.bind(this),\n        ForeignKeyConstraintNode: this.transformForeignKeyConstraint.bind(this),\n        CreateViewNode: this.transformCreateView.bind(this),\n        DropViewNode: this.transformDropView.bind(this),\n        GeneratedNode: this.transformGenerated.bind(this),\n        DefaultValueNode: this.transformDefaultValue.bind(this),\n        OnNode: this.transformOn.bind(this),\n        ValuesNode: this.transformValues.bind(this),\n        SelectModifierNode: this.transformSelectModifier.bind(this),\n        CreateTypeNode: this.transformCreateType.bind(this),\n        DropTypeNode: this.transformDropType.bind(this),\n        ExplainNode: this.transformExplain.bind(this),\n        DefaultInsertValueNode: this.transformDefaultInsertValue.bind(this),\n        AggregateFunctionNode: this.transformAggregateFunction.bind(this),\n        OverNode: this.transformOver.bind(this),\n        PartitionByNode: this.transformPartitionBy.bind(this),\n        PartitionByItemNode: this.transformPartitionByItem.bind(this),\n        SetOperationNode: this.transformSetOperation.bind(this),\n        BinaryOperationNode: this.transformBinaryOperation.bind(this),\n        UnaryOperationNode: this.transformUnaryOperation.bind(this),\n        UsingNode: this.transformUsing.bind(this),\n        FunctionNode: this.transformFunction.bind(this),\n        CaseNode: this.transformCase.bind(this),\n        WhenNode: this.transformWhen.bind(this),\n        JSONReferenceNode: this.transformJSONReference.bind(this),\n        JSONPathNode: this.transformJSONPath.bind(this),\n        JSONPathLegNode: this.transformJSONPathLeg.bind(this),\n        JSONOperatorChainNode: this.transformJSONOperatorChain.bind(this),\n        TupleNode: this.transformTuple.bind(this),\n        MergeQueryNode: this.transformMergeQuery.bind(this),\n        MatchedNode: this.transformMatched.bind(this),\n        AddIndexNode: this.transformAddIndex.bind(this),\n        CastNode: this.transformCast.bind(this),\n        FetchNode: this.transformFetch.bind(this),\n        TopNode: this.transformTop.bind(this),\n        OutputNode: this.transformOutput.bind(this),\n    });\n    transformNode(node) {\n        if (!node) {\n            return node;\n        }\n        this.nodeStack.push(node);\n        const out = this.transformNodeImpl(node);\n        this.nodeStack.pop();\n        return freeze(out);\n    }\n    transformNodeImpl(node) {\n        return this.#transformers[node.kind](node);\n    }\n    transformNodeList(list) {\n        if (!list) {\n            return list;\n        }\n        return freeze(list.map((node) => this.transformNode(node)));\n    }\n    transformSelectQuery(node) {\n        return requireAllProps({\n            kind: 'SelectQueryNode',\n            from: this.transformNode(node.from),\n            selections: this.transformNodeList(node.selections),\n            distinctOn: this.transformNodeList(node.distinctOn),\n            joins: this.transformNodeList(node.joins),\n            groupBy: this.transformNode(node.groupBy),\n            orderBy: this.transformNode(node.orderBy),\n            where: this.transformNode(node.where),\n            frontModifiers: this.transformNodeList(node.frontModifiers),\n            endModifiers: this.transformNodeList(node.endModifiers),\n            limit: this.transformNode(node.limit),\n            offset: this.transformNode(node.offset),\n            with: this.transformNode(node.with),\n            having: this.transformNode(node.having),\n            explain: this.transformNode(node.explain),\n            setOperations: this.transformNodeList(node.setOperations),\n            fetch: this.transformNode(node.fetch),\n            top: this.transformNode(node.top),\n        });\n    }\n    transformSelection(node) {\n        return requireAllProps({\n            kind: 'SelectionNode',\n            selection: this.transformNode(node.selection),\n        });\n    }\n    transformColumn(node) {\n        return requireAllProps({\n            kind: 'ColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformAlias(node) {\n        return requireAllProps({\n            kind: 'AliasNode',\n            node: this.transformNode(node.node),\n            alias: this.transformNode(node.alias),\n        });\n    }\n    transformTable(node) {\n        return requireAllProps({\n            kind: 'TableNode',\n            table: this.transformNode(node.table),\n        });\n    }\n    transformFrom(node) {\n        return requireAllProps({\n            kind: 'FromNode',\n            froms: this.transformNodeList(node.froms),\n        });\n    }\n    transformReference(node) {\n        return requireAllProps({\n            kind: 'ReferenceNode',\n            column: this.transformNode(node.column),\n            table: this.transformNode(node.table),\n        });\n    }\n    transformAnd(node) {\n        return requireAllProps({\n            kind: 'AndNode',\n            left: this.transformNode(node.left),\n            right: this.transformNode(node.right),\n        });\n    }\n    transformOr(node) {\n        return requireAllProps({\n            kind: 'OrNode',\n            left: this.transformNode(node.left),\n            right: this.transformNode(node.right),\n        });\n    }\n    transformValueList(node) {\n        return requireAllProps({\n            kind: 'ValueListNode',\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformParens(node) {\n        return requireAllProps({\n            kind: 'ParensNode',\n            node: this.transformNode(node.node),\n        });\n    }\n    transformJoin(node) {\n        return requireAllProps({\n            kind: 'JoinNode',\n            joinType: node.joinType,\n            table: this.transformNode(node.table),\n            on: this.transformNode(node.on),\n        });\n    }\n    transformRaw(node) {\n        return requireAllProps({\n            kind: 'RawNode',\n            sqlFragments: freeze([...node.sqlFragments]),\n            parameters: this.transformNodeList(node.parameters),\n        });\n    }\n    transformWhere(node) {\n        return requireAllProps({\n            kind: 'WhereNode',\n            where: this.transformNode(node.where),\n        });\n    }\n    transformInsertQuery(node) {\n        return requireAllProps({\n            kind: 'InsertQueryNode',\n            into: this.transformNode(node.into),\n            columns: this.transformNodeList(node.columns),\n            values: this.transformNode(node.values),\n            returning: this.transformNode(node.returning),\n            onConflict: this.transformNode(node.onConflict),\n            onDuplicateKey: this.transformNode(node.onDuplicateKey),\n            with: this.transformNode(node.with),\n            ignore: node.ignore,\n            replace: node.replace,\n            explain: this.transformNode(node.explain),\n            defaultValues: node.defaultValues,\n            top: this.transformNode(node.top),\n            output: this.transformNode(node.output),\n        });\n    }\n    transformValues(node) {\n        return requireAllProps({\n            kind: 'ValuesNode',\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformDeleteQuery(node) {\n        return requireAllProps({\n            kind: 'DeleteQueryNode',\n            from: this.transformNode(node.from),\n            using: this.transformNode(node.using),\n            joins: this.transformNodeList(node.joins),\n            where: this.transformNode(node.where),\n            returning: this.transformNode(node.returning),\n            with: this.transformNode(node.with),\n            orderBy: this.transformNode(node.orderBy),\n            limit: this.transformNode(node.limit),\n            explain: this.transformNode(node.explain),\n            top: this.transformNode(node.top),\n            output: this.transformNode(node.output),\n        });\n    }\n    transformReturning(node) {\n        return requireAllProps({\n            kind: 'ReturningNode',\n            selections: this.transformNodeList(node.selections),\n        });\n    }\n    transformCreateTable(node) {\n        return requireAllProps({\n            kind: 'CreateTableNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n            constraints: this.transformNodeList(node.constraints),\n            temporary: node.temporary,\n            ifNotExists: node.ifNotExists,\n            onCommit: node.onCommit,\n            frontModifiers: this.transformNodeList(node.frontModifiers),\n            endModifiers: this.transformNodeList(node.endModifiers),\n            selectQuery: this.transformNode(node.selectQuery),\n        });\n    }\n    transformColumnDefinition(node) {\n        return requireAllProps({\n            kind: 'ColumnDefinitionNode',\n            column: this.transformNode(node.column),\n            dataType: this.transformNode(node.dataType),\n            references: this.transformNode(node.references),\n            primaryKey: node.primaryKey,\n            autoIncrement: node.autoIncrement,\n            unique: node.unique,\n            notNull: node.notNull,\n            unsigned: node.unsigned,\n            defaultTo: this.transformNode(node.defaultTo),\n            check: this.transformNode(node.check),\n            generated: this.transformNode(node.generated),\n            frontModifiers: this.transformNodeList(node.frontModifiers),\n            endModifiers: this.transformNodeList(node.endModifiers),\n            nullsNotDistinct: node.nullsNotDistinct,\n            identity: node.identity,\n            ifNotExists: node.ifNotExists,\n        });\n    }\n    transformAddColumn(node) {\n        return requireAllProps({\n            kind: 'AddColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformDropTable(node) {\n        return requireAllProps({\n            kind: 'DropTableNode',\n            table: this.transformNode(node.table),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformOrderBy(node) {\n        return requireAllProps({\n            kind: 'OrderByNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformOrderByItem(node) {\n        return requireAllProps({\n            kind: 'OrderByItemNode',\n            orderBy: this.transformNode(node.orderBy),\n            direction: this.transformNode(node.direction),\n        });\n    }\n    transformGroupBy(node) {\n        return requireAllProps({\n            kind: 'GroupByNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformGroupByItem(node) {\n        return requireAllProps({\n            kind: 'GroupByItemNode',\n            groupBy: this.transformNode(node.groupBy),\n        });\n    }\n    transformUpdateQuery(node) {\n        return requireAllProps({\n            kind: 'UpdateQueryNode',\n            table: this.transformNode(node.table),\n            from: this.transformNode(node.from),\n            joins: this.transformNodeList(node.joins),\n            where: this.transformNode(node.where),\n            updates: this.transformNodeList(node.updates),\n            returning: this.transformNode(node.returning),\n            with: this.transformNode(node.with),\n            explain: this.transformNode(node.explain),\n            limit: this.transformNode(node.limit),\n            top: this.transformNode(node.top),\n            output: this.transformNode(node.output),\n        });\n    }\n    transformColumnUpdate(node) {\n        return requireAllProps({\n            kind: 'ColumnUpdateNode',\n            column: this.transformNode(node.column),\n            value: this.transformNode(node.value),\n        });\n    }\n    transformLimit(node) {\n        return requireAllProps({\n            kind: 'LimitNode',\n            limit: this.transformNode(node.limit),\n        });\n    }\n    transformOffset(node) {\n        return requireAllProps({\n            kind: 'OffsetNode',\n            offset: this.transformNode(node.offset),\n        });\n    }\n    transformOnConflict(node) {\n        return requireAllProps({\n            kind: 'OnConflictNode',\n            columns: this.transformNodeList(node.columns),\n            constraint: this.transformNode(node.constraint),\n            indexExpression: this.transformNode(node.indexExpression),\n            indexWhere: this.transformNode(node.indexWhere),\n            updates: this.transformNodeList(node.updates),\n            updateWhere: this.transformNode(node.updateWhere),\n            doNothing: node.doNothing,\n        });\n    }\n    transformOnDuplicateKey(node) {\n        return requireAllProps({\n            kind: 'OnDuplicateKeyNode',\n            updates: this.transformNodeList(node.updates),\n        });\n    }\n    transformCreateIndex(node) {\n        return requireAllProps({\n            kind: 'CreateIndexNode',\n            name: this.transformNode(node.name),\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n            unique: node.unique,\n            using: this.transformNode(node.using),\n            ifNotExists: node.ifNotExists,\n            where: this.transformNode(node.where),\n            nullsNotDistinct: node.nullsNotDistinct,\n        });\n    }\n    transformList(node) {\n        return requireAllProps({\n            kind: 'ListNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformDropIndex(node) {\n        return requireAllProps({\n            kind: 'DropIndexNode',\n            name: this.transformNode(node.name),\n            table: this.transformNode(node.table),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformPrimaryKeyConstraint(node) {\n        return requireAllProps({\n            kind: 'PrimaryKeyConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            name: this.transformNode(node.name),\n        });\n    }\n    transformUniqueConstraint(node) {\n        return requireAllProps({\n            kind: 'UniqueConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            name: this.transformNode(node.name),\n            nullsNotDistinct: node.nullsNotDistinct,\n        });\n    }\n    transformForeignKeyConstraint(node) {\n        return requireAllProps({\n            kind: 'ForeignKeyConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            references: this.transformNode(node.references),\n            name: this.transformNode(node.name),\n            onDelete: node.onDelete,\n            onUpdate: node.onUpdate,\n        });\n    }\n    transformSetOperation(node) {\n        return requireAllProps({\n            kind: 'SetOperationNode',\n            operator: node.operator,\n            expression: this.transformNode(node.expression),\n            all: node.all,\n        });\n    }\n    transformReferences(node) {\n        return requireAllProps({\n            kind: 'ReferencesNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n            onDelete: node.onDelete,\n            onUpdate: node.onUpdate,\n        });\n    }\n    transformCheckConstraint(node) {\n        return requireAllProps({\n            kind: 'CheckConstraintNode',\n            expression: this.transformNode(node.expression),\n            name: this.transformNode(node.name),\n        });\n    }\n    transformWith(node) {\n        return requireAllProps({\n            kind: 'WithNode',\n            expressions: this.transformNodeList(node.expressions),\n            recursive: node.recursive,\n        });\n    }\n    transformCommonTableExpression(node) {\n        return requireAllProps({\n            kind: 'CommonTableExpressionNode',\n            name: this.transformNode(node.name),\n            materialized: node.materialized,\n            expression: this.transformNode(node.expression),\n        });\n    }\n    transformCommonTableExpressionName(node) {\n        return requireAllProps({\n            kind: 'CommonTableExpressionNameNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n        });\n    }\n    transformHaving(node) {\n        return requireAllProps({\n            kind: 'HavingNode',\n            having: this.transformNode(node.having),\n        });\n    }\n    transformCreateSchema(node) {\n        return requireAllProps({\n            kind: 'CreateSchemaNode',\n            schema: this.transformNode(node.schema),\n            ifNotExists: node.ifNotExists,\n        });\n    }\n    transformDropSchema(node) {\n        return requireAllProps({\n            kind: 'DropSchemaNode',\n            schema: this.transformNode(node.schema),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformAlterTable(node) {\n        return requireAllProps({\n            kind: 'AlterTableNode',\n            table: this.transformNode(node.table),\n            renameTo: this.transformNode(node.renameTo),\n            setSchema: this.transformNode(node.setSchema),\n            columnAlterations: this.transformNodeList(node.columnAlterations),\n            addConstraint: this.transformNode(node.addConstraint),\n            dropConstraint: this.transformNode(node.dropConstraint),\n            addIndex: this.transformNode(node.addIndex),\n            dropIndex: this.transformNode(node.dropIndex),\n        });\n    }\n    transformDropColumn(node) {\n        return requireAllProps({\n            kind: 'DropColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformRenameColumn(node) {\n        return requireAllProps({\n            kind: 'RenameColumnNode',\n            column: this.transformNode(node.column),\n            renameTo: this.transformNode(node.renameTo),\n        });\n    }\n    transformAlterColumn(node) {\n        return requireAllProps({\n            kind: 'AlterColumnNode',\n            column: this.transformNode(node.column),\n            dataType: this.transformNode(node.dataType),\n            dataTypeExpression: this.transformNode(node.dataTypeExpression),\n            setDefault: this.transformNode(node.setDefault),\n            dropDefault: node.dropDefault,\n            setNotNull: node.setNotNull,\n            dropNotNull: node.dropNotNull,\n        });\n    }\n    transformModifyColumn(node) {\n        return requireAllProps({\n            kind: 'ModifyColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformAddConstraint(node) {\n        return requireAllProps({\n            kind: 'AddConstraintNode',\n            constraint: this.transformNode(node.constraint),\n        });\n    }\n    transformDropConstraint(node) {\n        return requireAllProps({\n            kind: 'DropConstraintNode',\n            constraintName: this.transformNode(node.constraintName),\n            ifExists: node.ifExists,\n            modifier: node.modifier,\n        });\n    }\n    transformCreateView(node) {\n        return requireAllProps({\n            kind: 'CreateViewNode',\n            name: this.transformNode(node.name),\n            temporary: node.temporary,\n            orReplace: node.orReplace,\n            ifNotExists: node.ifNotExists,\n            materialized: node.materialized,\n            columns: this.transformNodeList(node.columns),\n            as: this.transformNode(node.as),\n        });\n    }\n    transformDropView(node) {\n        return requireAllProps({\n            kind: 'DropViewNode',\n            name: this.transformNode(node.name),\n            ifExists: node.ifExists,\n            materialized: node.materialized,\n            cascade: node.cascade,\n        });\n    }\n    transformGenerated(node) {\n        return requireAllProps({\n            kind: 'GeneratedNode',\n            byDefault: node.byDefault,\n            always: node.always,\n            identity: node.identity,\n            stored: node.stored,\n            expression: this.transformNode(node.expression),\n        });\n    }\n    transformDefaultValue(node) {\n        return requireAllProps({\n            kind: 'DefaultValueNode',\n            defaultValue: this.transformNode(node.defaultValue),\n        });\n    }\n    transformOn(node) {\n        return requireAllProps({\n            kind: 'OnNode',\n            on: this.transformNode(node.on),\n        });\n    }\n    transformSelectModifier(node) {\n        return requireAllProps({\n            kind: 'SelectModifierNode',\n            modifier: node.modifier,\n            rawModifier: this.transformNode(node.rawModifier),\n            of: this.transformNodeList(node.of),\n        });\n    }\n    transformCreateType(node) {\n        return requireAllProps({\n            kind: 'CreateTypeNode',\n            name: this.transformNode(node.name),\n            enum: this.transformNode(node.enum),\n        });\n    }\n    transformDropType(node) {\n        return requireAllProps({\n            kind: 'DropTypeNode',\n            name: this.transformNode(node.name),\n            ifExists: node.ifExists,\n        });\n    }\n    transformExplain(node) {\n        return requireAllProps({\n            kind: 'ExplainNode',\n            format: node.format,\n            options: this.transformNode(node.options),\n        });\n    }\n    transformSchemableIdentifier(node) {\n        return requireAllProps({\n            kind: 'SchemableIdentifierNode',\n            schema: this.transformNode(node.schema),\n            identifier: this.transformNode(node.identifier),\n        });\n    }\n    transformAggregateFunction(node) {\n        return requireAllProps({\n            kind: 'AggregateFunctionNode',\n            aggregated: this.transformNodeList(node.aggregated),\n            distinct: node.distinct,\n            filter: this.transformNode(node.filter),\n            func: node.func,\n            over: this.transformNode(node.over),\n        });\n    }\n    transformOver(node) {\n        return requireAllProps({\n            kind: 'OverNode',\n            orderBy: this.transformNode(node.orderBy),\n            partitionBy: this.transformNode(node.partitionBy),\n        });\n    }\n    transformPartitionBy(node) {\n        return requireAllProps({\n            kind: 'PartitionByNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformPartitionByItem(node) {\n        return requireAllProps({\n            kind: 'PartitionByItemNode',\n            partitionBy: this.transformNode(node.partitionBy),\n        });\n    }\n    transformBinaryOperation(node) {\n        return requireAllProps({\n            kind: 'BinaryOperationNode',\n            leftOperand: this.transformNode(node.leftOperand),\n            operator: this.transformNode(node.operator),\n            rightOperand: this.transformNode(node.rightOperand),\n        });\n    }\n    transformUnaryOperation(node) {\n        return requireAllProps({\n            kind: 'UnaryOperationNode',\n            operator: this.transformNode(node.operator),\n            operand: this.transformNode(node.operand),\n        });\n    }\n    transformUsing(node) {\n        return requireAllProps({\n            kind: 'UsingNode',\n            tables: this.transformNodeList(node.tables),\n        });\n    }\n    transformFunction(node) {\n        return requireAllProps({\n            kind: 'FunctionNode',\n            func: node.func,\n            arguments: this.transformNodeList(node.arguments),\n        });\n    }\n    transformCase(node) {\n        return requireAllProps({\n            kind: 'CaseNode',\n            value: this.transformNode(node.value),\n            when: this.transformNodeList(node.when),\n            else: this.transformNode(node.else),\n            isStatement: node.isStatement,\n        });\n    }\n    transformWhen(node) {\n        return requireAllProps({\n            kind: 'WhenNode',\n            condition: this.transformNode(node.condition),\n            result: this.transformNode(node.result),\n        });\n    }\n    transformJSONReference(node) {\n        return requireAllProps({\n            kind: 'JSONReferenceNode',\n            reference: this.transformNode(node.reference),\n            traversal: this.transformNode(node.traversal),\n        });\n    }\n    transformJSONPath(node) {\n        return requireAllProps({\n            kind: 'JSONPathNode',\n            inOperator: this.transformNode(node.inOperator),\n            pathLegs: this.transformNodeList(node.pathLegs),\n        });\n    }\n    transformJSONPathLeg(node) {\n        return requireAllProps({\n            kind: 'JSONPathLegNode',\n            type: node.type,\n            value: node.value,\n        });\n    }\n    transformJSONOperatorChain(node) {\n        return requireAllProps({\n            kind: 'JSONOperatorChainNode',\n            operator: this.transformNode(node.operator),\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformTuple(node) {\n        return requireAllProps({\n            kind: 'TupleNode',\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformMergeQuery(node) {\n        return requireAllProps({\n            kind: 'MergeQueryNode',\n            into: this.transformNode(node.into),\n            using: this.transformNode(node.using),\n            whens: this.transformNodeList(node.whens),\n            with: this.transformNode(node.with),\n            top: this.transformNode(node.top),\n            output: this.transformNode(node.output),\n        });\n    }\n    transformMatched(node) {\n        return requireAllProps({\n            kind: 'MatchedNode',\n            not: node.not,\n            bySource: node.bySource,\n        });\n    }\n    transformAddIndex(node) {\n        return requireAllProps({\n            kind: 'AddIndexNode',\n            name: this.transformNode(node.name),\n            columns: this.transformNodeList(node.columns),\n            unique: node.unique,\n            using: this.transformNode(node.using),\n            ifNotExists: node.ifNotExists,\n        });\n    }\n    transformCast(node) {\n        return requireAllProps({\n            kind: 'CastNode',\n            expression: this.transformNode(node.expression),\n            dataType: this.transformNode(node.dataType),\n        });\n    }\n    transformFetch(node) {\n        return requireAllProps({\n            kind: 'FetchNode',\n            rowCount: this.transformNode(node.rowCount),\n            modifier: node.modifier,\n        });\n    }\n    transformTop(node) {\n        return requireAllProps({\n            kind: 'TopNode',\n            expression: node.expression,\n            modifiers: node.modifiers,\n        });\n    }\n    transformOutput(node) {\n        return requireAllProps({\n            kind: 'OutputNode',\n            selections: this.transformNodeList(node.selections),\n        });\n    }\n    transformDataType(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformSelectAll(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformIdentifier(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformValue(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformPrimitiveValueList(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformOperator(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformDefaultInsertValue(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n}\n","/// <reference types=\"./operator-node.d.ts\" />\nimport { freeze, isString } from '../util/object-utils.js';\nexport const COMPARISON_OPERATORS = [\n    '=',\n    '==',\n    '!=',\n    '<>',\n    '>',\n    '>=',\n    '<',\n    '<=',\n    'in',\n    'not in',\n    'is',\n    'is not',\n    'like',\n    'not like',\n    'match',\n    'ilike',\n    'not ilike',\n    '@>',\n    '<@',\n    '^@',\n    '&&',\n    '?',\n    '?&',\n    '?|',\n    '!<',\n    '!>',\n    '<=>',\n    '!~',\n    '~',\n    '~*',\n    '!~*',\n    '@@',\n    '@@@',\n    '!!',\n    '<->',\n    'regexp',\n    'is distinct from',\n    'is not distinct from',\n];\nexport const ARITHMETIC_OPERATORS = [\n    '+',\n    '-',\n    '*',\n    '/',\n    '%',\n    '^',\n    '&',\n    '|',\n    '#',\n    '<<',\n    '>>',\n];\nexport const JSON_OPERATORS = ['->', '->>'];\nexport const BINARY_OPERATORS = [\n    ...COMPARISON_OPERATORS,\n    ...ARITHMETIC_OPERATORS,\n    '&&',\n    '||',\n];\nexport const UNARY_FILTER_OPERATORS = ['exists', 'not exists'];\nexport const UNARY_OPERATORS = ['not', '-', ...UNARY_FILTER_OPERATORS];\nexport const OPERATORS = [\n    ...BINARY_OPERATORS,\n    ...JSON_OPERATORS,\n    ...UNARY_OPERATORS,\n    'between',\n    'between symmetric',\n];\n/**\n * @internal\n */\nexport const OperatorNode = freeze({\n    is(node) {\n        return node.kind === 'OperatorNode';\n    },\n    create(operator) {\n        return freeze({\n            kind: 'OperatorNode',\n            operator,\n        });\n    },\n});\nexport function isOperator(op) {\n    return isString(op) && OPERATORS.includes(op);\n}\nexport function isBinaryOperator(op) {\n    return isString(op) && BINARY_OPERATORS.includes(op);\n}\nexport function isComparisonOperator(op) {\n    return isString(op) && COMPARISON_OPERATORS.includes(op);\n}\nexport function isArithmeticOperator(op) {\n    return isString(op) && ARITHMETIC_OPERATORS.includes(op);\n}\nexport function isJSONOperator(op) {\n    return isString(op) && JSON_OPERATORS.includes(op);\n}\n","/// <reference types=\"./or-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrNode = freeze({\n    is(node) {\n        return node.kind === 'OrNode';\n    },\n    create(left, right) {\n        return freeze({\n            kind: 'OrNode',\n            left,\n            right,\n        });\n    },\n});\n","/// <reference types=\"./order-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrderByNode = freeze({\n    is(node) {\n        return node.kind === 'OrderByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'OrderByNode',\n            items: freeze([...items]),\n        });\n    },\n    cloneWithItems(orderBy, items) {\n        return freeze({\n            ...orderBy,\n            items: freeze([...orderBy.items, ...items]),\n        });\n    },\n});\n","/// <reference types=\"./parens-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ParensNode = freeze({\n    is(node) {\n        return node.kind === 'ParensNode';\n    },\n    create(node) {\n        return freeze({\n            kind: 'ParensNode',\n            node,\n        });\n    },\n});\n","/// <reference types=\"./primitive-value-list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PrimitiveValueListNode = freeze({\n    is(node) {\n        return node.kind === 'PrimitiveValueListNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'PrimitiveValueListNode',\n            values: freeze([...values]),\n        });\n    },\n});\n","/// <reference types=\"./returning-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ReturningNode = freeze({\n    is(node) {\n        return node.kind === 'ReturningNode';\n    },\n    create(selections) {\n        return freeze({\n            kind: 'ReturningNode',\n            selections: freeze(selections),\n        });\n    },\n    cloneWithSelections(returning, selections) {\n        return freeze({\n            ...returning,\n            selections: returning.selections\n                ? freeze([...returning.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n});\n","/// <reference types=\"./explain-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ExplainNode = freeze({\n    is(node) {\n        return node.kind === 'ExplainNode';\n    },\n    create(format, options) {\n        return freeze({\n            kind: 'ExplainNode',\n            format,\n            options,\n        });\n    },\n});\n","/// <reference types=\"./output-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OutputNode = freeze({\n    is(node) {\n        return node.kind === 'OutputNode';\n    },\n    create(selections) {\n        return freeze({\n            kind: 'OutputNode',\n            selections: freeze(selections),\n        });\n    },\n    cloneWithSelections(output, selections) {\n        return freeze({\n            ...output,\n            selections: output.selections\n                ? freeze([...output.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n});\n","/// <reference types=\"./query-node.d.ts\" />\nimport { InsertQueryNode } from './insert-query-node.js';\nimport { SelectQueryNode } from './select-query-node.js';\nimport { UpdateQueryNode } from './update-query-node.js';\nimport { DeleteQueryNode } from './delete-query-node.js';\nimport { WhereNode } from './where-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { ReturningNode } from './returning-node.js';\nimport { ExplainNode } from './explain-node.js';\nimport { MergeQueryNode } from './merge-query-node.js';\nimport { OutputNode } from './output-node.js';\n/**\n * @internal\n */\nexport const QueryNode = freeze({\n    is(node) {\n        return (SelectQueryNode.is(node) ||\n            InsertQueryNode.is(node) ||\n            UpdateQueryNode.is(node) ||\n            DeleteQueryNode.is(node) ||\n            MergeQueryNode.is(node));\n    },\n    cloneWithWhere(node, operation) {\n        return freeze({\n            ...node,\n            where: node.where\n                ? WhereNode.cloneWithOperation(node.where, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithJoin(node, join) {\n        return freeze({\n            ...node,\n            joins: node.joins ? freeze([...node.joins, join]) : freeze([join]),\n        });\n    },\n    cloneWithReturning(node, selections) {\n        return freeze({\n            ...node,\n            returning: node.returning\n                ? ReturningNode.cloneWithSelections(node.returning, selections)\n                : ReturningNode.create(selections),\n        });\n    },\n    cloneWithoutReturning(node) {\n        return freeze({\n            ...node,\n            returning: undefined,\n        });\n    },\n    cloneWithoutWhere(node) {\n        return freeze({\n            ...node,\n            where: undefined,\n        });\n    },\n    cloneWithExplain(node, format, options) {\n        return freeze({\n            ...node,\n            explain: ExplainNode.create(format, options?.toOperationNode()),\n        });\n    },\n    cloneWithTop(node, top) {\n        return freeze({\n            ...node,\n            top,\n        });\n    },\n    cloneWithOutput(node, selections) {\n        return freeze({\n            ...node,\n            output: node.output\n                ? OutputNode.cloneWithSelections(node.output, selections)\n                : OutputNode.create(selections),\n        });\n    },\n});\n","/// <reference types=\"./raw-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const RawNode = freeze({\n    is(node) {\n        return node.kind === 'RawNode';\n    },\n    create(sqlFragments, parameters) {\n        return freeze({\n            kind: 'RawNode',\n            sqlFragments: freeze(sqlFragments),\n            parameters: freeze(parameters),\n        });\n    },\n    createWithSql(sql) {\n        return RawNode.create([sql], []);\n    },\n    createWithChild(child) {\n        return RawNode.create(['', ''], [child]);\n    },\n    createWithChildren(children) {\n        return RawNode.create(new Array(children.length + 1).fill(''), children);\n    },\n});\n","/// <reference types=\"./reference-node.d.ts\" />\nimport { SelectAllNode } from './select-all-node.js';\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ReferenceNode = freeze({\n    is(node) {\n        return node.kind === 'ReferenceNode';\n    },\n    create(column, table) {\n        return freeze({\n            kind: 'ReferenceNode',\n            table,\n            column,\n        });\n    },\n    createSelectAll(table) {\n        return freeze({\n            kind: 'ReferenceNode',\n            table,\n            column: SelectAllNode.create(),\n        });\n    },\n});\n","/// <reference types=\"./schemable-identifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const SchemableIdentifierNode = freeze({\n    is(node) {\n        return node.kind === 'SchemableIdentifierNode';\n    },\n    create(identifier) {\n        return freeze({\n            kind: 'SchemableIdentifierNode',\n            identifier: IdentifierNode.create(identifier),\n        });\n    },\n    createWithSchema(schema, identifier) {\n        return freeze({\n            kind: 'SchemableIdentifierNode',\n            schema: IdentifierNode.create(schema),\n            identifier: IdentifierNode.create(identifier),\n        });\n    },\n});\n","/// <reference types=\"./select-all-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SelectAllNode = freeze({\n    is(node) {\n        return node.kind === 'SelectAllNode';\n    },\n    create() {\n        return freeze({\n            kind: 'SelectAllNode',\n        });\n    },\n});\n","/// <reference types=\"./group-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GroupByNode = freeze({\n    is(node) {\n        return node.kind === 'GroupByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'GroupByNode',\n            items: freeze(items),\n        });\n    },\n    cloneWithItems(groupBy, items) {\n        return freeze({\n            ...groupBy,\n            items: freeze([...groupBy.items, ...items]),\n        });\n    },\n});\n","/// <reference types=\"./having-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const HavingNode = freeze({\n    is(node) {\n        return node.kind === 'HavingNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'HavingNode',\n            having: filter,\n        });\n    },\n    cloneWithOperation(havingNode, operator, operation) {\n        return freeze({\n            ...havingNode,\n            having: operator === 'And'\n                ? AndNode.create(havingNode.having, operation)\n                : OrNode.create(havingNode.having, operation),\n        });\n    },\n});\n","/// <reference types=\"./select-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\nimport { GroupByNode } from './group-by-node.js';\nimport { HavingNode } from './having-node.js';\nimport { OrderByNode } from './order-by-node.js';\n/**\n * @internal\n */\nexport const SelectQueryNode = freeze({\n    is(node) {\n        return node.kind === 'SelectQueryNode';\n    },\n    create(withNode) {\n        return freeze({\n            kind: 'SelectQueryNode',\n            ...(withNode && { with: withNode }),\n        });\n    },\n    createFrom(fromItems, withNode) {\n        return freeze({\n            kind: 'SelectQueryNode',\n            from: FromNode.create(fromItems),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithSelections(select, selections) {\n        return freeze({\n            ...select,\n            selections: select.selections\n                ? freeze([...select.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n    cloneWithDistinctOn(select, expressions) {\n        return freeze({\n            ...select,\n            distinctOn: select.distinctOn\n                ? freeze([...select.distinctOn, ...expressions])\n                : freeze(expressions),\n        });\n    },\n    cloneWithFrontModifier(select, modifier) {\n        return freeze({\n            ...select,\n            frontModifiers: select.frontModifiers\n                ? freeze([...select.frontModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWithEndModifier(select, modifier) {\n        return freeze({\n            ...select,\n            endModifiers: select.endModifiers\n                ? freeze([...select.endModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWithOrderByItems(selectNode, items) {\n        return freeze({\n            ...selectNode,\n            orderBy: selectNode.orderBy\n                ? OrderByNode.cloneWithItems(selectNode.orderBy, items)\n                : OrderByNode.create(items),\n        });\n    },\n    cloneWithGroupByItems(selectNode, items) {\n        return freeze({\n            ...selectNode,\n            groupBy: selectNode.groupBy\n                ? GroupByNode.cloneWithItems(selectNode.groupBy, items)\n                : GroupByNode.create(items),\n        });\n    },\n    cloneWithLimit(selectNode, limit) {\n        return freeze({\n            ...selectNode,\n            limit,\n        });\n    },\n    cloneWithOffset(selectNode, offset) {\n        return freeze({\n            ...selectNode,\n            offset,\n        });\n    },\n    cloneWithFetch(selectNode, fetch) {\n        return freeze({\n            ...selectNode,\n            fetch,\n        });\n    },\n    cloneWithHaving(selectNode, operation) {\n        return freeze({\n            ...selectNode,\n            having: selectNode.having\n                ? HavingNode.cloneWithOperation(selectNode.having, 'And', operation)\n                : HavingNode.create(operation),\n        });\n    },\n    cloneWithSetOperations(selectNode, setOperations) {\n        return freeze({\n            ...selectNode,\n            setOperations: selectNode.setOperations\n                ? freeze([...selectNode.setOperations, ...setOperations])\n                : freeze([...setOperations]),\n        });\n    },\n    cloneWithoutSelections(select) {\n        return freeze({\n            ...select,\n            selections: [],\n        });\n    },\n    cloneWithoutLimit(select) {\n        return freeze({\n            ...select,\n            limit: undefined,\n        });\n    },\n    cloneWithoutOffset(select) {\n        return freeze({\n            ...select,\n            offset: undefined,\n        });\n    },\n    cloneWithoutOrderBy(select) {\n        return freeze({\n            ...select,\n            orderBy: undefined,\n        });\n    },\n    cloneWithoutGroupBy(select) {\n        return freeze({\n            ...select,\n            groupBy: undefined,\n        });\n    },\n});\n","/// <reference types=\"./set-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SetOperationNode = freeze({\n    is(node) {\n        return node.kind === 'SetOperationNode';\n    },\n    create(operator, expression, all) {\n        return freeze({\n            kind: 'SetOperationNode',\n            operator,\n            expression,\n            all,\n        });\n    },\n});\n","/// <reference types=\"./table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const TableNode = freeze({\n    is(node) {\n        return node.kind === 'TableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'TableNode',\n            table: SchemableIdentifierNode.create(table),\n        });\n    },\n    createWithSchema(schema, table) {\n        return freeze({\n            kind: 'TableNode',\n            table: SchemableIdentifierNode.createWithSchema(schema, table),\n        });\n    },\n});\n","/// <reference types=\"./update-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\n/**\n * @internal\n */\nexport const UpdateQueryNode = freeze({\n    is(node) {\n        return node.kind === 'UpdateQueryNode';\n    },\n    create(table, withNode) {\n        return freeze({\n            kind: 'UpdateQueryNode',\n            table,\n            ...(withNode && { with: withNode }),\n        });\n    },\n    createWithoutTable() {\n        return freeze({\n            kind: 'UpdateQueryNode',\n        });\n    },\n    cloneWithFromItems(updateQuery, fromItems) {\n        return freeze({\n            ...updateQuery,\n            from: updateQuery.from\n                ? FromNode.cloneWithFroms(updateQuery.from, fromItems)\n                : FromNode.create(fromItems),\n        });\n    },\n    cloneWithUpdates(updateQuery, updates) {\n        return freeze({\n            ...updateQuery,\n            updates: updateQuery.updates\n                ? freeze([...updateQuery.updates, ...updates])\n                : updates,\n        });\n    },\n    cloneWithLimit(updateQuery, limit) {\n        return freeze({\n            ...updateQuery,\n            limit,\n        });\n    },\n});\n","/// <reference types=\"./value-list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValueListNode = freeze({\n    is(node) {\n        return node.kind === 'ValueListNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'ValueListNode',\n            values: freeze(values),\n        });\n    },\n});\n","/// <reference types=\"./value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValueNode = freeze({\n    is(node) {\n        return node.kind === 'ValueNode';\n    },\n    create(value) {\n        return freeze({\n            kind: 'ValueNode',\n            value,\n        });\n    },\n    createImmediate(value) {\n        return freeze({\n            kind: 'ValueNode',\n            value,\n            immediate: true,\n        });\n    },\n});\n","/// <reference types=\"./when-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const WhenNode = freeze({\n    is(node) {\n        return node.kind === 'WhenNode';\n    },\n    create(condition) {\n        return freeze({\n            kind: 'WhenNode',\n            condition,\n        });\n    },\n    cloneWithResult(whenNode, result) {\n        return freeze({\n            ...whenNode,\n            result,\n        });\n    },\n});\n","/// <reference types=\"./where-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const WhereNode = freeze({\n    is(node) {\n        return node.kind === 'WhereNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'WhereNode',\n            where: filter,\n        });\n    },\n    cloneWithOperation(whereNode, operator, operation) {\n        return freeze({\n            ...whereNode,\n            where: operator === 'And'\n                ? AndNode.create(whereNode.where, operation)\n                : OrNode.create(whereNode.where, operation),\n        });\n    },\n});\n","/// <reference types=\"./binary-operation-parser.d.ts\" />\nimport { BinaryOperationNode } from '../operation-node/binary-operation-node.js';\nimport { isBoolean, isNull, isString, isUndefined, } from '../util/object-utils.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { OperatorNode, OPERATORS, } from '../operation-node/operator-node.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nimport { parseValueExpression, parseValueExpressionOrList, } from './value-parser.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { OrNode } from '../operation-node/or-node.js';\nexport function parseValueBinaryOperationOrExpression(args) {\n    if (args.length === 3) {\n        return parseValueBinaryOperation(args[0], args[1], args[2]);\n    }\n    else if (args.length === 1) {\n        return parseValueExpression(args[0]);\n    }\n    throw new Error(`invalid arguments: ${JSON.stringify(args)}`);\n}\nexport function parseValueBinaryOperation(left, operator, right) {\n    if (isIsOperator(operator) && needsIsOperator(right)) {\n        return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), ValueNode.createImmediate(right));\n    }\n    return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseValueExpressionOrList(right));\n}\nexport function parseReferentialBinaryOperation(left, operator, right) {\n    return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseReferenceExpression(right));\n}\nexport function parseFilterObject(obj, combinator) {\n    return parseFilterList(Object.entries(obj)\n        .filter(([, v]) => !isUndefined(v))\n        .map(([k, v]) => parseValueBinaryOperation(k, needsIsOperator(v) ? 'is' : '=', v)), combinator);\n}\nexport function parseFilterList(list, combinator, withParens = true) {\n    const combine = combinator === 'and' ? AndNode.create : OrNode.create;\n    if (list.length === 0) {\n        return BinaryOperationNode.create(ValueNode.createImmediate(1), OperatorNode.create('='), ValueNode.createImmediate(combinator === 'and' ? 1 : 0));\n    }\n    let node = toOperationNode(list[0]);\n    for (let i = 1; i < list.length; ++i) {\n        node = combine(node, toOperationNode(list[i]));\n    }\n    if (list.length > 1 && withParens) {\n        return ParensNode.create(node);\n    }\n    return node;\n}\nfunction isIsOperator(operator) {\n    return operator === 'is' || operator === 'is not';\n}\nfunction needsIsOperator(value) {\n    return isNull(value) || isBoolean(value);\n}\nfunction parseOperator(operator) {\n    if (isString(operator) && OPERATORS.includes(operator)) {\n        return OperatorNode.create(operator);\n    }\n    if (isOperationNodeSource(operator)) {\n        return operator.toOperationNode();\n    }\n    throw new Error(`invalid operator ${JSON.stringify(operator)}`);\n}\nfunction toOperationNode(nodeOrSource) {\n    return isOperationNodeSource(nodeOrSource)\n        ? nodeOrSource.toOperationNode()\n        : nodeOrSource;\n}\n","/// <reference types=\"./data-type-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nconst SIMPLE_COLUMN_DATA_TYPES = [\n    'varchar',\n    'char',\n    'text',\n    'integer',\n    'int2',\n    'int4',\n    'int8',\n    'smallint',\n    'bigint',\n    'boolean',\n    'real',\n    'double precision',\n    'float4',\n    'float8',\n    'decimal',\n    'numeric',\n    'binary',\n    'bytea',\n    'date',\n    'datetime',\n    'time',\n    'timetz',\n    'timestamp',\n    'timestamptz',\n    'serial',\n    'bigserial',\n    'uuid',\n    'json',\n    'jsonb',\n    'blob',\n    'varbinary',\n];\nconst COLUMN_DATA_TYPE_REGEX = [\n    /^varchar\\(\\d+\\)$/,\n    /^char\\(\\d+\\)$/,\n    /^decimal\\(\\d+, \\d+\\)$/,\n    /^numeric\\(\\d+, \\d+\\)$/,\n    /^binary\\(\\d+\\)$/,\n    /^datetime\\(\\d+\\)$/,\n    /^time\\(\\d+\\)$/,\n    /^timetz\\(\\d+\\)$/,\n    /^timestamp\\(\\d+\\)$/,\n    /^timestamptz\\(\\d+\\)$/,\n    /^varbinary\\(\\d+\\)$/,\n];\n/**\n * @internal\n */\nexport const DataTypeNode = freeze({\n    is(node) {\n        return node.kind === 'DataTypeNode';\n    },\n    create(dataType) {\n        return freeze({\n            kind: 'DataTypeNode',\n            dataType,\n        });\n    },\n});\nexport function isColumnDataType(dataType) {\n    if (SIMPLE_COLUMN_DATA_TYPES.includes(dataType)) {\n        return true;\n    }\n    if (COLUMN_DATA_TYPE_REGEX.some((r) => r.test(dataType))) {\n        return true;\n    }\n    return false;\n}\n","/// <reference types=\"./data-type-parser.d.ts\" />\nimport { DataTypeNode, isColumnDataType, } from '../operation-node/data-type-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nexport function parseDataTypeExpression(dataType) {\n    if (isOperationNodeSource(dataType)) {\n        return dataType.toOperationNode();\n    }\n    if (isColumnDataType(dataType)) {\n        return DataTypeNode.create(dataType);\n    }\n    throw new Error(`invalid column data type ${JSON.stringify(dataType)}`);\n}\n","/// <reference types=\"./expression-parser.d.ts\" />\nimport { isAliasedExpression, isExpression, } from '../expression/expression.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nexport function parseExpression(exp) {\n    if (isOperationNodeSource(exp)) {\n        return exp.toOperationNode();\n    }\n    else if (isFunction(exp)) {\n        return exp(expressionBuilder()).toOperationNode();\n    }\n    throw new Error(`invalid expression: ${JSON.stringify(exp)}`);\n}\nexport function parseAliasedExpression(exp) {\n    if (isOperationNodeSource(exp)) {\n        return exp.toOperationNode();\n    }\n    else if (isFunction(exp)) {\n        return exp(expressionBuilder()).toOperationNode();\n    }\n    throw new Error(`invalid aliased expression: ${JSON.stringify(exp)}`);\n}\nexport function isExpressionOrFactory(obj) {\n    return isExpression(obj) || isAliasedExpression(obj) || isFunction(obj);\n}\n","/// <reference types=\"./expression.d.ts\" />\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport function isExpression(obj) {\n    return isObject(obj) && 'expressionType' in obj && isOperationNodeSource(obj);\n}\nexport function isAliasedExpression(obj) {\n    return (isObject(obj) &&\n        'expression' in obj &&\n        isString(obj.alias) &&\n        isOperationNodeSource(obj));\n}\n","/// <reference types=\"./join-parser.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { parseTableExpression, } from './table-parser.js';\nimport { parseReferentialBinaryOperation } from './binary-operation-parser.js';\nimport { createJoinBuilder } from './parse-utils.js';\nexport function parseJoin(joinType, args) {\n    if (args.length === 3) {\n        return parseSingleOnJoin(joinType, args[0], args[1], args[2]);\n    }\n    else if (args.length === 2) {\n        return parseCallbackJoin(joinType, args[0], args[1]);\n    }\n    else {\n        throw new Error('not implemented');\n    }\n}\nfunction parseCallbackJoin(joinType, from, callback) {\n    return callback(createJoinBuilder(joinType, from)).toOperationNode();\n}\nfunction parseSingleOnJoin(joinType, from, lhsColumn, rhsColumn) {\n    return JoinNode.createWithOn(joinType, parseTableExpression(from), parseReferentialBinaryOperation(lhsColumn, '=', rhsColumn));\n}\n","/// <reference types=\"./order-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrderByItemNode = freeze({\n    is(node) {\n        return node.kind === 'OrderByItemNode';\n    },\n    create(orderBy, direction) {\n        return freeze({\n            kind: 'OrderByItemNode',\n            orderBy,\n            direction,\n        });\n    },\n});\n","/// <reference types=\"./order-by-parser.d.ts\" />\nimport { isDynamicReferenceBuilder } from '../dynamic/dynamic-reference-builder.js';\nimport { OrderByItemNode } from '../operation-node/order-by-item-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { isExpressionOrFactory, parseExpression } from './expression-parser.js';\nimport { parseStringReference } from './reference-parser.js';\nexport function isOrderByDirection(thing) {\n    return thing === 'asc' || thing === 'desc';\n}\nexport function parseOrderBy(args) {\n    if (args.length === 2) {\n        return [parseOrderByItem(args[0], args[1])];\n    }\n    if (args.length === 1) {\n        const [orderBy] = args;\n        if (Array.isArray(orderBy)) {\n            return orderBy.map((item) => parseOrderByItem(item));\n        }\n        return [parseOrderByItem(orderBy)];\n    }\n    throw new Error(`Invalid number of arguments at order by! expected 1-2, received ${args.length}`);\n}\nexport function parseOrderByItem(ref, direction) {\n    const parsedRef = parseOrderByExpression(ref);\n    if (OrderByItemNode.is(parsedRef)) {\n        if (direction) {\n            throw new Error('Cannot specify direction twice!');\n        }\n        return parsedRef;\n    }\n    return OrderByItemNode.create(parsedRef, parseOrderByDirectionExpression(direction));\n}\nfunction parseOrderByExpression(expr) {\n    if (isExpressionOrFactory(expr)) {\n        return parseExpression(expr);\n    }\n    if (isDynamicReferenceBuilder(expr)) {\n        return expr.toOperationNode();\n    }\n    const [ref, direction] = expr.split(' ');\n    if (direction) {\n        if (!isOrderByDirection(direction)) {\n            throw new Error(`Invalid order by direction: ${direction}`);\n        }\n        return OrderByItemNode.create(parseStringReference(ref), parseOrderByDirectionExpression(direction));\n    }\n    return parseStringReference(expr);\n}\nfunction parseOrderByDirectionExpression(expr) {\n    if (!expr) {\n        return undefined;\n    }\n    if (expr === 'asc' || expr === 'desc') {\n        return RawNode.createWithSql(expr);\n    }\n    return expr.toOperationNode();\n}\n","/// <reference types=\"./partition-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PartitionByNode = freeze({\n    is(node) {\n        return node.kind === 'PartitionByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'PartitionByNode',\n            items: freeze(items),\n        });\n    },\n    cloneWithItems(partitionBy, items) {\n        return freeze({\n            ...partitionBy,\n            items: freeze([...partitionBy.items, ...items]),\n        });\n    },\n});\n","/// <reference types=\"./over-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { OrderByNode } from './order-by-node.js';\nimport { PartitionByNode } from './partition-by-node.js';\n/**\n * @internal\n */\nexport const OverNode = freeze({\n    is(node) {\n        return node.kind === 'OverNode';\n    },\n    create() {\n        return freeze({\n            kind: 'OverNode',\n        });\n    },\n    cloneWithOrderByItems(overNode, items) {\n        return freeze({\n            ...overNode,\n            orderBy: overNode.orderBy\n                ? OrderByNode.cloneWithItems(overNode.orderBy, items)\n                : OrderByNode.create(items),\n        });\n    },\n    cloneWithPartitionByItems(overNode, items) {\n        return freeze({\n            ...overNode,\n            partitionBy: overNode.partitionBy\n                ? PartitionByNode.cloneWithItems(overNode.partitionBy, items)\n                : PartitionByNode.create(items),\n        });\n    },\n});\n","/// <reference types=\"./join-builder.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class JoinBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    on(...args) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Just like {@link WhereInterface.whereRef} but adds an item to the join's\n     * `on` clause instead.\n     *\n     * See {@link WhereInterface.whereRef} for documentation and examples.\n     */\n    onRef(lhs, op, rhs) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    /**\n     * Adds `on true`.\n     */\n    onTrue() {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, RawNode.createWithSql('true')),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.joinNode;\n    }\n}\npreventAwait(JoinBuilder, \"don't await JoinBuilder instances. They are never executed directly and are always just a part of a query.\");\n","/// <reference types=\"./partition-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PartitionByItemNode = freeze({\n    is(node) {\n        return node.kind === 'PartitionByItemNode';\n    },\n    create(partitionBy) {\n        return freeze({\n            kind: 'PartitionByItemNode',\n            partitionBy,\n        });\n    },\n});\n","/// <reference types=\"./partition-by-parser.d.ts\" />\nimport { PartitionByItemNode } from '../operation-node/partition-by-item-node.js';\nimport { parseReferenceExpressionOrList, } from './reference-parser.js';\nexport function parsePartitionBy(partitionBy) {\n    return parseReferenceExpressionOrList(partitionBy).map(PartitionByItemNode.create);\n}\n","/// <reference types=\"./over-builder.d.ts\" />\nimport { OverNode } from '../operation-node/over-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { parsePartitionBy, } from '../parser/partition-by-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class OverBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds an order by clause item inside the over function.\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over(\n     *       ob => ob.orderBy('first_name', 'asc').orderBy('last_name', 'asc')\n     *     ).as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over(order by \"first_name\" asc, \"last_name\" asc) as \"average_age\"\n     * from \"person\"\n     * ```\n     */\n    orderBy(orderBy, direction) {\n        return new OverBuilder({\n            overNode: OverNode.cloneWithOrderByItems(this.#props.overNode, parseOrderBy([orderBy, direction])),\n        });\n    }\n    partitionBy(partitionBy) {\n        return new OverBuilder({\n            overNode: OverNode.cloneWithPartitionByItems(this.#props.overNode, parsePartitionBy(partitionBy)),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.overNode;\n    }\n}\npreventAwait(OverBuilder, \"don't await OverBuilder instances. They are never executed directly and are always just a part of a query.\");\n","/// <reference types=\"./parse-utils.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { OverNode } from '../operation-node/over-node.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { JoinBuilder } from '../query-builder/join-builder.js';\nimport { OverBuilder } from '../query-builder/over-builder.js';\nimport { createSelectQueryBuilder as newSelectQueryBuilder, } from '../query-builder/select-query-builder.js';\nimport { QueryCreator } from '../query-creator.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { parseTableExpression, parseTableExpressionOrList, } from './table-parser.js';\nexport function createSelectQueryBuilder() {\n    return newSelectQueryBuilder({\n        queryId: createQueryId(),\n        executor: NOOP_QUERY_EXECUTOR,\n        queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList([])),\n    });\n}\nexport function createQueryCreator() {\n    return new QueryCreator({\n        executor: NOOP_QUERY_EXECUTOR,\n    });\n}\nexport function createJoinBuilder(joinType, table) {\n    return new JoinBuilder({\n        joinNode: JoinNode.create(joinType, parseTableExpression(table)),\n    });\n}\nexport function createOverBuilder() {\n    return new OverBuilder({\n        overNode: OverNode.create(),\n    });\n}\n","/// <reference types=\"./reference-parser.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ReferenceNode } from '../operation-node/reference-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { parseExpression, isExpressionOrFactory, } from './expression-parser.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOrderByDirection, parseOrderBy, } from './order-by-parser.js';\nimport { OperatorNode, isJSONOperator, } from '../operation-node/operator-node.js';\nimport { JSONReferenceNode } from '../operation-node/json-reference-node.js';\nimport { JSONOperatorChainNode } from '../operation-node/json-operator-chain-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nexport function parseSimpleReferenceExpression(exp) {\n    if (isString(exp)) {\n        return parseStringReference(exp);\n    }\n    return exp.toOperationNode();\n}\nexport function parseReferenceExpressionOrList(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg.map((it) => parseReferenceExpression(it));\n    }\n    else {\n        return [parseReferenceExpression(arg)];\n    }\n}\nexport function parseReferenceExpression(exp) {\n    if (isExpressionOrFactory(exp)) {\n        return parseExpression(exp);\n    }\n    return parseSimpleReferenceExpression(exp);\n}\nexport function parseJSONReference(ref, op) {\n    const referenceNode = parseStringReference(ref);\n    if (isJSONOperator(op)) {\n        return JSONReferenceNode.create(referenceNode, JSONOperatorChainNode.create(OperatorNode.create(op)));\n    }\n    const opWithoutLastChar = op.slice(0, -1);\n    if (isJSONOperator(opWithoutLastChar)) {\n        return JSONReferenceNode.create(referenceNode, JSONPathNode.create(OperatorNode.create(opWithoutLastChar)));\n    }\n    throw new Error(`Invalid JSON operator: ${op}`);\n}\nexport function parseStringReference(ref) {\n    const COLUMN_SEPARATOR = '.';\n    if (!ref.includes(COLUMN_SEPARATOR)) {\n        return ReferenceNode.create(ColumnNode.create(ref));\n    }\n    const parts = ref.split(COLUMN_SEPARATOR).map(trim);\n    if (parts.length === 3) {\n        return parseStringReferenceWithTableAndSchema(parts);\n    }\n    if (parts.length === 2) {\n        return parseStringReferenceWithTable(parts);\n    }\n    throw new Error(`invalid column reference ${ref}`);\n}\nexport function parseAliasedStringReference(ref) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (ref.includes(ALIAS_SEPARATOR)) {\n        const [columnRef, alias] = ref.split(ALIAS_SEPARATOR).map(trim);\n        return AliasNode.create(parseStringReference(columnRef), IdentifierNode.create(alias));\n    }\n    else {\n        return parseStringReference(ref);\n    }\n}\nexport function parseColumnName(column) {\n    return ColumnNode.create(column);\n}\nexport function parseOrderedColumnName(column) {\n    const ORDER_SEPARATOR = ' ';\n    if (column.includes(ORDER_SEPARATOR)) {\n        const [columnName, order] = column.split(ORDER_SEPARATOR).map(trim);\n        if (!isOrderByDirection(order)) {\n            throw new Error(`invalid order direction \"${order}\" next to \"${columnName}\"`);\n        }\n        return parseOrderBy([columnName, order])[0];\n    }\n    else {\n        return parseColumnName(column);\n    }\n}\nfunction parseStringReferenceWithTableAndSchema(parts) {\n    const [schema, table, column] = parts;\n    return ReferenceNode.create(ColumnNode.create(column), TableNode.createWithSchema(schema, table));\n}\nfunction parseStringReferenceWithTable(parts) {\n    const [table, column] = parts;\n    return ReferenceNode.create(ColumnNode.create(column), TableNode.create(table));\n}\nfunction trim(str) {\n    return str.trim();\n}\n","/// <reference types=\"./selection-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ReferenceNode } from './reference-node.js';\nimport { SelectAllNode } from './select-all-node.js';\n/**\n * @internal\n */\nexport const SelectionNode = freeze({\n    is(node) {\n        return node.kind === 'SelectionNode';\n    },\n    create(selection) {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: selection,\n        });\n    },\n    createSelectAll() {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: SelectAllNode.create(),\n        });\n    },\n    createSelectAllFromTable(table) {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: ReferenceNode.createSelectAll(table),\n        });\n    },\n});\n","/// <reference types=\"./select-parser.d.ts\" />\nimport { isFunction, isReadonlyArray, isString } from '../util/object-utils.js';\nimport { SelectionNode } from '../operation-node/selection-node.js';\nimport { parseAliasedStringReference } from './reference-parser.js';\nimport { isDynamicReferenceBuilder, } from '../dynamic/dynamic-reference-builder.js';\nimport { parseAliasedExpression, } from './expression-parser.js';\nimport { parseTable } from './table-parser.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nexport function parseSelectArg(selection) {\n    if (isFunction(selection)) {\n        return parseSelectArg(selection(expressionBuilder()));\n    }\n    else if (isReadonlyArray(selection)) {\n        return selection.map((it) => parseSelectExpression(it));\n    }\n    else {\n        return [parseSelectExpression(selection)];\n    }\n}\nfunction parseSelectExpression(selection) {\n    if (isString(selection)) {\n        return SelectionNode.create(parseAliasedStringReference(selection));\n    }\n    else if (isDynamicReferenceBuilder(selection)) {\n        return SelectionNode.create(selection.toOperationNode());\n    }\n    else {\n        return SelectionNode.create(parseAliasedExpression(selection));\n    }\n}\nexport function parseSelectAll(table) {\n    if (!table) {\n        return [SelectionNode.createSelectAll()];\n    }\n    else if (Array.isArray(table)) {\n        return table.map(parseSelectAllArg);\n    }\n    else {\n        return [parseSelectAllArg(table)];\n    }\n}\nfunction parseSelectAllArg(table) {\n    if (isString(table)) {\n        return SelectionNode.createSelectAllFromTable(parseTable(table));\n    }\n    throw new Error(`invalid value selectAll expression: ${JSON.stringify(table)}`);\n}\n","/// <reference types=\"./table-parser.d.ts\" />\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { parseAliasedExpression, } from './expression-parser.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nexport function parseTableExpressionOrList(table) {\n    if (isReadonlyArray(table)) {\n        return table.map((it) => parseTableExpression(it));\n    }\n    else {\n        return [parseTableExpression(table)];\n    }\n}\nexport function parseTableExpression(table) {\n    if (isString(table)) {\n        return parseAliasedTable(table);\n    }\n    else {\n        return parseAliasedExpression(table);\n    }\n}\nexport function parseAliasedTable(from) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (from.includes(ALIAS_SEPARATOR)) {\n        const [table, alias] = from.split(ALIAS_SEPARATOR).map(trim);\n        return AliasNode.create(parseTable(table), IdentifierNode.create(alias));\n    }\n    else {\n        return parseTable(from);\n    }\n}\nexport function parseTable(from) {\n    const SCHEMA_SEPARATOR = '.';\n    if (from.includes(SCHEMA_SEPARATOR)) {\n        const [schema, table] = from.split(SCHEMA_SEPARATOR).map(trim);\n        return TableNode.createWithSchema(schema, table);\n    }\n    else {\n        return TableNode.create(from);\n    }\n}\nfunction trim(str) {\n    return str.trim();\n}\n","/// <reference types=\"./top-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const TopNode = freeze({\n    is(node) {\n        return node.kind === 'TopNode';\n    },\n    create(expression, modifiers) {\n        return freeze({\n            kind: 'TopNode',\n            expression,\n            modifiers,\n        });\n    },\n});\n","/// <reference types=\"./top-parser.d.ts\" />\nimport { TopNode } from '../operation-node/top-node.js';\nimport { isBigInt, isNumber, isUndefined } from '../util/object-utils.js';\nexport function parseTop(expression, modifiers) {\n    if (!isNumber(expression) && !isBigInt(expression)) {\n        throw new Error(`Invalid top expression: ${expression}`);\n    }\n    if (!isUndefined(modifiers) && !isTopModifiers(modifiers)) {\n        throw new Error(`Invalid top modifiers: ${modifiers}`);\n    }\n    return TopNode.create(expression, modifiers);\n}\nfunction isTopModifiers(modifiers) {\n    return (modifiers === 'percent' ||\n        modifiers === 'with ties' ||\n        modifiers === 'percent with ties');\n}\n","/// <reference types=\"./value-parser.d.ts\" />\nimport { PrimitiveValueListNode } from '../operation-node/primitive-value-list-node.js';\nimport { ValueListNode } from '../operation-node/value-list-node.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { isBoolean, isNull, isNumber, isReadonlyArray, } from '../util/object-utils.js';\nimport { parseExpression, isExpressionOrFactory, } from './expression-parser.js';\nexport function parseValueExpressionOrList(arg) {\n    if (isReadonlyArray(arg)) {\n        return parseValueExpressionList(arg);\n    }\n    return parseValueExpression(arg);\n}\nexport function parseValueExpression(exp) {\n    if (isExpressionOrFactory(exp)) {\n        return parseExpression(exp);\n    }\n    return ValueNode.create(exp);\n}\nexport function isSafeImmediateValue(value) {\n    return isNumber(value) || isBoolean(value) || isNull(value);\n}\nexport function parseSafeImmediateValue(value) {\n    if (!isSafeImmediateValue(value)) {\n        throw new Error(`unsafe immediate value ${JSON.stringify(value)}`);\n    }\n    return ValueNode.createImmediate(value);\n}\nfunction parseValueExpressionList(arg) {\n    if (arg.some(isExpressionOrFactory)) {\n        return ValueListNode.create(arg.map((it) => parseValueExpression(it)));\n    }\n    return PrimitiveValueListNode.create(arg);\n}\n","/// <reference types=\"./with-schema-transformer.d.ts\" />\nimport { AliasNode } from '../../operation-node/alias-node.js';\nimport { IdentifierNode } from '../../operation-node/identifier-node.js';\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\nimport { SchemableIdentifierNode } from '../../operation-node/schemable-identifier-node.js';\nimport { TableNode } from '../../operation-node/table-node.js';\nimport { freeze } from '../../util/object-utils.js';\n// This object exist only so that we get a type error when a new RootOperationNode\n// is added. If you get a type error here, make sure to add the new root node and\n// handle it correctly in the transformer.\n//\n// DO NOT REFACTOR THIS EVEN IF IT SEEMS USELESS TO YOU!\nconst ROOT_OPERATION_NODES = freeze({\n    AlterTableNode: true,\n    CreateIndexNode: true,\n    CreateSchemaNode: true,\n    CreateTableNode: true,\n    CreateTypeNode: true,\n    CreateViewNode: true,\n    DeleteQueryNode: true,\n    DropIndexNode: true,\n    DropSchemaNode: true,\n    DropTableNode: true,\n    DropTypeNode: true,\n    DropViewNode: true,\n    InsertQueryNode: true,\n    RawNode: true,\n    SelectQueryNode: true,\n    UpdateQueryNode: true,\n    MergeQueryNode: true,\n});\nexport class WithSchemaTransformer extends OperationNodeTransformer {\n    #schema;\n    #schemableIds = new Set();\n    #ctes = new Set();\n    constructor(schema) {\n        super();\n        this.#schema = schema;\n    }\n    transformNodeImpl(node) {\n        if (!this.#isRootOperationNode(node)) {\n            return super.transformNodeImpl(node);\n        }\n        const ctes = this.#collectCTEs(node);\n        for (const cte of ctes) {\n            this.#ctes.add(cte);\n        }\n        const tables = this.#collectSchemableIds(node);\n        for (const table of tables) {\n            this.#schemableIds.add(table);\n        }\n        const transformed = super.transformNodeImpl(node);\n        for (const table of tables) {\n            this.#schemableIds.delete(table);\n        }\n        for (const cte of ctes) {\n            this.#ctes.delete(cte);\n        }\n        return transformed;\n    }\n    transformSchemableIdentifier(node) {\n        const transformed = super.transformSchemableIdentifier(node);\n        if (transformed.schema || !this.#schemableIds.has(node.identifier.name)) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            schema: IdentifierNode.create(this.#schema),\n        };\n    }\n    transformReferences(node) {\n        const transformed = super.transformReferences(node);\n        if (transformed.table.table.schema) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            table: TableNode.createWithSchema(this.#schema, transformed.table.table.identifier.name),\n        };\n    }\n    #isRootOperationNode(node) {\n        return node.kind in ROOT_OPERATION_NODES;\n    }\n    #collectSchemableIds(node) {\n        const schemableIds = new Set();\n        if ('name' in node && node.name && SchemableIdentifierNode.is(node.name)) {\n            this.#collectSchemableId(node.name, schemableIds);\n        }\n        if ('from' in node && node.from) {\n            for (const from of node.from.froms) {\n                this.#collectSchemableIdsFromTableExpr(from, schemableIds);\n            }\n        }\n        if ('into' in node && node.into) {\n            this.#collectSchemableIdsFromTableExpr(node.into, schemableIds);\n        }\n        if ('table' in node && node.table) {\n            this.#collectSchemableIdsFromTableExpr(node.table, schemableIds);\n        }\n        if ('joins' in node && node.joins) {\n            for (const join of node.joins) {\n                this.#collectSchemableIdsFromTableExpr(join.table, schemableIds);\n            }\n        }\n        if ('using' in node && node.using) {\n            this.#collectSchemableIdsFromTableExpr(node.using, schemableIds);\n        }\n        return schemableIds;\n    }\n    #collectCTEs(node) {\n        const ctes = new Set();\n        if ('with' in node && node.with) {\n            this.#collectCTEIds(node.with, ctes);\n        }\n        return ctes;\n    }\n    #collectSchemableIdsFromTableExpr(node, schemableIds) {\n        const table = TableNode.is(node)\n            ? node\n            : AliasNode.is(node) && TableNode.is(node.node)\n                ? node.node\n                : null;\n        if (table) {\n            this.#collectSchemableId(table.table, schemableIds);\n        }\n    }\n    #collectSchemableId(node, schemableIds) {\n        const id = node.identifier.name;\n        if (!this.#schemableIds.has(id) && !this.#ctes.has(id)) {\n            schemableIds.add(id);\n        }\n    }\n    #collectCTEIds(node, ctes) {\n        for (const expr of node.expressions) {\n            const cteId = expr.name.table.table.identifier.name;\n            if (!this.#ctes.has(cteId)) {\n                ctes.add(cteId);\n            }\n        }\n    }\n}\n","/// <reference types=\"./with-schema-plugin.d.ts\" />\nimport { WithSchemaTransformer } from './with-schema-transformer.js';\nexport class WithSchemaPlugin {\n    #transformer;\n    constructor(schema) {\n        this.#transformer = new WithSchemaTransformer(schema);\n    }\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node);\n    }\n    async transformResult(args) {\n        return args.result;\n    }\n}\n","/// <reference types=\"./case-builder.d.ts\" />\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nimport { freeze } from '../util/object-utils.js';\nimport { CaseNode } from '../operation-node/case-node.js';\nimport { WhenNode } from '../operation-node/when-node.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { isSafeImmediateValue, parseSafeImmediateValue, parseValueExpression, } from '../parser/value-parser.js';\nexport class CaseBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    when(...args) {\n        return new CaseThenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithWhen(this.#props.node, WhenNode.create(parseValueBinaryOperationOrExpression(args))),\n        });\n    }\n}\nexport class CaseThenBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    then(valueExpression) {\n        return new CaseWhenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithThen(this.#props.node, isSafeImmediateValue(valueExpression)\n                ? parseSafeImmediateValue(valueExpression)\n                : parseValueExpression(valueExpression)),\n        });\n    }\n}\nexport class CaseWhenBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    when(...args) {\n        return new CaseThenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithWhen(this.#props.node, WhenNode.create(parseValueBinaryOperationOrExpression(args))),\n        });\n    }\n    else(valueExpression) {\n        return new CaseEndBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWith(this.#props.node, {\n                else: isSafeImmediateValue(valueExpression)\n                    ? parseSafeImmediateValue(valueExpression)\n                    : parseValueExpression(valueExpression),\n            }),\n        });\n    }\n    end() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: false }));\n    }\n    endCase() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: true }));\n    }\n}\nexport class CaseEndBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    end() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: false }));\n    }\n    endCase() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: true }));\n    }\n}\n","/// <reference types=\"./aggregate-function-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhereNode } from './where-node.js';\n/**\n * @internal\n */\nexport const AggregateFunctionNode = freeze({\n    is(node) {\n        return node.kind === 'AggregateFunctionNode';\n    },\n    create(aggregateFunction, aggregated = []) {\n        return freeze({\n            kind: 'AggregateFunctionNode',\n            func: aggregateFunction,\n            aggregated,\n        });\n    },\n    cloneWithDistinct(aggregateFunctionNode) {\n        return freeze({\n            ...aggregateFunctionNode,\n            distinct: true,\n        });\n    },\n    cloneWithFilter(aggregateFunctionNode, filter) {\n        return freeze({\n            ...aggregateFunctionNode,\n            filter: aggregateFunctionNode.filter\n                ? WhereNode.cloneWithOperation(aggregateFunctionNode.filter, 'And', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithOrFilter(aggregateFunctionNode, filter) {\n        return freeze({\n            ...aggregateFunctionNode,\n            filter: aggregateFunctionNode.filter\n                ? WhereNode.cloneWithOperation(aggregateFunctionNode.filter, 'Or', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithOver(aggregateFunctionNode, over) {\n        return freeze({\n            ...aggregateFunctionNode,\n            over,\n        });\n    },\n});\n","/// <reference types=\"./function-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const FunctionNode = freeze({\n    is(node) {\n        return node.kind === 'FunctionNode';\n    },\n    create(func, args) {\n        return freeze({\n            kind: 'FunctionNode',\n            func,\n            arguments: args,\n        });\n    },\n});\n","/// <reference types=\"./aggregate-function-builder.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AggregateFunctionNode } from '../operation-node/aggregate-function-node.js';\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { createOverBuilder } from '../parser/parse-utils.js';\nimport { parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nexport class AggregateFunctionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    /**\n     * Returns an aliased version of the function.\n     *\n     * In addition to slapping `as \"the_alias\"` to the end of the SQL,\n     * this method also provides strict typing:\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.count<number>('id').as('person_count')\n     *   )\n     *   .executeTakeFirstOrThrow()\n     *\n     * // `person_count: number` field exists in the result type.\n     * console.log(result.person_count)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select count(\"id\") as \"person_count\"\n     * from \"person\"\n     * ```\n     */\n    as(alias) {\n        return new AliasedAggregateFunctionBuilder(this, alias);\n    }\n    /**\n     * Adds a `distinct` clause inside the function.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select((eb) =>\n     *     eb.fn.count<number>('first_name').distinct().as('first_name_count')\n     *   )\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select count(distinct \"first_name\") as \"first_name_count\"\n     * from \"person\"\n     * ```\n     */\n    distinct() {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithDistinct(this.#props.aggregateFunctionNode),\n        });\n    }\n    filterWhere(...args) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Adds a `filter` clause with a nested `where` clause after the function, where\n     * both sides of the operator are references to columns.\n     *\n     * Similar to {@link WhereInterface}'s `whereRef` method.\n     *\n     * ### Examples\n     *\n     * Count people with same first and last names versus general public:\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select((eb) => [\n     *     eb.fn\n     *       .count<number>('id')\n     *       .filterWhereRef('first_name', '=', 'last_name')\n     *       .as('repeat_name_count'),\n     *     eb.fn.count<number>('id').as('total_count'),\n     *   ])\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select\n     *   count(\"id\") filter(where \"first_name\" = \"last_name\") as \"repeat_name_count\",\n     *   count(\"id\") as \"total_count\"\n     * from \"person\"\n     * ```\n     */\n    filterWhereRef(lhs, op, rhs) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    /**\n     * Adds an `over` clause (window functions) after the function.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over().as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over() as \"average_age\"\n     * from \"person\"\n     * ```\n     *\n     * Also supports passing a callback that returns an over builder,\n     * allowing to add partition by and sort by clauses inside over.\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over(\n     *       ob => ob.partitionBy('last_name').orderBy('first_name', 'asc')\n     *     ).as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over(partition by \"last_name\" order by \"first_name\" asc) as \"average_age\"\n     * from \"person\"\n     * ```\n     */\n    over(over) {\n        const builder = createOverBuilder();\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithOver(this.#props.aggregateFunctionNode, (over ? over(builder) : builder).toOperationNode()),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Casts the expression to the given type.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `AggregateFunctionBuilder` with a new output type.\n     */\n    $castTo() {\n        return new AggregateFunctionBuilder(this.#props);\n    }\n    /**\n     * Omit null from the expression's type.\n     *\n     * This function can be useful in cases where you know an expression can't be\n     * null, but Kysely is unable to infer it.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of `this` with a new output type.\n     */\n    $notNull() {\n        return new AggregateFunctionBuilder(this.#props);\n    }\n    toOperationNode() {\n        return this.#props.aggregateFunctionNode;\n    }\n}\npreventAwait(AggregateFunctionBuilder, \"don't await AggregateFunctionBuilder instances. They are never executed directly and are always just a part of a query.\");\n/**\n * {@link AggregateFunctionBuilder} with an alias. The result of calling {@link AggregateFunctionBuilder.as}.\n */\nexport class AliasedAggregateFunctionBuilder {\n    #aggregateFunctionBuilder;\n    #alias;\n    constructor(aggregateFunctionBuilder, alias) {\n        this.#aggregateFunctionBuilder = aggregateFunctionBuilder;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#aggregateFunctionBuilder;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#aggregateFunctionBuilder.toOperationNode(), IdentifierNode.create(this.#alias));\n    }\n}\n","/// <reference types=\"./function-module.d.ts\" />\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nimport { AggregateFunctionNode } from '../operation-node/aggregate-function-node.js';\nimport { FunctionNode } from '../operation-node/function-node.js';\nimport { parseReferenceExpressionOrList, } from '../parser/reference-parser.js';\nimport { parseSelectAll } from '../parser/select-parser.js';\nimport { AggregateFunctionBuilder } from './aggregate-function-builder.js';\nimport { isString } from '../util/object-utils.js';\nimport { parseTable } from '../parser/table-parser.js';\nexport function createFunctionModule() {\n    const fn = (name, args) => {\n        return new ExpressionWrapper(FunctionNode.create(name, parseReferenceExpressionOrList(args ?? [])));\n    };\n    const agg = (name, args) => {\n        return new AggregateFunctionBuilder({\n            aggregateFunctionNode: AggregateFunctionNode.create(name, args ? parseReferenceExpressionOrList(args) : undefined),\n        });\n    };\n    return Object.assign(fn, {\n        agg,\n        avg(column) {\n            return agg('avg', [column]);\n        },\n        coalesce(...values) {\n            return fn('coalesce', values);\n        },\n        count(column) {\n            return agg('count', [column]);\n        },\n        countAll(table) {\n            return new AggregateFunctionBuilder({\n                aggregateFunctionNode: AggregateFunctionNode.create('count', parseSelectAll(table)),\n            });\n        },\n        max(column) {\n            return agg('max', [column]);\n        },\n        min(column) {\n            return agg('min', [column]);\n        },\n        sum(column) {\n            return agg('sum', [column]);\n        },\n        any(column) {\n            return fn('any', [column]);\n        },\n        jsonAgg(table) {\n            return new AggregateFunctionBuilder({\n                aggregateFunctionNode: AggregateFunctionNode.create('json_agg', [\n                    isString(table) ? parseTable(table) : table.toOperationNode(),\n                ]),\n            });\n        },\n        toJson(table) {\n            return new ExpressionWrapper(FunctionNode.create('to_json', [\n                isString(table) ? parseTable(table) : table.toOperationNode(),\n            ]));\n        },\n    });\n}\n","/// <reference types=\"./no-result-error.d.ts\" />\nexport class NoResultError extends Error {\n    /**\n     * The operation node tree of the query that was executed.\n     */\n    node;\n    constructor(node) {\n        super('no result');\n        this.node = node;\n    }\n}\nexport function isNoResultErrorConstructor(fn) {\n    return Object.prototype.hasOwnProperty.call(fn, 'prototype');\n}\n","/// <reference types=\"./select-modifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SelectModifierNode = freeze({\n    is(node) {\n        return node.kind === 'SelectModifierNode';\n    },\n    create(modifier, of) {\n        return freeze({\n            kind: 'SelectModifierNode',\n            modifier,\n            of,\n        });\n    },\n    createWithExpression(modifier) {\n        return freeze({\n            kind: 'SelectModifierNode',\n            rawModifier: modifier,\n        });\n    },\n});\n","/// <reference types=\"./offset-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OffsetNode = freeze({\n    is(node) {\n        return node.kind === 'OffsetNode';\n    },\n    create(offset) {\n        return freeze({\n            kind: 'OffsetNode',\n            offset,\n        });\n    },\n});\n","/// <reference types=\"./group-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GroupByItemNode = freeze({\n    is(node) {\n        return node.kind === 'GroupByItemNode';\n    },\n    create(groupBy) {\n        return freeze({\n            kind: 'GroupByItemNode',\n            groupBy,\n        });\n    },\n});\n","/// <reference types=\"./group-by-parser.d.ts\" />\nimport { GroupByItemNode } from '../operation-node/group-by-item-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { parseReferenceExpressionOrList, } from './reference-parser.js';\nexport function parseGroupBy(groupBy) {\n    groupBy = isFunction(groupBy) ? groupBy(expressionBuilder()) : groupBy;\n    return parseReferenceExpressionOrList(groupBy).map(GroupByItemNode.create);\n}\n","/// <reference types=\"./set-operation-parser.d.ts\" />\nimport { createExpressionBuilder, } from '../expression/expression-builder.js';\nimport { SetOperationNode, } from '../operation-node/set-operation-node.js';\nimport { isFunction, isReadonlyArray } from '../util/object-utils.js';\nimport { parseExpression } from './expression-parser.js';\nexport function parseSetOperations(operator, expression, all) {\n    if (isFunction(expression)) {\n        expression = expression(createExpressionBuilder());\n    }\n    if (!isReadonlyArray(expression)) {\n        expression = [expression];\n    }\n    return expression.map((expr) => SetOperationNode.create(operator, parseExpression(expr), all));\n}\n","/// <reference types=\"./fetch-node.d.ts\" />\nimport { ValueNode } from './value-node.js';\n/**\n * @internal\n */\nexport const FetchNode = {\n    is(node) {\n        return node.kind === 'FetchNode';\n    },\n    create(rowCount, modifier) {\n        return {\n            kind: 'FetchNode',\n            rowCount: ValueNode.create(rowCount),\n            modifier,\n        };\n    },\n};\n","/// <reference types=\"./fetch-parser.d.ts\" />\nimport { FetchNode } from '../operation-node/fetch-node.js';\nimport { isBigInt, isNumber } from '../util/object-utils.js';\nexport function parseFetch(rowCount, modifier) {\n    if (!isNumber(rowCount) && !isBigInt(rowCount)) {\n        throw new Error(`Invalid fetch row count: ${rowCount}`);\n    }\n    if (!isFetchModifier(modifier)) {\n        throw new Error(`Invalid fetch modifier: ${modifier}`);\n    }\n    return FetchNode.create(rowCount, modifier);\n}\nfunction isFetchModifier(value) {\n    return value === 'only' || value === 'with ties';\n}\n","/// <reference types=\"./select-query-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { SelectModifierNode } from '../operation-node/select-modifier-node.js';\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { parseReferenceExpressionOrList, } from '../parser/reference-parser.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { OffsetNode } from '../operation-node/offset-node.js';\nimport { asArray, freeze } from '../util/object-utils.js';\nimport { parseGroupBy } from '../parser/group-by-parser.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { parseSetOperations, } from '../parser/set-operation-parser.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nimport { parseValueExpression, } from '../parser/value-parser.js';\nimport { parseFetch } from '../parser/fetch-parser.js';\nimport { parseTop } from '../parser/top-parser.js';\nclass SelectQueryBuilderImpl {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    get expressionType() {\n        return undefined;\n    }\n    get isSelectQueryBuilder() {\n        return true;\n    }\n    where(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    having(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    havingRef(lhs, op, rhs) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    select(selection) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    distinctOn(selection) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithDistinctOn(this.#props.queryNode, parseReferenceExpressionOrList(selection)),\n        });\n    }\n    modifyFront(modifier) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, SelectModifierNode.createWithExpression(modifier.toOperationNode())),\n        });\n    }\n    modifyEnd(modifier) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.createWithExpression(modifier.toOperationNode())),\n        });\n    }\n    distinct() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, SelectModifierNode.create('Distinct')),\n        });\n    }\n    forUpdate(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForUpdate', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    forShare(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForShare', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    forKeyShare(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForKeyShare', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    forNoKeyUpdate(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForNoKeyUpdate', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    skipLocked() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('SkipLocked')),\n        });\n    }\n    noWait() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('NoWait')),\n        });\n    }\n    selectAll(table) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    innerJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('FullJoin', args)),\n        });\n    }\n    innerJoinLateral(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LateralInnerJoin', args)),\n        });\n    }\n    leftJoinLateral(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LateralLeftJoin', args)),\n        });\n    }\n    orderBy(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy(args)),\n        });\n    }\n    groupBy(groupBy) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithGroupByItems(this.#props.queryNode, parseGroupBy(groupBy)),\n        });\n    }\n    limit(limit) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit))),\n        });\n    }\n    offset(offset) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithOffset(this.#props.queryNode, OffsetNode.create(parseValueExpression(offset))),\n        });\n    }\n    fetch(rowCount, modifier = 'only') {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithFetch(this.#props.queryNode, parseFetch(rowCount, modifier)),\n        });\n    }\n    top(expression, modifiers) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    union(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('union', expression, false)),\n        });\n    }\n    unionAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('union', expression, true)),\n        });\n    }\n    intersect(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('intersect', expression, false)),\n        });\n    }\n    intersectAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('intersect', expression, true)),\n        });\n    }\n    except(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('except', expression, false)),\n        });\n    }\n    exceptAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('except', expression, true)),\n        });\n    }\n    as(alias) {\n        return new AliasedSelectQueryBuilderImpl(this, alias);\n    }\n    clearSelect() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutSelections(this.#props.queryNode),\n        });\n    }\n    clearWhere() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    clearLimit() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutLimit(this.#props.queryNode),\n        });\n    }\n    clearOffset() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutOffset(this.#props.queryNode),\n        });\n    }\n    clearOrderBy() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutOrderBy(this.#props.queryNode),\n        });\n    }\n    clearGroupBy() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutGroupBy(this.#props.queryNode),\n        });\n    }\n    $call(func) {\n        return func(this);\n    }\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n        });\n    }\n    $castTo() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $narrowType() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $assertType() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $asTuple() {\n        return new ExpressionWrapper(this.toOperationNode());\n    }\n    withPlugin(plugin) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        return result.rows;\n    }\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\npreventAwait(SelectQueryBuilderImpl, \"don't await SelectQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\nexport function createSelectQueryBuilder(props) {\n    return new SelectQueryBuilderImpl(props);\n}\n/**\n * {@link SelectQueryBuilder} with an alias. The result of calling {@link SelectQueryBuilder.as}.\n */\nclass AliasedSelectQueryBuilderImpl {\n    #queryBuilder;\n    #alias;\n    constructor(queryBuilder, alias) {\n        this.#queryBuilder = queryBuilder;\n        this.#alias = alias;\n    }\n    get expression() {\n        return this.#queryBuilder;\n    }\n    get alias() {\n        return this.#alias;\n    }\n    get isAliasedSelectQueryBuilder() {\n        return true;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#queryBuilder.toOperationNode(), IdentifierNode.create(this.#alias));\n    }\n}\npreventAwait(AliasedSelectQueryBuilderImpl, \"don't await AliasedSelectQueryBuilder instances directly. AliasedSelectQueryBuilder should never be executed directly since it's always a part of another query.\");\n","/// <reference types=\"./values-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValuesNode = freeze({\n    is(node) {\n        return node.kind === 'ValuesNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'ValuesNode',\n            values: freeze(values),\n        });\n    },\n});\n","/// <reference types=\"./default-insert-value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DefaultInsertValueNode = freeze({\n    is(node) {\n        return node.kind === 'DefaultInsertValueNode';\n    },\n    create() {\n        return freeze({\n            kind: 'DefaultInsertValueNode',\n        });\n    },\n});\n","/// <reference types=\"./insert-values-parser.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { PrimitiveValueListNode } from '../operation-node/primitive-value-list-node.js';\nimport { ValueListNode } from '../operation-node/value-list-node.js';\nimport { freeze, isFunction, isReadonlyArray, isUndefined, } from '../util/object-utils.js';\nimport { parseValueExpression } from './value-parser.js';\nimport { ValuesNode } from '../operation-node/values-node.js';\nimport { isExpressionOrFactory } from './expression-parser.js';\nimport { DefaultInsertValueNode } from '../operation-node/default-insert-value-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nexport function parseInsertExpression(arg) {\n    const objectOrList = isFunction(arg) ? arg(expressionBuilder()) : arg;\n    const list = isReadonlyArray(objectOrList)\n        ? objectOrList\n        : freeze([objectOrList]);\n    return parseInsertColumnsAndValues(list);\n}\nfunction parseInsertColumnsAndValues(rows) {\n    const columns = parseColumnNamesAndIndexes(rows);\n    return [\n        freeze([...columns.keys()].map(ColumnNode.create)),\n        ValuesNode.create(rows.map((row) => parseRowValues(row, columns))),\n    ];\n}\nfunction parseColumnNamesAndIndexes(rows) {\n    const columns = new Map();\n    for (const row of rows) {\n        const cols = Object.keys(row);\n        for (const col of cols) {\n            if (!columns.has(col) && row[col] !== undefined) {\n                columns.set(col, columns.size);\n            }\n        }\n    }\n    return columns;\n}\nfunction parseRowValues(row, columns) {\n    const rowColumns = Object.keys(row);\n    const rowValues = Array.from({\n        length: columns.size,\n    });\n    let hasUndefinedOrComplexColumns = false;\n    for (const col of rowColumns) {\n        const columnIdx = columns.get(col);\n        if (isUndefined(columnIdx)) {\n            continue;\n        }\n        const value = row[col];\n        if (isUndefined(value) || isExpressionOrFactory(value)) {\n            hasUndefinedOrComplexColumns = true;\n        }\n        rowValues[columnIdx] = value;\n    }\n    const hasMissingColumns = rowColumns.length < columns.size;\n    if (hasMissingColumns || hasUndefinedOrComplexColumns) {\n        const defaultValue = DefaultInsertValueNode.create();\n        return ValueListNode.create(rowValues.map((it) => isUndefined(it) ? defaultValue : parseValueExpression(it)));\n    }\n    return PrimitiveValueListNode.create(rowValues);\n}\n","/// <reference types=\"./column-update-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ColumnUpdateNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnUpdateNode';\n    },\n    create(column, value) {\n        return freeze({\n            kind: 'ColumnUpdateNode',\n            column,\n            value,\n        });\n    },\n});\n","/// <reference types=\"./update-set-parser.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ColumnUpdateNode } from '../operation-node/column-update-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { parseValueExpression } from './value-parser.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nexport function parseUpdate(...args) {\n    if (args.length === 2) {\n        return [\n            ColumnUpdateNode.create(parseReferenceExpression(args[0]), parseValueExpression(args[1])),\n        ];\n    }\n    return parseUpdateObjectExpression(args[0]);\n}\nexport function parseUpdateObjectExpression(update) {\n    const updateObj = isFunction(update) ? update(expressionBuilder()) : update;\n    return Object.entries(updateObj)\n        .filter(([_, value]) => value !== undefined)\n        .map(([key, value]) => {\n        return ColumnUpdateNode.create(ColumnNode.create(key), parseValueExpression(value));\n    });\n}\n","/// <reference types=\"./on-duplicate-key-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OnDuplicateKeyNode = freeze({\n    is(node) {\n        return node.kind === 'OnDuplicateKeyNode';\n    },\n    create(updates) {\n        return freeze({\n            kind: 'OnDuplicateKeyNode',\n            updates,\n        });\n    },\n});\n","/// <reference types=\"./insert-result.d.ts\" />\n/**\n * The result of an insert query.\n *\n * If the table has an auto incrementing primary key {@link insertId} will hold\n * the generated id on dialects that support it. For example PostgreSQL doesn't\n * return the id by default and {@link insertId} is undefined. On PostgreSQL you\n * need to use {@link ReturningInterface.returning} or {@link ReturningInterface.returningAll}\n * to get out the inserted id.\n *\n * {@link numInsertedOrUpdatedRows} holds the number of (actually) inserted rows.\n * On MySQL, updated rows are counted twice when using `on duplicate key update`.\n *\n * ### Examples\n *\n * ```ts\n * const result = await db\n *   .insertInto('person')\n *   .values(person)\n *   .executeTakeFirst()\n *\n * console.log(result.insertId)\n * ```\n */\nexport class InsertResult {\n    /**\n     * The auto incrementing primary key of the inserted row.\n     *\n     * This property can be undefined when the query contains an `on conflict`\n     * clause that makes the query succeed even when nothing gets inserted.\n     *\n     * This property is always undefined on dialects like PostgreSQL that\n     * don't return the inserted id by default. On those dialects you need\n     * to use the {@link ReturningInterface.returning | returning} method.\n     */\n    insertId;\n    /**\n     * Affected rows count.\n     */\n    numInsertedOrUpdatedRows;\n    constructor(insertId, numInsertedOrUpdatedRows) {\n        this.insertId = insertId;\n        this.numInsertedOrUpdatedRows = numInsertedOrUpdatedRows;\n    }\n}\n","/// <reference types=\"./on-conflict-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhereNode } from './where-node.js';\n/**\n * @internal\n */\nexport const OnConflictNode = freeze({\n    is(node) {\n        return node.kind === 'OnConflictNode';\n    },\n    create() {\n        return freeze({\n            kind: 'OnConflictNode',\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithIndexWhere(node, operation) {\n        return freeze({\n            ...node,\n            indexWhere: node.indexWhere\n                ? WhereNode.cloneWithOperation(node.indexWhere, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithIndexOrWhere(node, operation) {\n        return freeze({\n            ...node,\n            indexWhere: node.indexWhere\n                ? WhereNode.cloneWithOperation(node.indexWhere, 'Or', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithUpdateWhere(node, operation) {\n        return freeze({\n            ...node,\n            updateWhere: node.updateWhere\n                ? WhereNode.cloneWithOperation(node.updateWhere, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithUpdateOrWhere(node, operation) {\n        return freeze({\n            ...node,\n            updateWhere: node.updateWhere\n                ? WhereNode.cloneWithOperation(node.updateWhere, 'Or', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithoutIndexWhere(node) {\n        return freeze({\n            ...node,\n            indexWhere: undefined,\n        });\n    },\n    cloneWithoutUpdateWhere(node) {\n        return freeze({\n            ...node,\n            updateWhere: undefined,\n        });\n    },\n});\n","/// <reference types=\"./on-conflict-builder.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { OnConflictNode } from '../operation-node/on-conflict-node.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { parseUpdateObjectExpression, } from '../parser/update-set-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class OnConflictBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Specify a single column as the conflict target.\n     *\n     * Also see the {@link columns}, {@link constraint} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    column(column) {\n        const columnNode = ColumnNode.create(column);\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                columns: this.#props.onConflictNode.columns\n                    ? freeze([...this.#props.onConflictNode.columns, columnNode])\n                    : freeze([columnNode]),\n            }),\n        });\n    }\n    /**\n     * Specify a list of columns as the conflict target.\n     *\n     * Also see the {@link column}, {@link constraint} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    columns(columns) {\n        const columnNodes = columns.map(ColumnNode.create);\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                columns: this.#props.onConflictNode.columns\n                    ? freeze([...this.#props.onConflictNode.columns, ...columnNodes])\n                    : freeze(columnNodes),\n            }),\n        });\n    }\n    /**\n     * Specify a specific constraint by name as the conflict target.\n     *\n     * Also see the {@link column}, {@link columns} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    constraint(constraintName) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                constraint: IdentifierNode.create(constraintName),\n            }),\n        });\n    }\n    /**\n     * Specify an expression as the conflict target.\n     *\n     * This can be used if the unique index is an expression index.\n     *\n     * Also see the {@link column}, {@link columns} and {@link constraint}\n     * methods for alternative ways to specify the conflict target.\n     */\n    expression(expression) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                indexExpression: expression.toOperationNode(),\n            }),\n        });\n    }\n    where(...args) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithoutIndexWhere(this.#props.onConflictNode),\n        });\n    }\n    /**\n     * Adds the \"do nothing\" conflict action.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values({ first_name, pic })\n     *   .onConflict((oc) => oc\n     *     .column('pic')\n     *     .doNothing()\n     *   )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"pic\")\n     * values ($1, $2)\n     * on conflict (\"pic\") do nothing\n     * ```\n     */\n    doNothing() {\n        return new OnConflictDoNothingBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                doNothing: true,\n            }),\n        });\n    }\n    /**\n     * Adds the \"do update set\" conflict action.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values({ first_name, pic })\n     *   .onConflict((oc) => oc\n     *     .column('pic')\n     *     .doUpdateSet({ first_name })\n     *   )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"pic\")\n     * values ($1, $2)\n     * on conflict (\"pic\")\n     * do update set \"first_name\" = $3\n     * ```\n     *\n     * In the next example we use the `ref` method to reference\n     * columns of the virtual table `excluded` in a type-safe way\n     * to create an upsert operation:\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .values(person)\n     *   .onConflict((oc) => oc\n     *     .column('id')\n     *     .doUpdateSet((eb) => ({\n     *       first_name: eb.ref('excluded.first_name'),\n     *       last_name: eb.ref('excluded.last_name')\n     *     }))\n     *   )\n     * ```\n     */\n    doUpdateSet(update) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                updates: parseUpdateObjectExpression(update),\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n}\npreventAwait(OnConflictBuilder, \"don't await OnConflictBuilder instances.\");\nexport class OnConflictDoNothingBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.onConflictNode;\n    }\n}\npreventAwait(OnConflictDoNothingBuilder, \"don't await OnConflictDoNothingBuilder instances.\");\nexport class OnConflictUpdateBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Specify a where condition for the update operation.\n     *\n     * See {@link WhereInterface.whereRef} for more info.\n     */\n    whereRef(lhs, op, rhs) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithoutUpdateWhere(this.#props.onConflictNode),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.onConflictNode;\n    }\n}\npreventAwait(OnConflictUpdateBuilder, \"don't await OnConflictUpdateBuilder instances.\");\n","/// <reference types=\"./insert-query-builder.d.ts\" />\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { parseInsertExpression, } from '../parser/insert-values-parser.js';\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { parseUpdateObjectExpression, } from '../parser/update-set-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { OnDuplicateKeyNode } from '../operation-node/on-duplicate-key-node.js';\nimport { InsertResult } from './insert-result.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { parseExpression, } from '../parser/expression-parser.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { OnConflictBuilder, } from './on-conflict-builder.js';\nimport { OnConflictNode } from '../operation-node/on-conflict-node.js';\nimport { parseTop } from '../parser/top-parser.js';\nexport class InsertQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Sets the values to insert for an {@link Kysely.insertInto | insert} query.\n     *\n     * This method takes an object whose keys are column names and values are\n     * values to insert. In addition to the column's type, the values can be\n     * raw {@link sql} snippets or select queries.\n     *\n     * You must provide all fields you haven't explicitly marked as nullable\n     * or optional using {@link Generated} or {@link ColumnType}.\n     *\n     * The return value of an `insert` query is an instance of {@link InsertResult}. The\n     * {@link InsertResult.insertId | insertId} field holds the auto incremented primary\n     * key if the database returned one.\n     *\n     * On PostgreSQL and some other dialects, you need to call `returning` to get\n     * something out of the query.\n     *\n     * Also see the {@link expression} method for inserting the result of a select\n     * query or any other expression.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"insert\", \"Single row\", 10) -->\n     *\n     * Insert a single row:\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston',\n     *     age: 40\n     *   })\n     *   .executeTakeFirst()\n     *\n     * // `insertId` is only available on dialects that\n     * // automatically return the id of the inserted row\n     * // such as MySQL and SQLite. On PostgreSQL, for example,\n     * // you need to add a `returning` clause to the query to\n     * // get anything out. See the \"returning data\" example.\n     * console.log(result.insertId)\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * insert into `person` (`first_name`, `last_name`, `age`) values (?, ?, ?)\n     * ```\n     *\n     * <!-- siteExample(\"insert\", \"Multiple rows\", 20) -->\n     *\n     * On dialects that support it (for example PostgreSQL) you can insert multiple\n     * rows by providing an array. Note that the return value is once again very\n     * dialect-specific. Some databases may only return the id of the *last* inserted\n     * row and some return nothing at all unless you call `returning`.\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values([{\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston',\n     *     age: 40,\n     *   }, {\n     *     first_name: 'Arnold',\n     *     last_name: 'Schwarzenegger',\n     *     age: 70,\n     *   }])\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"age\") values (($1, $2, $3), ($4, $5, $6))\n     * ```\n     *\n     * <!-- siteExample(\"insert\", \"Returning data\", 30) -->\n     *\n     * On supported dialects like PostgreSQL you need to chain `returning` to the query to get\n     * the inserted row's columns (or any other expression) as the return value. `returning`\n     * works just like `select`. Refer to `select` method's examples and documentation for\n     * more info.\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston',\n     *     age: 40,\n     *   })\n     *   .returning(['id', 'first_name as name'])\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"age\") values ($1, $2, $3) returning \"id\", \"first_name\" as \"name\"\n     * ```\n     *\n     * <!-- siteExample(\"insert\", \"Complex values\", 40) -->\n     *\n     * In addition to primitives, the values can also be arbitrary expressions.\n     * You can build the expressions by using a callback and calling the methods\n     * on the expression builder passed to it:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * const ani = \"Ani\"\n     * const ston = \"ston\"\n     *\n     * const result = await db\n     *   .insertInto('person')\n     *   .values(({ ref, selectFrom, fn }) => ({\n     *     first_name: 'Jennifer',\n     *     last_name: sql<string>`>concat(${ani}, ${ston})`,\n     *     middle_name: ref('first_name'),\n     *     age: selectFrom('person')\n     *       .select(fn.avg<number>('age').as('avg_age')),\n     *   }))\n     *   .executeTakeFirst()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\n     *   \"first_name\",\n     *   \"last_name\",\n     *   \"middle_name\",\n     *   \"age\"\n     * )\n     * values (\n     *   $1,\n     *   concat($2, $3),\n     *   \"first_name\",\n     *   (select avg(\"age\") as \"avg_age\" from \"person\")\n     * )\n     * ```\n     *\n     * You can also use the callback version of subqueries or raw expressions:\n     *\n     * ```ts\n     * db.with('jennifer', (db) => db\n     *   .selectFrom('person')\n     *   .where('first_name', '=', 'Jennifer')\n     *   .select(['id', 'first_name', 'gender'])\n     *   .limit(1)\n     * ).insertInto('pet').values((eb) => ({\n     *   owner_id: eb.selectFrom('jennifer').select('id'),\n     *   name: eb.selectFrom('jennifer').select('first_name'),\n     *   species: 'cat',\n     * }))\n     * ```\n     */\n    values(insert) {\n        const [columns, values] = parseInsertExpression(insert);\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                columns,\n                values,\n            }),\n        });\n    }\n    /**\n     * Sets the columns to insert.\n     *\n     * The {@link values} method sets both the columns and the values and this method\n     * is not needed. But if you are using the {@link expression} method, you can use\n     * this method to set the columns to insert.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .columns(['first_name'])\n     *   .expression((eb) => eb.selectFrom('pet').select('pet.name'))\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\")\n     * select \"pet\".\"name\" from \"pet\"\n     * ```\n     */\n    columns(columns) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                columns: freeze(columns.map(ColumnNode.create)),\n            }),\n        });\n    }\n    /**\n     * Insert an arbitrary expression. For example the result of a select query.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"insert\", \"Insert subquery\", 50) -->\n     *\n     * You can create an `INSERT INTO SELECT FROM` query using the `expression` method.\n     * This API doesn't follow our WYSIWYG principles and might be a bit difficult to\n     * remember. The reasons for this design stem from implementation difficulties.\n     *\n     * ```ts\n     * const result = await db.insertInto('person')\n     *   .columns(['first_name', 'last_name', 'age'])\n     *   .expression((eb) => eb\n     *     .selectFrom('pet')\n     *     .select((eb) => [\n     *       'pet.name',\n     *       eb.val('Petson').as('last_name'),\n     *       eb.lit(7).as('age'),\n     *     ])\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"age\")\n     * select \"pet\".\"name\", $1 as \"last_name\", 7 as \"age from \"pet\"\n     * ```\n     */\n    expression(expression) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                values: parseExpression(expression),\n            }),\n        });\n    }\n    /**\n     * Creates an `insert into \"person\" default values` query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .defaultValues()\n     *   .execute()\n     * ```\n     */\n    defaultValues() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                defaultValues: true,\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert ignore into` query.\n     *\n     * If you use the ignore modifier, ignorable errors that occur while executing the\n     * insert statement are ignored. For example, without ignore, a row that duplicates\n     * an existing unique index or primary key value in the table causes a duplicate-key\n     * error and the statement is aborted. With ignore, the row is discarded and no error\n     * occurs.\n     *\n     * This is only supported on some dialects like MySQL. On most dialects you should\n     * use the {@link onConflict} method.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .ignore()\n     *   .values(values)\n     *   .execute()\n     * ```\n     */\n    ignore() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                ignore: true,\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert top into` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Insert the first 5 rows:\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .top(5)\n     *   .columns(['first_name', 'gender'])\n     *   .expression(\n     *     (eb) => eb.selectFrom('pet').select(['name', sql.lit('other').as('gender')])\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * insert top(5) into \"person\" (\"first_name\", \"gender\") select \"name\", 'other' as \"gender\" from \"pet\"\n     * ```\n     *\n     * Insert the first 50 percent of rows:\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .top(50, 'percent')\n     *   .columns(['first_name', 'gender'])\n     *   .expression(\n     *     (eb) => eb.selectFrom('pet').select(['name', sql.lit('other').as('gender')])\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * insert top(50) percent into \"person\" (\"first_name\", \"gender\") select \"name\", 'other' as \"gender\" from \"pet\"\n     * ```\n     */\n    top(expression, modifiers) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    /**\n     * Adds an `on conflict` clause to the query.\n     *\n     * `on conflict` is only supported by some dialects like PostgreSQL and SQLite. On MySQL\n     * you can use {@link ignore} and {@link onDuplicateKeyUpdate} to achieve similar results.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\")\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can provide the name of the constraint instead of a column name:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .constraint('pet_name_key')\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict on constraint \"pet_name_key\"\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can also specify an expression as the conflict target in case\n     * the unique index is an expression index:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .expression(sql<string>`lower(name)`)\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (lower(name))\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can add a filter for the update statement like this:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doUpdateSet({ species: 'hamster' })\n     *     .where('excluded.name', '!=', 'Catto'')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\")\n     * do update set \"species\" = $3\n     * where \"excluded\".\"name\" != $4\n     * ```\n     *\n     * You can create an `on conflict do nothing` clauses like this:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doNothing()\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\") do nothing\n     * ```\n     *\n     * You can refer to the columns of the virtual `excluded` table\n     * in a type-safe way using a callback and the `ref` method of\n     * `ExpressionBuilder`:\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .values(person)\n     *   .onConflict(oc => oc\n     *     .column('id')\n     *     .doUpdateSet({\n     *       first_name: (eb) => eb.ref('excluded.first_name'),\n     *       last_name: (eb) => eb.ref('excluded.last_name')\n     *     })\n     *   )\n     * ```\n     */\n    onConflict(callback) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                onConflict: callback(new OnConflictBuilder({\n                    onConflictNode: OnConflictNode.create(),\n                })).toOperationNode(),\n            }),\n        });\n    }\n    /**\n     * Adds `on duplicate key update` to the query.\n     *\n     * If you specify `on duplicate key update`, and a row is inserted that would cause\n     * a duplicate value in a unique index or primary key, an update of the old row occurs.\n     *\n     * This is only implemented by some dialects like MySQL. On most dialects you should\n     * use {@link onConflict} instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values(values)\n     *   .onDuplicateKeyUpdate({ species: 'hamster' })\n     * ```\n     */\n    onDuplicateKeyUpdate(update) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                onDuplicateKey: OnDuplicateKeyNode.create(parseUpdateObjectExpression(update)),\n            }),\n        });\n    }\n    returning(selection) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll()),\n        });\n    }\n    output(args) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    /**\n     * Clears all `returning` clauses from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .values({ first_name: 'James', last_name: 'Smith', age: 42 })\n     *   .returning(['first_name'])\n     *   .clearReturning()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"James\", \"Smith\", 42)\n     * ```\n     */\n    clearReturning() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.updateTable('person')\n     *   .set(values)\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function insertPerson(values: InsertablePerson, returnLastName: boolean) {\n     *   return await db\n     *     .insertInto('person')\n     *     .values(values)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `insertPerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new InsertQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `InsertQueryBuilder` with a new output type.\n     */\n    $castTo() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query based on {@link values} input\n     * when using {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * const person = await db.insertInto('person')\n     *   .values({ ...inputPerson, nullable_column: 'hell yeah!' })\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (nullable_column) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * const person = await db.insertInto('person')\n     *   .values({ ...inputPerson, nullable_column: 'hell yeah!' })\n     *   .returningAll()\n     *   .$narrowType<{ nullable_column: string }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make TypeScript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for TypeScript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help TypeScript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .with('new_person', (qb) => qb\n     *     .insertInto('person')\n     *     .values(person)\n     *     .returning('id')\n     *     .$assertType<{ id: string }>()\n     *   )\n     *   .with('new_pet', (qb) => qb\n     *     .insertInto('pet')\n     *     .values((eb) => ({ owner_id: eb.selectFrom('new_person').select('id'), ...pet }))\n     *     .returning(['name as pet_name', 'species'])\n     *     .$assertType<{ pet_name: string, species: Species }>()\n     *   )\n     *   .selectFrom(['new_person', 'new_pet'])\n     *   .selectAll()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    $assertType() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this InsertQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        const { adapter } = this.#props.executor;\n        const query = compiledQuery.query;\n        if ((query.returning && adapter.supportsReturning) ||\n            (query.output && adapter.supportsOutput)) {\n            return result.rows;\n        }\n        return [\n            new InsertResult(result.insertId, \n            // TODO: remove numUpdatedOrDeletedRows.\n            result.numAffectedRows ?? result.numUpdatedOrDeletedRows),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\npreventAwait(InsertQueryBuilder, \"don't await InsertQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n","/// <reference types=\"./delete-result.d.ts\" />\nexport class DeleteResult {\n    numDeletedRows;\n    constructor(numDeletedRows) {\n        this.numDeletedRows = numDeletedRows;\n    }\n}\n","/// <reference types=\"./delete-query-builder.d.ts\" />\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseTableExpressionOrList, } from '../parser/table-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { DeleteResult } from './delete-result.js';\nimport { DeleteQueryNode } from '../operation-node/delete-query-node.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { parseValueExpression, } from '../parser/value-parser.js';\nimport { parseTop } from '../parser/top-parser.js';\nexport class DeleteQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    /**\n     * Changes a `delete from` query into a `delete top from` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Delete the first 5 rows:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('person')\n     *   .top(5)\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * delete top(5) from \"person\" where \"age\" > @1\n     * ```\n     *\n     * Delete the first 50% of rows:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('person')\n     *   .top(50, 'percent')\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * delete top(50) percent from \"person\" where \"age\" > @1\n     * ```\n     */\n    top(expression, modifiers) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    using(tables) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithUsing(this.#props.queryNode, parseTableExpressionOrList(tables)),\n        });\n    }\n    innerJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('FullJoin', args)),\n        });\n    }\n    returning(selection) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll(table) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    output(args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    /**\n     * Clears all `returning` clauses from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.deleteFrom('pet')\n     *   .returningAll()\n     *   .where('name', '=', 'Max')\n     *   .clearReturning()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * delete from \"pet\" where \"name\" = \"Max\"\n     * ```\n     */\n    clearReturning() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode),\n        });\n    }\n    /**\n     * Clears the `limit` clause from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.deleteFrom('pet')\n     *   .returningAll()\n     *   .where('name', '=', 'Max')\n     *   .limit(5)\n     *   .clearLimit()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * delete from \"pet\" where \"name\" = \"Max\" returning *\n     * ```\n     */\n    clearLimit() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithoutLimit(this.#props.queryNode),\n        });\n    }\n    /**\n     * Clears the `order by` clause from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.deleteFrom('pet')\n     *   .returningAll()\n     *   .where('name', '=', 'Max')\n     *   .orderBy('id')\n     *   .clearOrderBy()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * delete from \"pet\" where \"name\" = \"Max\" returning *\n     * ```\n     */\n    clearOrderBy() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithoutOrderBy(this.#props.queryNode),\n        });\n    }\n    /**\n     * Adds an `order by` clause to the query.\n     *\n     * `orderBy` calls are additive. To order by multiple columns, call `orderBy`\n     * multiple times.\n     *\n     * The first argument is the expression to order by and the second is the\n     * order (`asc` or `desc`).\n     *\n     * An `order by` clause in a delete query is only supported by some dialects\n     * like MySQL.\n     *\n     * See {@link SelectQueryBuilder.orderBy} for more examples.\n     *\n     * ### Examples\n     *\n     * Delete 5 oldest items in a table:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('pet')\n     *   .orderBy('created_at')\n     *   .limit(5)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * delete from `pet`\n     * order by `created_at`\n     * limit ?\n     * ```\n     */\n    orderBy(orderBy, direction) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy([orderBy, direction])),\n        });\n    }\n    /**\n     * Adds a limit clause to the query.\n     *\n     * A limit clause in a delete query is only supported by some dialects\n     * like MySQL.\n     *\n     * ### Examples\n     *\n     * Delete 5 oldest items in a table:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('pet')\n     *   .orderBy('created_at')\n     *   .limit(5)\n     *   .execute()\n     * ```\n     */\n    limit(limit) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit))),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.deleteFrom('person')\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function deletePerson(id: number, returnLastName: boolean) {\n     *   return await db\n     *     .deleteFrom('person')\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `deletePerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new DeleteQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `DeleteQueryBuilder` with a new output type.\n     */\n    $castTo() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query when using {@link where} and {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * const person = await db.deleteFrom('person')\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (person.nullable_column) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * const person = await db.deleteFrom('person')\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .$narrowType<{ nullable_column: string }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make TypeScript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for TypeScript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help TypeScript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .with('deleted_person', (qb) => qb\n     *     .deleteFrom('person')\n     *     .where('id', '=', person.id)\n     *     .returning('first_name')\n     *     .$assertType<{ first_name: string }>()\n     *   )\n     *   .with('deleted_pet', (qb) => qb\n     *     .deleteFrom('pet')\n     *     .where('owner_id', '=', person.id)\n     *     .returning(['name as pet_name', 'species'])\n     *     .$assertType<{ pet_name: string, species: Species }>()\n     *   )\n     *   .selectFrom(['deleted_person', 'deleted_pet'])\n     *   .selectAll()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    $assertType() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this DeleteQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        const { adapter } = this.#props.executor;\n        const query = compiledQuery.query;\n        if ((query.returning && adapter.supportsReturning) ||\n            (query.output && adapter.supportsOutput)) {\n            return result.rows;\n        }\n        return [\n            new DeleteResult(\n            // TODO: remove numUpdatedOrDeletedRows.\n            result.numAffectedRows ?? result.numUpdatedOrDeletedRows ?? BigInt(0)),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\npreventAwait(DeleteQueryBuilder, \"don't await DeleteQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n","/// <reference types=\"./update-result.d.ts\" />\nexport class UpdateResult {\n    /**\n     * The number of rows the update query updated (even if not changed).\n    */\n    numUpdatedRows;\n    /**\n     * The number of rows the update query changed.\n     *\n     * This is **optional** and only supported in dialects such as MySQL.\n     * You would probably use {@link numUpdatedRows} in most cases.\n    */\n    numChangedRows;\n    constructor(numUpdatedRows, numChangedRows) {\n        this.numUpdatedRows = numUpdatedRows;\n        this.numChangedRows = numChangedRows;\n    }\n}\n","/// <reference types=\"./update-query-builder.d.ts\" />\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseTableExpressionOrList, } from '../parser/table-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { UpdateQueryNode } from '../operation-node/update-query-node.js';\nimport { parseUpdate, } from '../parser/update-set-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { UpdateResult } from './update-result.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { parseValueExpression, } from '../parser/value-parser.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { parseTop } from '../parser/top-parser.js';\nexport class UpdateQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    /**\n     * Changes an `update` query into a `update top` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Update the first row:\n     *\n     * ```ts\n     * await db.updateTable('person')\n     *   .top(1)\n     *   .set({ first_name: 'Foo' })\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * update top(1) \"person\" set \"first_name\" = @1 where \"age\" > @2\n     * ```\n     *\n     * Update the 50% first rows:\n     *\n     * ```ts\n     * await db.updateTable('person')\n     *   .top(50, 'percent')\n     *   .set({ first_name: 'Foo' })\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * update top(50) percent \"person\" set \"first_name\" = @1 where \"age\" > @2\n     * ```\n     */\n    top(expression, modifiers) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    from(from) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithFromItems(this.#props.queryNode, parseTableExpressionOrList(from)),\n        });\n    }\n    innerJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('FullJoin', args)),\n        });\n    }\n    /**\n     * Adds a limit clause to the update query for supported databases, such as MySQL.\n     *\n     * ### Examples\n     *\n     * Update the first 2 rows in the 'person' table:\n     *\n     * ```ts\n     * return await db\n     *   .updateTable('person')\n     *   .set({ first_name: 'Foo' })\n     *   .limit(2);\n     * ```\n     *\n     * The generated SQL (MySQL):\n     * ```sql\n     * update `person` set `first_name` = 'Foo' limit 2\n     * ```\n     */\n    limit(limit) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit))),\n        });\n    }\n    set(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithUpdates(this.#props.queryNode, parseUpdate(...args)),\n        });\n    }\n    returning(selection) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll(table) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    output(args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    /**\n     * Clears all `returning` clauses from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.updateTable('person')\n     *   .returningAll()\n     *   .set({ age: 39 })\n     *   .where('first_name', '=', 'John')\n     *   .clearReturning()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * update \"person\" set \"age\" = 39 where \"first_name\" = \"John\"\n     * ```\n     */\n    clearReturning() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.updateTable('person')\n     *   .set(values)\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function updatePerson(id: number, updates: UpdateablePerson, returnLastName: boolean) {\n     *   return await db\n     *     .updateTable('person')\n     *     .set(updates)\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `updatePerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new UpdateQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `UpdateQueryBuilder` with a new output type.\n     */\n    $castTo() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query based on {@link set} input\n     * when using {@link where} and/or {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * const person = await db.updateTable('person')\n     *   .set({ deletedAt: now })\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (person.nullable_column) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * const person = await db.updateTable('person')\n     *   .set({ deletedAt: now })\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .$narrowType<{ deletedAt: Date; nullable_column: string }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make TypeScript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for TypeScript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help TypeScript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .with('updated_person', (qb) => qb\n     *     .updateTable('person')\n     *     .set(person)\n     *     .where('id', '=', person.id)\n     *     .returning('first_name')\n     *     .$assertType<{ first_name: string }>()\n     *   )\n     *   .with('updated_pet', (qb) => qb\n     *     .updateTable('pet')\n     *     .set(pet)\n     *     .where('owner_id', '=', person.id)\n     *     .returning(['name as pet_name', 'species'])\n     *     .$assertType<{ pet_name: string, species: Species }>()\n     *   )\n     *   .selectFrom(['updated_person', 'updated_pet'])\n     *   .selectAll()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    $assertType() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this UpdateQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        const { adapter } = this.#props.executor;\n        const query = compiledQuery.query;\n        if ((query.returning && adapter.supportsReturning) ||\n            (query.output && adapter.supportsOutput)) {\n            return result.rows;\n        }\n        return [\n            new UpdateResult(\n            // TODO: remove numUpdatedOrDeletedRows.\n            // TODO: https://github.com/kysely-org/kysely/pull/431#discussion_r1172330899\n            result.numAffectedRows ?? result.numUpdatedOrDeletedRows ?? BigInt(0), result.numChangedRows),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\npreventAwait(UpdateQueryBuilder, \"don't await UpdateQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n","/// <reference types=\"./common-table-expression-name-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { TableNode } from './table-node.js';\n/**\n * @internal\n */\nexport const CommonTableExpressionNameNode = freeze({\n    is(node) {\n        return node.kind === 'CommonTableExpressionNameNode';\n    },\n    create(tableName, columnNames) {\n        return freeze({\n            kind: 'CommonTableExpressionNameNode',\n            table: TableNode.create(tableName),\n            columns: columnNames\n                ? freeze(columnNames.map(ColumnNode.create))\n                : undefined,\n        });\n    },\n});\n","/// <reference types=\"./common-table-expression-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const CommonTableExpressionNode = freeze({\n    is(node) {\n        return node.kind === 'CommonTableExpressionNode';\n    },\n    create(name, expression) {\n        return freeze({\n            kind: 'CommonTableExpressionNode',\n            name,\n            expression,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./cte-builder.d.ts\" />\nimport { CommonTableExpressionNode } from '../operation-node/common-table-expression-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class CTEBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Makes the common table expression materialized.\n     */\n    materialized() {\n        return new CTEBuilder({\n            ...this.#props,\n            node: CommonTableExpressionNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    /**\n     * Makes the common table expression not materialized.\n     */\n    notMaterialized() {\n        return new CTEBuilder({\n            ...this.#props,\n            node: CommonTableExpressionNode.cloneWith(this.#props.node, {\n                materialized: false,\n            }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.node;\n    }\n}\npreventAwait(CTEBuilder, \"don't await CTEBuilder instances. They are never executed directly and are always just a part of a query.\");\n","/// <reference types=\"./with-parser.d.ts\" />\nimport { CommonTableExpressionNameNode } from '../operation-node/common-table-expression-name-node.js';\nimport { createQueryCreator } from './parse-utils.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { CTEBuilder } from '../query-builder/cte-builder.js';\nimport { CommonTableExpressionNode } from '../operation-node/common-table-expression-node.js';\nexport function parseCommonTableExpression(nameOrBuilderCallback, expression) {\n    const expressionNode = expression(createQueryCreator()).toOperationNode();\n    if (isFunction(nameOrBuilderCallback)) {\n        return nameOrBuilderCallback(cteBuilderFactory(expressionNode)).toOperationNode();\n    }\n    return CommonTableExpressionNode.create(parseCommonTableExpressionName(nameOrBuilderCallback), expressionNode);\n}\nfunction cteBuilderFactory(expressionNode) {\n    return (name) => {\n        return new CTEBuilder({\n            node: CommonTableExpressionNode.create(parseCommonTableExpressionName(name), expressionNode),\n        });\n    };\n}\nfunction parseCommonTableExpressionName(name) {\n    if (name.includes('(')) {\n        const parts = name.split(/[\\(\\)]/);\n        const table = parts[0];\n        const columns = parts[1].split(',').map((it) => it.trim());\n        return CommonTableExpressionNameNode.create(table, columns);\n    }\n    else {\n        return CommonTableExpressionNameNode.create(name);\n    }\n}\n","/// <reference types=\"./with-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const WithNode = freeze({\n    is(node) {\n        return node.kind === 'WithNode';\n    },\n    create(expression, params) {\n        return freeze({\n            kind: 'WithNode',\n            expressions: freeze([expression]),\n            ...params,\n        });\n    },\n    cloneWithExpression(withNode, expression) {\n        return freeze({\n            ...withNode,\n            expressions: freeze([...withNode.expressions, expression]),\n        });\n    },\n});\n","/// <reference types=\"./matched-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const MatchedNode = freeze({\n    is(node) {\n        return node.kind === 'MatchedNode';\n    },\n    create(not, bySource = false) {\n        return freeze({\n            kind: 'MatchedNode',\n            not,\n            bySource,\n        });\n    },\n});\n","/// <reference types=\"./merge-parser.d.ts\" />\nimport { MatchedNode } from '../operation-node/matched-node.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { WhenNode } from '../operation-node/when-node.js';\nimport { isString } from '../util/object-utils.js';\nimport { parseFilterList, parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from './binary-operation-parser.js';\nexport function parseMergeWhen(type, args, refRight) {\n    return WhenNode.create(parseFilterList([\n        MatchedNode.create(!type.isMatched, type.bySource),\n        ...(args && args.length > 0\n            ? [\n                args.length === 3 && refRight\n                    ? parseReferentialBinaryOperation(args[0], args[1], args[2])\n                    : parseValueBinaryOperationOrExpression(args),\n            ]\n            : []),\n    ], 'and', false));\n}\nexport function parseMergeThen(result) {\n    if (isString(result)) {\n        return RawNode.create([result], []);\n    }\n    if (isOperationNodeSource(result)) {\n        return result.toOperationNode();\n    }\n    return result;\n}\n","/// <reference types=\"./merge-result.d.ts\" />\nexport class MergeResult {\n    numChangedRows;\n    constructor(numChangedRows) {\n        this.numChangedRows = numChangedRows;\n    }\n}\n","/// <reference types=\"./merge-query-builder.d.ts\" />\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { MergeQueryNode } from '../operation-node/merge-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { UpdateQueryNode } from '../operation-node/update-query-node.js';\nimport { parseInsertExpression, } from '../parser/insert-values-parser.js';\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseMergeThen, parseMergeWhen } from '../parser/merge-parser.js';\nimport { parseSelectAll, parseSelectArg } from '../parser/select-parser.js';\nimport { parseTop } from '../parser/top-parser.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { MergeResult } from './merge-result.js';\nimport { NoResultError, isNoResultErrorConstructor, } from './no-result-error.js';\nimport { UpdateQueryBuilder } from './update-query-builder.js';\nexport class MergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Changes a `merge into` query to an `merge top into` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Affect 5 matched rows at most:\n     *\n     * ```ts\n     * await db.mergeInto('person')\n     *   .top(5)\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * merge top(5) into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     *\n     * Affect 50% of matched rows:\n     *\n     * ```ts\n     * await db.mergeInto('person')\n     *   .top(50, 'percent')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * merge top(50) percent into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     */\n    top(expression, modifiers) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    using(...args) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithUsing(this.#props.queryNode, parseJoin('Using', args)),\n        });\n    }\n    output(args) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n}\npreventAwait(MergeQueryBuilder, \"don't await MergeQueryBuilder instances directly. To execute the query you need to call `execute` when available.\");\nexport class WheneableMergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * See {@link MergeQueryBuilder.top}.\n     */\n    top(expression, modifiers) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    /**\n     * Adds a simple `when matched` clause to the query.\n     *\n     * For a `when matched` clause with an `and` condition, see {@link whenMatchedAnd}.\n     *\n     * For a simple `when not matched` clause, see {@link whenNotMatched}.\n     *\n     * For a `when not matched` clause with an `and` condition, see {@link whenNotMatchedAnd}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     */\n    whenMatched() {\n        return this.#whenMatched([]);\n    }\n    whenMatchedAnd(...args) {\n        return this.#whenMatched(args);\n    }\n    /**\n     * Adds the `when matched` clause to the query with an `and` condition. But unlike\n     * {@link whenMatchedAnd}, this method accepts a column reference as the 3rd argument.\n     *\n     * This method is similar to {@link SelectQueryBuilder.whereRef}, so see the documentation\n     * for that method for more examples.\n     */\n    whenMatchedAndRef(lhs, op, rhs) {\n        return this.#whenMatched([lhs, op, rhs], true);\n    }\n    #whenMatched(args, refRight) {\n        return new MatchedThenableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithWhen(this.#props.queryNode, parseMergeWhen({ isMatched: true }, args, refRight)),\n        });\n    }\n    /**\n     * Adds a simple `when not matched` clause to the query.\n     *\n     * For a `when not matched` clause with an `and` condition, see {@link whenNotMatchedAnd}.\n     *\n     * For a simple `when matched` clause, see {@link whenMatched}.\n     *\n     * For a `when matched` clause with an `and` condition, see {@link whenMatchedAnd}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenNotMatched()\n     *   .thenInsertValues({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when not matched then\n     *   insert (\"first_name\", \"last_name\") values ($1, $2)\n     * ```\n     */\n    whenNotMatched() {\n        return this.#whenNotMatched([]);\n    }\n    whenNotMatchedAnd(...args) {\n        return this.#whenNotMatched(args);\n    }\n    /**\n     * Adds the `when not matched` clause to the query with an `and` condition. But unlike\n     * {@link whenNotMatchedAnd}, this method accepts a column reference as the 3rd argument.\n     *\n     * Unlike {@link whenMatchedAndRef}, you cannot reference columns from the target table.\n     *\n     * This method is similar to {@link SelectQueryBuilder.whereRef}, so see the documentation\n     * for that method for more examples.\n     */\n    whenNotMatchedAndRef(lhs, op, rhs) {\n        return this.#whenNotMatched([lhs, op, rhs], true);\n    }\n    /**\n     * Adds a simple `when not matched by source` clause to the query.\n     *\n     * Supported in MS SQL Server.\n     *\n     * Similar to {@link whenNotMatched}, but returns a {@link MatchedThenableMergeQueryBuilder}.\n     */\n    whenNotMatchedBySource() {\n        return this.#whenNotMatched([], false, true);\n    }\n    whenNotMatchedBySourceAnd(...args) {\n        return this.#whenNotMatched(args, false, true);\n    }\n    /**\n     * Adds the `when not matched by source` clause to the query with an `and` condition.\n     *\n     * Similar to {@link whenNotMatchedAndRef}, but you can reference columns from\n     * the target table, and not from source table and returns a {@link MatchedThenableMergeQueryBuilder}.\n     */\n    whenNotMatchedBySourceAndRef(lhs, op, rhs) {\n        return this.#whenNotMatched([lhs, op, rhs], true, true);\n    }\n    output(args) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    #whenNotMatched(args, refRight = false, bySource = false) {\n        const props = {\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithWhen(this.#props.queryNode, parseMergeWhen({ isMatched: false, bySource }, args, refRight)),\n        };\n        const Builder = bySource\n            ? MatchedThenableMergeQueryBuilder\n            : NotMatchedThenableMergeQueryBuilder;\n        return new Builder(props);\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.updateTable('person')\n     *   .set(values)\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function updatePerson(id: number, updates: UpdateablePerson, returnLastName: boolean) {\n     *   return await db\n     *     .updateTable('person')\n     *     .set(updates)\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `updatePerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        if (compiledQuery.query.output &&\n            this.#props.executor.adapter.supportsOutput) {\n            return result.rows;\n        }\n        return [new MergeResult(result.numAffectedRows)];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n}\npreventAwait(WheneableMergeQueryBuilder, \"don't await WheneableMergeQueryBuilder instances directly. To execute the query you need to call `execute`.\");\nexport class MatchedThenableMergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Performs the `delete` action.\n     *\n     * To perform the `do nothing` action, see {@link thenDoNothing}.\n     *\n     * To perform the `update` action, see {@link thenUpdate} or {@link thenUpdateSet}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     */\n    thenDelete() {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen('delete')),\n        });\n    }\n    /**\n     * Performs the `do nothing` action.\n     *\n     * This is supported in PostgreSQL.\n     *\n     * To perform the `delete` action, see {@link thenDelete}.\n     *\n     * To perform the `update` action, see {@link thenUpdate} or {@link thenUpdateSet}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDoNothing()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   do nothing\n     * ```\n     */\n    thenDoNothing() {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen('do nothing')),\n        });\n    }\n    /**\n     * Perform an `update` operation with a full-fledged {@link UpdateQueryBuilder}.\n     * This is handy when multiple `set` invocations are needed.\n     *\n     * For a shorthand version of this method, see {@link thenUpdateSet}.\n     *\n     * To perform the `delete` action, see {@link thenDelete}.\n     *\n     * To perform the `do nothing` action, see {@link thenDoNothing}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenUpdate((ub) => ub\n     *     .set(sql`metadata['has_pets']`, 'Y')\n     *     .set({\n     *       updated_at: Date.now(),\n     *     })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   update set metadata['has_pets'] = $1, \"updated_at\" = $2\n     * ```\n     */\n    thenUpdate(set) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen(set(new UpdateQueryBuilder({\n                queryId: this.#props.queryId,\n                executor: NOOP_QUERY_EXECUTOR,\n                queryNode: UpdateQueryNode.createWithoutTable(),\n            })))),\n        });\n    }\n    thenUpdateSet(...args) {\n        // @ts-ignore not sure how to type this so it won't complain about set(...args).\n        return this.thenUpdate((ub) => ub.set(...args));\n    }\n}\npreventAwait(MatchedThenableMergeQueryBuilder, \"don't await MatchedThenableMergeQueryBuilder instances directly. To execute the query you need to call `execute` when available.\");\nexport class NotMatchedThenableMergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Performs the `do nothing` action.\n     *\n     * This is supported in PostgreSQL.\n     *\n     * To perform the `insert` action, see {@link thenInsertValues}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenNotMatched()\n     *   .thenDoNothing()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when not matched then\n     *   do nothing\n     * ```\n     */\n    thenDoNothing() {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen('do nothing')),\n        });\n    }\n    thenInsertValues(insert) {\n        const [columns, values] = parseInsertExpression(insert);\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen(InsertQueryNode.cloneWith(InsertQueryNode.createWithoutInto(), {\n                columns,\n                values,\n            }))),\n        });\n    }\n}\npreventAwait(NotMatchedThenableMergeQueryBuilder, \"don't await NotMatchedThenableMergeQueryBuilder instances directly. To execute the query you need to call `execute` when available.\");\n","/// <reference types=\"./query-creator.d.ts\" />\nimport { createSelectQueryBuilder, } from './query-builder/select-query-builder.js';\nimport { InsertQueryBuilder } from './query-builder/insert-query-builder.js';\nimport { DeleteQueryBuilder } from './query-builder/delete-query-builder.js';\nimport { UpdateQueryBuilder } from './query-builder/update-query-builder.js';\nimport { DeleteQueryNode } from './operation-node/delete-query-node.js';\nimport { InsertQueryNode } from './operation-node/insert-query-node.js';\nimport { SelectQueryNode } from './operation-node/select-query-node.js';\nimport { UpdateQueryNode } from './operation-node/update-query-node.js';\nimport { parseTable, parseTableExpression, parseTableExpressionOrList, parseAliasedTable, } from './parser/table-parser.js';\nimport { parseCommonTableExpression, } from './parser/with-parser.js';\nimport { WithNode } from './operation-node/with-node.js';\nimport { createQueryId } from './util/query-id.js';\nimport { WithSchemaPlugin } from './plugin/with-schema/with-schema-plugin.js';\nimport { freeze } from './util/object-utils.js';\nimport { parseSelectArg, } from './parser/select-parser.js';\nimport { MergeQueryBuilder } from './query-builder/merge-query-builder.js';\nimport { MergeQueryNode } from './operation-node/merge-query-node.js';\nexport class QueryCreator {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    selectFrom(from) {\n        return createSelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(from), this.#props.withNode),\n        });\n    }\n    selectNoFrom(selection) {\n        return createSelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: SelectQueryNode.cloneWithSelections(SelectQueryNode.create(this.#props.withNode), parseSelectArg(selection)),\n        });\n    }\n    /**\n     * Creates an insert query.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples. Also see\n     * the {@link ReturningInterface.returning | returning} method for a way to return columns\n     * on supported databases like PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirst()\n     *\n     * console.log(result.insertId)\n     * ```\n     *\n     * Some databases like PostgreSQL support the `returning` method:\n     *\n     * ```ts\n     * const { id } = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .returning('id')\n     *   .executeTakeFirst()\n     * ```\n     */\n    insertInto(table) {\n        return new InsertQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a replace query.\n     *\n     * A MySQL-only statement similar to {@link InsertQueryBuilder.onDuplicateKeyUpdate}\n     * that deletes and inserts values on collision instead of updating existing rows.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .replaceInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirst()\n     *\n     * console.log(result.insertId)\n     * ```\n     */\n    replaceInto(table) {\n        return new InsertQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode, true),\n        });\n    }\n    deleteFrom(tables) {\n        return new DeleteQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: DeleteQueryNode.create(parseTableExpressionOrList(tables), this.#props.withNode),\n        });\n    }\n    updateTable(table) {\n        return new UpdateQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: UpdateQueryNode.create(parseTableExpression(table), this.#props.withNode),\n        });\n    }\n    mergeInto(targetTable) {\n        return new MergeQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: MergeQueryNode.create(parseAliasedTable(targetTable), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a `with` query (Common Table Expression).\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"cte\", \"Simple selects\", 10) -->\n     *\n     * Common table expressions (CTE) are a great way to modularize complex queries.\n     * Essentially they allow you to run multiple separate queries within a\n     * single roundtrip to the DB.\n     *\n     * Since CTEs are a part of the main query, query optimizers inside DB\n     * engines are able to optimize the overall query. For example, postgres\n     * is able to inline the CTEs inside the using queries if it decides it's\n     * faster.\n     *\n     * ```ts\n     * const result = await db\n     *   // Create a CTE called `jennifers` that selects all\n     *   // persons named 'Jennifer'.\n     *   .with('jennifers', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     .select(['id', 'age'])\n     *   )\n     *   // Select all rows from the `jennifers` CTE and\n     *   // further filter it.\n     *   .with('adult_jennifers', (db) => db\n     *     .selectFrom('jennifers')\n     *     .where('age', '>', 18)\n     *     .select(['id', 'age'])\n     *   )\n     *   // Finally select all adult jennifers that are\n     *   // also younger than 60.\n     *   .selectFrom('adult_jennifers')\n     *   .where('age', '<', 60)\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * <!-- siteExample(\"cte\", \"Inserts, updates and deletions\", 20) -->\n     *\n     * Some databases like postgres also allow you to run other queries than selects\n     * in CTEs. On these databases CTEs are extremely powerful:\n     *\n     * ```ts\n     * const result = await db\n     *   .with('new_person', (db) => db\n     *     .insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       age: 35,\n     *     })\n     *     .returning('id')\n     *   )\n     *   .with('new_pet', (db) => db\n     *     .insertInto('pet')\n     *     .values({\n     *       name: 'Doggo',\n     *       species: 'dog',\n     *       is_favorite: true,\n     *       // Use the id of the person we just inserted.\n     *       owner_id: db\n     *         .selectFrom('new_person')\n     *         .select('id')\n     *     })\n     *     .returning('id')\n     *   )\n     *   .selectFrom(['new_person', 'new_pet'])\n     *   .select([\n     *     'new_person.id as person_id',\n     *     'new_pet.id as pet_id'\n     *   ])\n     *   .execute()\n     * ```\n     *\n     * The CTE name can optionally specify column names in addition to\n     * a name. In that case Kysely requires the expression to retun\n     * rows with the same columns.\n     *\n     * ```ts\n     * await db\n     *   .with('jennifers(id, age)', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     // This is ok since we return columns with the same\n     *     // names as specified by `jennifers(id, age)`.\n     *     .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * The first argument can also be a callback. The callback is passed\n     * a `CTEBuilder` instance that can be used to configure the CTE:\n     *\n     * ```ts\n     * await db\n     *   .with(\n     *     (cte) => cte('jennifers').materialized(),\n     *     (db) => db\n     *       .selectFrom('person')\n     *       .where('first_name', '=', 'Jennifer')\n     *       .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     */\n    with(nameOrBuilder, expression) {\n        const cte = parseCommonTableExpression(nameOrBuilder, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : WithNode.create(cte),\n        });\n    }\n    /**\n     * Creates a recursive `with` query (Common Table Expression).\n     *\n     * Note that recursiveness is a property of the whole `with` statement.\n     * You cannot have recursive and non-recursive CTEs in a same `with` statement.\n     * Therefore the recursiveness is determined by the **first** `with` or\n     * `withRecusive` call you make.\n     *\n     * See the {@link with} method for examples and more documentation.\n     */\n    withRecursive(nameOrBuilder, expression) {\n        const cte = parseCommonTableExpression(nameOrBuilder, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : WithNode.create(cte, { recursive: true }),\n        });\n    }\n    /**\n     * Returns a copy of this query creator instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    /**\n     * Returns a copy of this query creator instance without any plugins.\n     */\n    withoutPlugins() {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * Sets the schema to be used for all table references that don't explicitly\n     * specify a schema.\n     *\n     * This only affects the query created through the builder returned from\n     * this method and doesn't modify the `db` instance.\n     *\n     * See [this recipe](https://github.com/koskimas/kysely/tree/master/site/docs/recipes/schemas.md)\n     * for a more detailed explanation.\n     *\n     * ### Examples\n     *\n     * ```\n     * await db\n     *   .withSchema('mammals')\n     *   .selectFrom('pet')\n     *   .selectAll()\n     *   .innerJoin('public.person', 'public.person.id', 'pet.owner_id')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select * from \"mammals\".\"pet\"\n     * inner join \"public\".\"person\"\n     * on \"public\".\"person\".\"id\" = \"mammals\".\"pet\".\"owner_id\"\n     * ```\n     *\n     * `withSchema` is smart enough to not add schema for aliases,\n     * common table expressions or other places where the schema\n     * doesn't belong to:\n     *\n     * ```\n     * await db\n     *   .withSchema('mammals')\n     *   .selectFrom('pet as p')\n     *   .select('p.name')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".\"name\" from \"mammals\".\"pet\" as \"p\"\n     * ```\n     */\n    withSchema(schema) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n}\n","/// <reference types=\"./noop-query-executor.d.ts\" />\nimport { QueryExecutorBase } from './query-executor-base.js';\n/**\n * A {@link QueryExecutor} subclass that can be used when you don't\n * have a {@link QueryCompiler}, {@link ConnectionProvider} or any\n * other needed things to actually execute queries.\n */\nexport class NoopQueryExecutor extends QueryExecutorBase {\n    get adapter() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    compileQuery() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    provideConnection() {\n        throw new Error('this query cannot be executed');\n    }\n    withConnectionProvider() {\n        throw new Error('this query cannot have a connection provider');\n    }\n    withPlugin(plugin) {\n        return new NoopQueryExecutor([...this.plugins, plugin]);\n    }\n    withPlugins(plugins) {\n        return new NoopQueryExecutor([...this.plugins, ...plugins]);\n    }\n    withPluginAtFront(plugin) {\n        return new NoopQueryExecutor([plugin, ...this.plugins]);\n    }\n    withoutPlugins() {\n        return new NoopQueryExecutor([]);\n    }\n}\nexport const NOOP_QUERY_EXECUTOR = new NoopQueryExecutor();\n","/// <reference types=\"./deferred.d.ts\" />\nexport class Deferred {\n    #promise;\n    #resolve;\n    #reject;\n    constructor() {\n        this.#promise = new Promise((resolve, reject) => {\n            this.#reject = reject;\n            this.#resolve = resolve;\n        });\n    }\n    get promise() {\n        return this.#promise;\n    }\n    resolve = (value) => {\n        if (this.#resolve) {\n            this.#resolve(value);\n        }\n    };\n    reject = (reason) => {\n        if (this.#reject) {\n            this.#reject(reason);\n        }\n    };\n}\n","/// <reference types=\"./log-once.d.ts\" />\nconst LOGGED_MESSAGES = new Set();\n/**\n * Use for system-level logging, such as deprecation messages.\n * Logs a message and ensures it won't be logged again.\n */\nexport function logOnce(message) {\n    if (LOGGED_MESSAGES.has(message)) {\n        return;\n    }\n    LOGGED_MESSAGES.add(message);\n    console.log(message);\n}\n","/// <reference types=\"./query-executor-base.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { Deferred } from '../util/deferred.js';\nimport { logOnce } from '../util/log-once.js';\nconst NO_PLUGINS = freeze([]);\nexport class QueryExecutorBase {\n    #plugins;\n    constructor(plugins = NO_PLUGINS) {\n        this.#plugins = plugins;\n    }\n    get plugins() {\n        return this.#plugins;\n    }\n    transformQuery(node, queryId) {\n        for (const plugin of this.#plugins) {\n            const transformedNode = plugin.transformQuery({ node, queryId });\n            // We need to do a runtime check here. There is no good way\n            // to write types that enforce this constraint.\n            if (transformedNode.kind === node.kind) {\n                node = transformedNode;\n            }\n            else {\n                throw new Error([\n                    `KyselyPlugin.transformQuery must return a node`,\n                    `of the same kind that was given to it.`,\n                    `The plugin was given a ${node.kind}`,\n                    `but it returned a ${transformedNode.kind}`,\n                ].join(' '));\n            }\n        }\n        return node;\n    }\n    async executeQuery(compiledQuery, queryId) {\n        return await this.provideConnection(async (connection) => {\n            const result = await connection.executeQuery(compiledQuery);\n            const transformedResult = await this.#transformResult(result, queryId);\n            // TODO: remove.\n            warnOfOutdatedDriverOrPlugins(result, transformedResult);\n            return transformedResult;\n        });\n    }\n    async *stream(compiledQuery, chunkSize, queryId) {\n        const connectionDefer = new Deferred();\n        const connectionReleaseDefer = new Deferred();\n        this.provideConnection(async (connection) => {\n            connectionDefer.resolve(connection);\n            // Lets wait until we don't need connection before returning here (returning releases connection)\n            return await connectionReleaseDefer.promise;\n        }).catch((ex) => connectionDefer.reject(ex));\n        const connection = await connectionDefer.promise;\n        try {\n            for await (const result of connection.streamQuery(compiledQuery, chunkSize)) {\n                yield await this.#transformResult(result, queryId);\n            }\n        }\n        finally {\n            connectionReleaseDefer.resolve();\n        }\n    }\n    async #transformResult(result, queryId) {\n        for (const plugin of this.#plugins) {\n            result = await plugin.transformResult({ result, queryId });\n        }\n        return result;\n    }\n}\n// TODO: remove.\nfunction warnOfOutdatedDriverOrPlugins(result, transformedResult) {\n    const { numAffectedRows } = result;\n    if ((numAffectedRows === undefined &&\n        result.numUpdatedOrDeletedRows === undefined) ||\n        (numAffectedRows !== undefined &&\n            transformedResult.numAffectedRows !== undefined)) {\n        return;\n    }\n    logOnce('kysely:warning: outdated driver/plugin detected! QueryResult.numUpdatedOrDeletedRows is deprecated and will be removed in a future release.');\n}\n","/// <reference types=\"./object-utils.d.ts\" />\nexport function isEmpty(obj) {\n    if (Array.isArray(obj) || isString(obj) || isBuffer(obj)) {\n        return obj.length === 0;\n    }\n    else if (obj) {\n        return Object.keys(obj).length === 0;\n    }\n    return false;\n}\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined' || obj === undefined;\n}\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\nexport function isNumber(obj) {\n    return typeof obj === 'number';\n}\nexport function isBoolean(obj) {\n    return typeof obj === 'boolean';\n}\nexport function isNull(obj) {\n    return obj === null;\n}\nexport function isDate(obj) {\n    return obj instanceof Date;\n}\nexport function isBigInt(obj) {\n    return typeof obj === 'bigint';\n}\n// Don't change the returnd type to `obj is Buffer` to not create a\n// hard dependency to node.\nexport function isBuffer(obj) {\n    return typeof Buffer !== 'undefined' && Buffer.isBuffer(obj);\n}\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\nexport function isObject(obj) {\n    return typeof obj === 'object' && obj !== null;\n}\nexport function isArrayBufferOrView(obj) {\n    return obj instanceof ArrayBuffer || ArrayBuffer.isView(obj);\n}\nexport function isPlainObject(obj) {\n    if (!isObject(obj) || getTag(obj) !== '[object Object]') {\n        return false;\n    }\n    if (Object.getPrototypeOf(obj) === null) {\n        return true;\n    }\n    let proto = obj;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(obj) === proto;\n}\nexport function getLast(arr) {\n    return arr[arr.length - 1];\n}\nexport function freeze(obj) {\n    return Object.freeze(obj);\n}\nexport function asArray(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg;\n    }\n    else {\n        return [arg];\n    }\n}\nexport function asReadonlyArray(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg;\n    }\n    else {\n        return freeze([arg]);\n    }\n}\nexport function isReadonlyArray(arg) {\n    return Array.isArray(arg);\n}\nexport function noop(obj) {\n    return obj;\n}\nexport function compare(obj1, obj2) {\n    if (isReadonlyArray(obj1) && isReadonlyArray(obj2)) {\n        return compareArrays(obj1, obj2);\n    }\n    else if (isObject(obj1) && isObject(obj2)) {\n        return compareObjects(obj1, obj2);\n    }\n    return obj1 === obj2;\n}\nfunction compareArrays(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; ++i) {\n        if (!compare(arr1[i], arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction compareObjects(obj1, obj2) {\n    if (isBuffer(obj1) && isBuffer(obj2)) {\n        return compareBuffers(obj1, obj2);\n    }\n    else if (isDate(obj1) && isDate(obj2)) {\n        return compareDates(obj1, obj2);\n    }\n    return compareGenericObjects(obj1, obj2);\n}\nfunction compareBuffers(buf1, buf2) {\n    return Buffer.compare(buf1, buf2) === 0;\n}\nfunction compareDates(date1, date2) {\n    return date1.getTime() === date2.getTime();\n}\nfunction compareGenericObjects(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        if (!compare(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nconst toString = Object.prototype.toString;\nfunction getTag(value) {\n    if (value == null) {\n        return value === undefined ? '[object Undefined]' : '[object Null]';\n    }\n    return toString.call(value);\n}\n","/// <reference types=\"./prevent-await.d.ts\" />\nexport function preventAwait(clazz, message) {\n    Object.defineProperties(clazz.prototype, {\n        then: {\n            enumerable: false,\n            value: () => {\n                throw new Error(message);\n            },\n        },\n    });\n}\n","/// <reference types=\"./random-string.d.ts\" />\nconst CHARS = [\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n];\nexport function randomString(length) {\n    let chars = '';\n    for (let i = 0; i < length; ++i) {\n        chars += randomChar();\n    }\n    return chars;\n}\nfunction randomChar() {\n    return CHARS[~~(Math.random() * CHARS.length)];\n}\n","/// <reference types=\"./query-id.d.ts\" />\nimport { randomString } from './random-string.js';\nexport function createQueryId() {\n    return new LazyQueryId();\n}\nclass LazyQueryId {\n    #queryId;\n    get queryId() {\n        if (this.#queryId === undefined) {\n            this.#queryId = randomString(8);\n        }\n        return this.#queryId;\n    }\n}\n","import type * as ConfigProvider from \"../../ConfigProvider.js\"\nimport * as Context from \"../../Context.js\"\nimport type * as Effect from \"../../Effect.js\"\nimport type * as Exit from \"../../Exit.js\"\nimport { dual } from \"../../Function.js\"\nimport * as HashSet from \"../../HashSet.js\"\nimport type * as Layer from \"../../Layer.js\"\nimport type * as Logger from \"../../Logger.js\"\nimport type * as LogLevel from \"../../LogLevel.js\"\nimport type { Scope } from \"../../Scope.js\"\nimport type * as Supervisor from \"../../Supervisor.js\"\nimport type * as Tracer from \"../../Tracer.js\"\nimport * as core from \"../core.js\"\nimport * as fiberRuntime from \"../fiberRuntime.js\"\nimport * as layer from \"../layer.js\"\nimport * as runtimeFlags from \"../runtimeFlags.js\"\nimport * as runtimeFlagsPatch from \"../runtimeFlagsPatch.js\"\nimport * as _supervisor from \"../supervisor.js\"\nimport * as tracer from \"../tracer.js\"\n\n// circular with Logger\n\n/** @internal */\nexport const minimumLogLevel = (level: LogLevel.LogLevel): Layer.Layer<never> =>\n  layer.scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(\n      fiberRuntime.currentMinimumLogLevel,\n      level\n    )\n  )\n\n/** @internal */\nexport const withMinimumLogLevel = dual<\n  (level: LogLevel.LogLevel) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, level: LogLevel.LogLevel) => Effect.Effect<A, E, R>\n>(2, (self, level) =>\n  core.fiberRefLocally(\n    fiberRuntime.currentMinimumLogLevel,\n    level\n  )(self))\n\n/** @internal */\nexport const addLogger = <A>(logger: Logger.Logger<unknown, A>): Layer.Layer<never> =>\n  layer.scopedDiscard(\n    fiberRuntime.fiberRefLocallyScopedWith(\n      fiberRuntime.currentLoggers,\n      HashSet.add(logger)\n    )\n  )\n\n/** @internal */\nexport const addLoggerEffect = <A, E, R>(\n  effect: Effect.Effect<Logger.Logger<unknown, A>, E, R>\n): Layer.Layer<never, E, R> =>\n  layer.unwrapEffect(\n    core.map(effect, addLogger)\n  )\n\n/** @internal */\nexport const addLoggerScoped = <A, E, R>(\n  effect: Effect.Effect<Logger.Logger<unknown, A>, E, R>\n): Layer.Layer<never, E, Exclude<R, Scope>> =>\n  layer.unwrapScoped(\n    core.map(effect, addLogger)\n  )\n\n/** @internal */\nexport const removeLogger = <A>(logger: Logger.Logger<unknown, A>): Layer.Layer<never> =>\n  layer.scopedDiscard(\n    fiberRuntime.fiberRefLocallyScopedWith(\n      fiberRuntime.currentLoggers,\n      HashSet.remove(logger)\n    )\n  )\n\n/** @internal */\nexport const replaceLogger = dual<\n  <B>(that: Logger.Logger<unknown, B>) => <A>(self: Logger.Logger<unknown, A>) => Layer.Layer<never>,\n  <A, B>(self: Logger.Logger<unknown, A>, that: Logger.Logger<unknown, B>) => Layer.Layer<never>\n>(2, (self, that) => layer.flatMap(removeLogger(self), () => addLogger(that)))\n\n/** @internal */\nexport const replaceLoggerEffect = dual<\n  <B, E, R>(\n    that: Effect.Effect<Logger.Logger<unknown, B>, E, R>\n  ) => <A>(self: Logger.Logger<unknown, A>) => Layer.Layer<never, E, R>,\n  <A, B, E, R>(\n    self: Logger.Logger<unknown, A>,\n    that: Effect.Effect<Logger.Logger<unknown, B>, E, R>\n  ) => Layer.Layer<never, E, R>\n>(2, (self, that) => layer.flatMap(removeLogger(self), () => addLoggerEffect(that)))\n\n/** @internal */\nexport const replaceLoggerScoped = dual<\n  <B, E, R>(\n    that: Effect.Effect<Logger.Logger<unknown, B>, E, R>\n  ) => <A>(self: Logger.Logger<unknown, A>) => Layer.Layer<never, E, Exclude<R, Scope>>,\n  <A, B, E, R>(\n    self: Logger.Logger<unknown, A>,\n    that: Effect.Effect<Logger.Logger<unknown, B>, E, R>\n  ) => Layer.Layer<never, E, Exclude<R, Scope>>\n>(2, (self, that) => layer.flatMap(removeLogger(self), () => addLoggerScoped(that)))\n\n/** @internal */\nexport const addSupervisor = <A>(supervisor: Supervisor.Supervisor<A>): Layer.Layer<never> =>\n  layer.scopedDiscard(\n    fiberRuntime.fiberRefLocallyScopedWith(\n      fiberRuntime.currentSupervisor,\n      (current) => new _supervisor.Zip(current, supervisor)\n    )\n  )\n\n/** @internal */\nexport const enableCooperativeYielding: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.enable(runtimeFlags.CooperativeYielding)\n  )\n)\n\n/** @internal */\nexport const enableInterruption: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.enable(runtimeFlags.Interruption)\n  )\n)\n\n/** @internal */\nexport const enableOpSupervision: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.enable(runtimeFlags.OpSupervision)\n  )\n)\n\n/** @internal */\nexport const enableRuntimeMetrics: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.enable(runtimeFlags.RuntimeMetrics)\n  )\n)\n\n/** @internal */\nexport const enableWindDown: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.enable(runtimeFlags.WindDown)\n  )\n)\n\n/** @internal */\nexport const disableCooperativeYielding: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.disable(runtimeFlags.CooperativeYielding)\n  )\n)\n\n/** @internal */\nexport const disableInterruption: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.disable(runtimeFlags.Interruption)\n  )\n)\n\n/** @internal */\nexport const disableOpSupervision: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.disable(runtimeFlags.OpSupervision)\n  )\n)\n\n/** @internal */\nexport const disableRuntimeMetrics: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.disable(runtimeFlags.RuntimeMetrics)\n  )\n)\n\n/** @internal */\nexport const disableWindDown: Layer.Layer<never> = layer.scopedDiscard(\n  fiberRuntime.withRuntimeFlagsScoped(\n    runtimeFlagsPatch.disable(runtimeFlags.WindDown)\n  )\n)\n\n/** @internal */\nexport const setConfigProvider = (configProvider: ConfigProvider.ConfigProvider): Layer.Layer<never> =>\n  layer.scopedDiscard(fiberRuntime.withConfigProviderScoped(configProvider))\n\n/** @internal */\nexport const parentSpan = (span: Tracer.AnySpan): Layer.Layer<Tracer.ParentSpan> =>\n  layer.succeedContext(Context.make(tracer.spanTag, span))\n\n/** @internal */\nexport const span = (\n  name: string,\n  options?: Tracer.SpanOptions & {\n    readonly onEnd?:\n      | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n      | undefined\n  }\n): Layer.Layer<Tracer.ParentSpan> => {\n  options = tracer.addSpanStackTrace(options) as any\n  return layer.scoped(\n    tracer.spanTag,\n    options?.onEnd\n      ? core.tap(\n        fiberRuntime.makeSpanScoped(name, options),\n        (span) => fiberRuntime.addFinalizer((exit) => options.onEnd!(span, exit))\n      )\n      : fiberRuntime.makeSpanScoped(name, options)\n  )\n}\n\n/** @internal */\nexport const setTracer = (tracer: Tracer.Tracer): Layer.Layer<never> =>\n  layer.scopedDiscard(fiberRuntime.withTracerScoped(tracer))\n","/**\n * A `Layer<ROut, E, RIn>` describes how to build one or more services in your\n * application. Services can be injected into effects via\n * `Effect.provideService`. Effects can require services via `Effect.service`.\n *\n * Layer can be thought of as recipes for producing bundles of services, given\n * their dependencies (other services).\n *\n * Construction of services can be effectful and utilize resources that must be\n * acquired and safely released when the services are done being utilized.\n *\n * By default layers are shared, meaning that if the same layer is used twice\n * the layer will only be allocated a single time.\n *\n * Because of their excellent composition properties, layers are the idiomatic\n * way in Effect-TS to create services that depend on other services.\n *\n * @since 2.0.0\n */\nimport type * as Cause from \"./Cause.js\"\nimport type * as Clock from \"./Clock.js\"\nimport type { ConfigProvider } from \"./ConfigProvider.js\"\nimport * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type * as Exit from \"./Exit.js\"\nimport type { FiberRef } from \"./FiberRef.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { clockTag } from \"./internal/clock.js\"\nimport * as core from \"./internal/core.js\"\nimport * as defaultServices from \"./internal/defaultServices.js\"\nimport * as fiberRuntime from \"./internal/fiberRuntime.js\"\nimport * as internal from \"./internal/layer.js\"\nimport * as circularLayer from \"./internal/layer/circular.js\"\nimport * as query from \"./internal/query.js\"\nimport type { LogLevel } from \"./LogLevel.js\"\nimport type * as Option from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type * as Request from \"./Request.js\"\nimport type * as Runtime from \"./Runtime.js\"\nimport type * as Schedule from \"./Schedule.js\"\nimport * as Scheduler from \"./Scheduler.js\"\nimport type * as Scope from \"./Scope.js\"\nimport type * as Tracer from \"./Tracer.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const LayerTypeId: unique symbol = internal.LayerTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type LayerTypeId = typeof LayerTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Layer<in ROut, out E = never, out RIn = never> extends Layer.Variance<ROut, E, RIn>, Pipeable {}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Layer {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<in ROut, out E, out RIn> {\n    readonly [LayerTypeId]: {\n      readonly _ROut: Types.Contravariant<ROut>\n      readonly _E: Types.Covariant<E>\n      readonly _RIn: Types.Covariant<RIn>\n    }\n  }\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Context<T extends Layer<never, any, any>> = [T] extends [Layer<infer _ROut, infer _E, infer _RIn>] ? _RIn\n    : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Error<T extends Layer<never, any, any>> = [T] extends [Layer<infer _ROut, infer _E, infer _RIn>] ? _E\n    : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Success<T extends Layer<never, any, any>> = [T] extends [Layer<infer _ROut, infer _E, infer _RIn>] ? _ROut\n    : never\n}\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const MemoMapTypeId: unique symbol = internal.MemoMapTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type MemoMapTypeId = typeof MemoMapTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface MemoMap {\n  readonly [MemoMapTypeId]: MemoMapTypeId\n\n  /** @internal */\n  readonly getOrElseMemoize: <RIn, E, ROut>(\n    layer: Layer<ROut, E, RIn>,\n    scope: Scope.Scope\n  ) => Effect.Effect<Context.Context<ROut>, E, RIn>\n}\n\n/**\n * Returns `true` if the specified value is a `Layer`, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isLayer: (u: unknown) => u is Layer<unknown, unknown, unknown> = internal.isLayer\n\n/**\n * Returns `true` if the specified `Layer` is a fresh version that will not be\n * shared, `false` otherwise.\n *\n * @since 2.0.0\n * @category getters\n */\nexport const isFresh: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => boolean = internal.isFresh\n\n/**\n * @since 3.3.0\n * @category tracing\n */\nexport const annotateLogs: {\n  (key: string, value: unknown): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  (values: Record<string, unknown>): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  <A, E, R>(self: Layer<A, E, R>, key: string, value: unknown): Layer<A, E, R>\n  <A, E, R>(self: Layer<A, E, R>, values: Record<string, unknown>): Layer<A, E, R>\n} = internal.annotateLogs\n\n/**\n * @since 3.3.0\n * @category tracing\n */\nexport const annotateSpans: {\n  (key: string, value: unknown): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  (values: Record<string, unknown>): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  <A, E, R>(self: Layer<A, E, R>, key: string, value: unknown): Layer<A, E, R>\n  <A, E, R>(self: Layer<A, E, R>, values: Record<string, unknown>): Layer<A, E, R>\n} = internal.annotateSpans\n\n/**\n * Builds a layer into a scoped value.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const build: <RIn, E, ROut>(\n  self: Layer<ROut, E, RIn>\n) => Effect.Effect<Context.Context<ROut>, E, Scope.Scope | RIn> = internal.build\n\n/**\n * Builds a layer into an `Effect` value. Any resources associated with this\n * layer will be released when the specified scope is closed unless their scope\n * has been extended. This allows building layers where the lifetime of some of\n * the services output by the layer exceed the lifetime of the effect the\n * layer is provided to.\n *\n * @since 2.0.0\n * @category destructors\n */\nexport const buildWithScope: {\n  (scope: Scope.Scope): <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Effect.Effect<Context.Context<ROut>, E, RIn>\n  <RIn, E, ROut>(self: Layer<ROut, E, RIn>, scope: Scope.Scope): Effect.Effect<Context.Context<ROut>, E, RIn>\n} = internal.buildWithScope\n\n/**\n * Recovers from all errors.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAll: {\n  <E, RIn2, E2, ROut2>(\n    onError: (error: E) => Layer<ROut2, E2, RIn2>\n  ): <RIn, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut & ROut2, E2, RIn2 | RIn>\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    self: Layer<ROut, E, RIn>,\n    onError: (error: E) => Layer<ROut2, E2, RIn2>\n  ): Layer<ROut & ROut2, E2, RIn | RIn2>\n} = internal.catchAll\n\n/**\n * Recovers from all errors.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const catchAllCause: {\n  <E, RIn2, E2, ROut2>(\n    onError: (cause: Cause.Cause<E>) => Layer<ROut2, E2, RIn2>\n  ): <RIn, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut & ROut2, E2, RIn2 | RIn>\n  <RIn, E, ROut, RIn2, E2, ROut22>(\n    self: Layer<ROut, E, RIn>,\n    onError: (cause: Cause.Cause<E>) => Layer<ROut22, E2, RIn2>\n  ): Layer<ROut & ROut22, E2, RIn | RIn2>\n} = internal.catchAllCause\n\n/**\n * Constructs a `Layer` that passes along the specified context as an\n * output.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const context: <R>() => Layer<R, never, R> = internal.context\n\n/**\n * Constructs a layer that dies with the specified defect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const die: (defect: unknown) => Layer<unknown> = internal.die\n\n/**\n * Constructs a layer that dies with the specified defect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const dieSync: (evaluate: LazyArg<unknown>) => Layer<unknown> = internal.dieSync\n\n/**\n * Replaces the layer's output with `void` and includes the layer only for its\n * side-effects.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const discard: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Layer<never, E, RIn> = internal.discard\n\n/**\n * Constructs a layer from the specified effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const effect: {\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ): <E, R>(effect: Effect.Effect<Context.Tag.Service<T>, E, R>) => Layer<Context.Tag.Identifier<T>, E, R>\n  <T extends Context.Tag<any, any>, E, R>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ): Layer<Context.Tag.Identifier<T>, E, R>\n} = internal.fromEffect\n\n/**\n * Constructs a layer from the specified effect discarding it's output.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const effectDiscard: <X, E, R>(effect: Effect.Effect<X, E, R>) => Layer<never, E, R> = internal.fromEffectDiscard\n\n/**\n * Constructs a layer from the specified effect, which must return one or more\n * services.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const effectContext: <A, E, R>(effect: Effect.Effect<Context.Context<A>, E, R>) => Layer<A, E, R> =\n  internal.fromEffectContext\n\n/**\n * A Layer that constructs an empty Context.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty: Layer<never> = internal.empty\n\n/**\n * Extends the scope of this layer, returning a new layer that when provided\n * to an effect will not immediately release its associated resources when\n * that effect completes execution but instead when the scope the resulting\n * effect depends on is closed.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const extendScope: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut, E, Scope.Scope | RIn> =\n  internal.extendScope\n\n/**\n * Constructs a layer that fails with the specified error.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fail: <E>(error: E) => Layer<unknown, E> = internal.fail\n\n/**\n * Constructs a layer that fails with the specified error.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failSync: <E>(evaluate: LazyArg<E>) => Layer<unknown, E> = internal.failSync\n\n/**\n * Constructs a layer that fails with the specified cause.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCause: <E>(cause: Cause.Cause<E>) => Layer<unknown, E> = internal.failCause\n\n/**\n * Constructs a layer that fails with the specified cause.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const failCauseSync: <E>(evaluate: LazyArg<Cause.Cause<E>>) => Layer<unknown, E> = internal.failCauseSync\n\n/**\n * Constructs a layer dynamically based on the output of this layer.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatMap: {\n  <A, A2, E2, R2>(\n    f: (context: Context.Context<A>) => Layer<A2, E2, R2>\n  ): <E, R>(self: Layer<A, E, R>) => Layer<A2, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Layer<A, E, R>,\n    f: (context: Context.Context<A>) => Layer<A2, E2, R2>\n  ): Layer<A2, E | E2, R | R2>\n} = internal.flatMap\n\n/**\n * Flattens layers nested in the context of an effect.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const flatten: {\n  <I, A, E2, R2>(tag: Context.Tag<I, Layer<A, E2, R2>>): <E, R>(self: Layer<I, E, R>) => Layer<A, E2 | E, R2 | R>\n  <I, E, R, A, E2, R2>(self: Layer<I, E, R>, tag: Context.Tag<I, Layer<A, E2, R2>>): Layer<A, E | E2, R | R2>\n} = internal.flatten\n\n/**\n * Creates a fresh version of this layer that will not be shared.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const fresh: <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R> = internal.fresh\n\nconst fromFunction: <A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n  tagA: A,\n  tagB: B,\n  f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n) => Layer<Context.Tag.Identifier<B>, never, Context.Tag.Identifier<A>> = internal.fromFunction\n\nexport {\n  /**\n   * Constructs a layer from the context using the specified function.\n   *\n   * @since 2.0.0\n   * @category constructors\n   */\n  fromFunction as function\n}\n\n/**\n * Builds this layer and uses it until it is interrupted. This is useful when\n * your entire application is a layer, such as an HTTP server.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const launch: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Effect.Effect<never, E, RIn> = internal.launch\n\n/**\n * Returns a new layer whose output is mapped by the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const map: {\n  <A, B>(f: (context: Context.Context<A>) => Context.Context<B>): <E, R>(self: Layer<A, E, R>) => Layer<B, E, R>\n  <A, E, R, B>(self: Layer<A, E, R>, f: (context: Context.Context<A>) => Context.Context<B>): Layer<B, E, R>\n} = internal.map\n\n/**\n * Returns a layer with its error channel mapped using the specified function.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const mapError: {\n  <E, E2>(f: (error: E) => E2): <A, R>(self: Layer<A, E, R>) => Layer<A, E2, R>\n  <A, E, R, E2>(self: Layer<A, E, R>, f: (error: E) => E2): Layer<A, E2, R>\n} = internal.mapError\n\n/**\n * Feeds the error or output services of this layer into the input of either\n * the specified `failure` or `success` layers, resulting in a new layer with\n * the inputs of this layer, and the error or outputs of the specified layer.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const match: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (error: E) => Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer<A3, E3, R3>\n    }\n  ): <R>(self: Layer<A, E, R>) => Layer<A2 & A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Layer<A, E, R>,\n    options: {\n      readonly onFailure: (error: E) => Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer<A3, E3, R3>\n    }\n  ): Layer<A2 & A3, E2 | E3, R | R2 | R3>\n} = internal.match\n\n/**\n * Feeds the error or output services of this layer into the input of either\n * the specified `failure` or `success` layers, resulting in a new layer with\n * the inputs of this layer, and the error or outputs of the specified layer.\n *\n * @since 2.0.0\n * @category folding\n */\nexport const matchCause: {\n  <E, A2, E2, R2, A, A3, E3, R3>(\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer<A3, E3, R3>\n    }\n  ): <R>(self: Layer<A, E, R>) => Layer<A2 & A3, E2 | E3, R2 | R3 | R>\n  <A, E, R, A2, E2, R2, A3, E3, R3>(\n    self: Layer<A, E, R>,\n    options: {\n      readonly onFailure: (cause: Cause.Cause<E>) => Layer<A2, E2, R2>\n      readonly onSuccess: (context: Context.Context<A>) => Layer<A3, E3, R3>\n    }\n  ): Layer<A2 & A3, E2 | E3, R | R2 | R3>\n} = internal.matchCause\n\n/**\n * Returns a scoped effect that, if evaluated, will return the lazily computed\n * result of this layer.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const memoize: <RIn, E, ROut>(\n  self: Layer<ROut, E, RIn>\n) => Effect.Effect<Layer<ROut, E, RIn>, never, Scope.Scope> = internal.memoize\n\n/**\n * Merges this layer with the specified layer concurrently, producing a new layer with combined input and output types.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const merge: {\n  <RIn2, E2, ROut2>(\n    that: Layer<ROut2, E2, RIn2>\n  ): <RIn, E1, ROut>(self: Layer<ROut, E1, RIn>) => Layer<ROut2 | ROut, E2 | E1, RIn2 | RIn>\n  <RIn, E1, ROut, RIn2, E2, ROut2>(\n    self: Layer<ROut, E1, RIn>,\n    that: Layer<ROut2, E2, RIn2>\n  ): Layer<ROut | ROut2, E1 | E2, RIn | RIn2>\n} = internal.merge\n\n/**\n * Combines all the provided layers concurrently, creating a new layer with merged input, error, and output types.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const mergeAll: <Layers extends [Layer<never, any, any>, ...Array<Layer<never, any, any>>]>(\n  ...layers: Layers\n) => Layer<\n  { [k in keyof Layers]: Layer.Success<Layers[k]> }[number],\n  { [k in keyof Layers]: Layer.Error<Layers[k]> }[number],\n  { [k in keyof Layers]: Layer.Context<Layers[k]> }[number]\n> = internal.mergeAll\n\n/**\n * Translates effect failure into death of the fiber, making all failures\n * unchecked and not a part of the type of the layer.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orDie: <A, E, R>(self: Layer<A, E, R>) => Layer<A, never, R> = internal.orDie\n\n/**\n * Executes this layer and returns its output, if it succeeds, but otherwise\n * executes the specified layer.\n *\n * @since 2.0.0\n * @category error handling\n */\nexport const orElse: {\n  <A2, E2, R2>(that: LazyArg<Layer<A2, E2, R2>>): <A, E, R>(self: Layer<A, E, R>) => Layer<A & A2, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(self: Layer<A, E, R>, that: LazyArg<Layer<A2, E2, R2>>): Layer<A & A2, E | E2, R | R2>\n} = internal.orElse\n\n/**\n * Returns a new layer that produces the outputs of this layer but also\n * passes through the inputs.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const passthrough: <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Layer<RIn | ROut, E, RIn> = internal.passthrough\n\n/**\n * Projects out part of one of the services output by this layer using the\n * specified function.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const project: {\n  <A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n    tagA: A,\n    tagB: B,\n    f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n  ): <RIn, E>(self: Layer<Context.Tag.Identifier<A>, E, RIn>) => Layer<Context.Tag.Identifier<B>, E, RIn>\n  <RIn, E, A extends Context.Tag<any, any>, B extends Context.Tag<any, any>>(\n    self: Layer<Context.Tag.Identifier<A>, E, RIn>,\n    tagA: A,\n    tagB: B,\n    f: (a: Context.Tag.Service<A>) => Context.Tag.Service<B>\n  ): Layer<Context.Tag.Identifier<B>, E, RIn>\n} = internal.project\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const locallyEffect: {\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    f: (_: Effect.Effect<RIn, E, Context.Context<ROut>>) => Effect.Effect<RIn2, E2, Context.Context<ROut2>>\n  ): (self: Layer<ROut, E, RIn>) => Layer<ROut2, E2, RIn2>\n  <RIn, E, ROut, RIn2, E2, ROut2>(\n    self: Layer<ROut, E, RIn>,\n    f: (_: Effect.Effect<RIn, E, Context.Context<ROut>>) => Effect.Effect<RIn2, E2, Context.Context<ROut2>>\n  ): Layer<ROut2, E2, RIn2>\n} = internal.locallyEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const locally: {\n  <X>(\n    ref: FiberRef<X>,\n    value: X\n  ): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  <A, E, R, X>(\n    self: Layer<A, E, R>,\n    ref: FiberRef<X>,\n    value: X\n  ): Layer<A, E, R>\n} = internal.fiberRefLocally\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const locallyWith: {\n  <X>(ref: FiberRef<X>, value: (_: X) => X): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, R>\n  <A, E, R, X>(self: Layer<A, E, R>, ref: FiberRef<X>, value: (_: X) => X): Layer<A, E, R>\n} = internal.fiberRefLocallyWith\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const locallyScoped: <A>(self: FiberRef<A>, value: A) => Layer<never> = internal.fiberRefLocallyScoped\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const fiberRefLocallyScopedWith: <A>(self: FiberRef<A>, value: (_: A) => A) => Layer<never> =\n  internal.fiberRefLocallyScopedWith\n\n/**\n * Retries constructing this layer according to the specified schedule.\n *\n * @since 2.0.0\n * @category retrying\n */\nexport const retry: {\n  <X, E, RIn2>(\n    schedule: Schedule.Schedule<X, E, RIn2>\n  ): <ROut, RIn>(self: Layer<ROut, E, RIn>) => Layer<ROut, E, RIn2 | RIn>\n  <ROut, E, RIn, X, RIn2>(\n    self: Layer<ROut, E, RIn>,\n    schedule: Schedule.Schedule<X, E, RIn2>\n  ): Layer<ROut, E, RIn | RIn2>\n} = internal.retry\n\n/**\n * A layer that constructs a scope and closes it when the workflow the layer\n * is provided to completes execution, whether by success, failure, or\n * interruption. This can be used to close a scope when providing a layer to a\n * workflow.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const scope: Layer<Scope.CloseableScope> = internal.scope\n\n/**\n * Constructs a layer from the specified scoped effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const scoped: {\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ): <E, R>(\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ) => Layer<Context.Tag.Identifier<T>, E, Exclude<R, Scope.Scope>>\n  <T extends Context.Tag<any, any>, E, R>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E, R>\n  ): Layer<Context.Tag.Identifier<T>, E, Exclude<R, Scope.Scope>>\n} = internal.scoped\n\n/**\n * Constructs a layer from the specified scoped effect.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const scopedDiscard: <X, E, R>(effect: Effect.Effect<X, E, R>) => Layer<never, E, Exclude<R, Scope.Scope>> =\n  internal.scopedDiscard\n\n/**\n * Constructs a layer from the specified scoped effect, which must return one\n * or more services.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const scopedContext: <A, E, R>(\n  effect: Effect.Effect<Context.Context<A>, E, R>\n) => Layer<A, E, Exclude<R, Scope.Scope>> = internal.scopedContext\n\n/**\n * Constructs a layer that accesses and returns the specified service from the\n * context.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const service: <T extends Context.Tag<any, any>>(\n  tag: T\n) => Layer<Context.Tag.Identifier<T>, never, Context.Tag.Identifier<T>> = internal.service\n\n/**\n * Constructs a layer from the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeed: {\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ): (resource: Context.Tag.Service<T>) => Layer<Context.Tag.Identifier<T>>\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ): Layer<Context.Tag.Identifier<T>>\n} = internal.succeed\n\n/**\n * Constructs a layer from the specified value, which must return one or more\n * services.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const succeedContext: <A>(context: Context.Context<A>) => Layer<A> = internal.succeedContext\n\n/**\n * Lazily constructs a layer. This is useful to avoid infinite recursion when\n * creating layers that refer to themselves.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const suspend: <RIn, E, ROut>(evaluate: LazyArg<Layer<ROut, E, RIn>>) => Layer<ROut, E, RIn> = internal.suspend\n\n/**\n * Lazily constructs a layer from the specified value.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const sync: {\n  <T extends Context.Tag<any, any>>(\n    tag: T\n  ): (evaluate: LazyArg<Context.Tag.Service<T>>) => Layer<Context.Tag.Identifier<T>>\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    evaluate: LazyArg<Context.Tag.Service<T>>\n  ): Layer<Context.Tag.Identifier<T>>\n} = internal.sync\n\n/**\n * Lazily constructs a layer from the specified value, which must return one or more\n * services.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const syncContext: <A>(evaluate: LazyArg<Context.Context<A>>) => Layer<A> = internal.syncContext\n\n/**\n * Performs the specified effect if this layer succeeds.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tap: {\n  <ROut, XR extends ROut, RIn2, E2, X>(\n    f: (context: Context.Context<XR>) => Effect.Effect<X, E2, RIn2>\n  ): <RIn, E>(self: Layer<ROut, E, RIn>) => Layer<ROut, E2 | E, RIn2 | RIn>\n  <RIn, E, ROut, XR extends ROut, RIn2, E2, X>(\n    self: Layer<ROut, E, RIn>,\n    f: (context: Context.Context<XR>) => Effect.Effect<X, E2, RIn2>\n  ): Layer<ROut, E | E2, RIn | RIn2>\n} = internal.tap\n\n/**\n * Performs the specified effect if this layer fails.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapError: {\n  <E, XE extends E, RIn2, E2, X>(\n    f: (e: XE) => Effect.Effect<X, E2, RIn2>\n  ): <RIn, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut, E | E2, RIn2 | RIn>\n  <RIn, E, XE extends E, ROut, RIn2, E2, X>(\n    self: Layer<ROut, E, RIn>,\n    f: (e: XE) => Effect.Effect<X, E2, RIn2>\n  ): Layer<ROut, E | E2, RIn | RIn2>\n} = internal.tapError\n\n/**\n * Performs the specified effect if this layer fails.\n *\n * @since 2.0.0\n * @category sequencing\n */\nexport const tapErrorCause: {\n  <E, XE extends E, RIn2, E2, X>(\n    f: (cause: Cause.Cause<XE>) => Effect.Effect<X, E2, RIn2>\n  ): <RIn, ROut>(self: Layer<ROut, E, RIn>) => Layer<ROut, E | E2, RIn2 | RIn>\n  <RIn, E, XE extends E, ROut, RIn2, E2, X>(\n    self: Layer<ROut, E, RIn>,\n    f: (cause: Cause.Cause<XE>) => Effect.Effect<X, E2, RIn2>\n  ): Layer<ROut, E | E2, RIn | RIn2>\n} = internal.tapErrorCause\n\n/**\n * Converts a layer that requires no services into a scoped runtime, which can\n * be used to execute effects.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const toRuntime: <RIn, E, ROut>(\n  self: Layer<ROut, E, RIn>\n) => Effect.Effect<Runtime.Runtime<ROut>, E, Scope.Scope | RIn> = internal.toRuntime\n\n/**\n * Converts a layer that requires no services into a scoped runtime, which can\n * be used to execute effects.\n *\n * @since 2.0.0\n * @category conversions\n */\nexport const toRuntimeWithMemoMap: {\n  (\n    memoMap: MemoMap\n  ): <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Effect.Effect<Runtime.Runtime<ROut>, E, Scope.Scope | RIn>\n  <RIn, E, ROut>(\n    self: Layer<ROut, E, RIn>,\n    memoMap: MemoMap\n  ): Effect.Effect<Runtime.Runtime<ROut>, E, Scope.Scope | RIn>\n} = internal.toRuntimeWithMemoMap\n\n/**\n * Feeds the output services of this builder into the input of the specified\n * builder, resulting in a new builder with the inputs of this builder as\n * well as any leftover inputs, and the outputs of the specified builder.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const provide: {\n  <RIn, E, ROut>(\n    self: Layer<ROut, E, RIn>\n  ): <RIn2, E2, ROut2>(that: Layer<ROut2, E2, RIn2>) => Layer<ROut2, E | E2, RIn | Exclude<RIn2, ROut>>\n  <RIn2, E2, ROut2, RIn, E, ROut>(\n    that: Layer<ROut2, E2, RIn2>,\n    self: Layer<ROut, E, RIn>\n  ): Layer<ROut2, E2 | E, RIn | Exclude<RIn2, ROut>>\n} = internal.provide\n\n/**\n * Feeds the output services of this layer into the input of the specified\n * layer, resulting in a new layer with the inputs of this layer, and the\n * outputs of both layers.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const provideMerge: {\n  <RIn, E, ROut>(\n    self: Layer<ROut, E, RIn>\n  ): <RIn2, E2, ROut2>(that: Layer<ROut2, E2, RIn2>) => Layer<ROut | ROut2, E | E2, RIn | Exclude<RIn2, ROut>>\n  <RIn2, E2, ROut2, RIn, E, ROut>(\n    that: Layer<ROut2, E2, RIn2>,\n    self: Layer<ROut, E, RIn>\n  ): Layer<ROut2 | ROut, E2 | E, RIn | Exclude<RIn2, ROut>>\n} = internal.provideMerge\n\n/**\n * Combines this layer with the specified layer concurrently, creating a new layer with merged input types and\n * combined output types using the provided function.\n *\n * @since 2.0.0\n * @category zipping\n */\nexport const zipWith: {\n  <B, E2, R2, A, C>(\n    that: Layer<B, E2, R2>,\n    f: (a: Context.Context<A>, b: Context.Context<B>) => Context.Context<C>\n  ): <E, R>(self: Layer<A, E, R>) => Layer<C, E2 | E, R2 | R>\n  <A, E, R, B, E2, R2, C>(\n    self: Layer<A, E, R>,\n    that: Layer<B, E2, R2>,\n    f: (a: Context.Context<A>, b: Context.Context<B>) => Context.Context<C>\n  ): Layer<C, E | E2, R | R2>\n} = internal.zipWith\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const unwrapEffect: <A, E1, R1, E, R>(self: Effect.Effect<Layer<A, E1, R1>, E, R>) => Layer<A, E | E1, R | R1> =\n  internal.unwrapEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const unwrapScoped: <A, E1, R1, E, R>(\n  self: Effect.Effect<Layer<A, E1, R1>, E, R>\n) => Layer<A, E | E1, R1 | Exclude<R, Scope.Scope>> = internal.unwrapScoped\n\n/**\n * @since 2.0.0\n * @category clock\n */\nexport const setClock: <A extends Clock.Clock>(clock: A) => Layer<never> = <A extends Clock.Clock>(\n  clock: A\n): Layer<never> =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(clockTag, clock))\n  )\n\n/**\n * Sets the current `ConfigProvider`.\n *\n * @since 2.0.0\n * @category config\n */\nexport const setConfigProvider: (configProvider: ConfigProvider) => Layer<never> = circularLayer.setConfigProvider\n\n/**\n * Adds the provided span to the span stack.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const parentSpan: (span: Tracer.AnySpan) => Layer<Tracer.ParentSpan> = circularLayer.parentSpan\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const setRequestBatching: (requestBatching: boolean) => Layer<never> = (\n  requestBatching: boolean\n) =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(core.currentRequestBatching, requestBatching)\n  )\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const setRequestCaching: (requestCaching: boolean) => Layer<never> = (\n  requestCaching: boolean\n) =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(query.currentCacheEnabled, requestCaching)\n  )\n\n/**\n * @since 2.0.0\n * @category requests & batching\n */\nexport const setRequestCache: {\n  <E, R>(\n    cache: Effect.Effect<Request.Cache, E, R>\n  ): Layer<never, E, Exclude<R, Scope.Scope>>\n  (\n    cache: Request.Cache\n  ): Layer<never>\n} = (<E, R>(cache: Request.Cache | Effect.Effect<Request.Cache, E, R>) =>\n  scopedDiscard(\n    core.isEffect(cache) ?\n      core.flatMap(cache, (x) => fiberRuntime.fiberRefLocallyScoped(query.currentCache as any, x)) :\n      fiberRuntime.fiberRefLocallyScoped(query.currentCache as any, cache)\n  )) as any\n\n/**\n * @since 2.0.0\n * @category scheduler\n */\nexport const setScheduler: (scheduler: Scheduler.Scheduler) => Layer<never> = (\n  scheduler: Scheduler.Scheduler\n): Layer<never> =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(Scheduler.currentScheduler, scheduler)\n  )\n\n/**\n * Create and add a span to the current span stack.\n *\n * The span is ended when the Layer is released.\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const span: (\n  name: string,\n  options?: Tracer.SpanOptions & {\n    readonly onEnd?:\n      | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n      | undefined\n  }\n) => Layer<Tracer.ParentSpan> = circularLayer.span\n\n/**\n * Create a Layer that sets the current Tracer\n *\n * @since 2.0.0\n * @category tracing\n */\nexport const setTracer: (tracer: Tracer.Tracer) => Layer<never> = circularLayer.setTracer\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const setTracerEnabled: (enabled: boolean) => Layer<never> = (enabled: boolean) =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(core.currentTracerEnabled, enabled)\n  )\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const setTracerTiming: (enabled: boolean) => Layer<never> = (enabled: boolean) =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(core.currentTracerTimingEnabled, enabled)\n  )\n\n/**\n * @since 2.0.0\n * @category logging\n */\nexport const setUnhandledErrorLogLevel: (level: Option.Option<LogLevel>) => Layer<never> = (\n  level: Option.Option<LogLevel>\n): Layer<never> =>\n  scopedDiscard(\n    fiberRuntime.fiberRefLocallyScoped(core.currentUnhandledErrorLogLevel, level)\n  )\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withSpan: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions & {\n      readonly onEnd?:\n        | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n        | undefined\n    }\n  ): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Layer<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions & {\n      readonly onEnd?:\n        | ((span: Tracer.Span, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<void>)\n        | undefined\n    }\n  ): Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n} = internal.withSpan\n\n/**\n * @since 2.0.0\n * @category tracing\n */\nexport const withParentSpan: {\n  (span: Tracer.AnySpan): <A, E, R>(self: Layer<A, E, R>) => Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(self: Layer<A, E, R>, span: Tracer.AnySpan): Layer<A, E, Exclude<R, Tracer.ParentSpan>>\n} = internal.withParentSpan\n\n// -----------------------------------------------------------------------------\n// memo map\n// -----------------------------------------------------------------------------\n\n/**\n * Constructs a `MemoMap` that can be used to build additional layers.\n *\n * @since 2.0.0\n * @category memo map\n */\nexport const makeMemoMap: Effect.Effect<MemoMap> = internal.makeMemoMap\n\n/**\n * Builds a layer into an `Effect` value, using the specified `MemoMap` to memoize\n * the layer construction.\n *\n * @since 2.0.0\n * @category memo map\n */\nexport const buildWithMemoMap: {\n  (\n    memoMap: MemoMap,\n    scope: Scope.Scope\n  ): <RIn, E, ROut>(self: Layer<ROut, E, RIn>) => Effect.Effect<Context.Context<ROut>, E, RIn>\n  <RIn, E, ROut>(\n    self: Layer<ROut, E, RIn>,\n    memoMap: MemoMap,\n    scope: Scope.Scope\n  ): Effect.Effect<Context.Context<ROut>, E, RIn>\n} = internal.buildWithMemoMap\n"],"names":["NanoIdGeneratorLive","createNanoIdGeneratorLive","customAlphabet","nanoid","AppStateLive","AppState","init","reloadUrl","onRequestSync","document","reset","localStorageKey","replaceLocation","location","replace","timer","window","addEventListener","e","key","handleRequestSyncEvents","setTimeout","visibilityState","localStorage","setItem","Date","now","toString","SyncLockLive","SyncLock","tryAcquire","lockName","getLockName","acquire","resume","navigator","locks","request","ifAvailable","lock","Promise","resolve","pipe","release","SyncLockAlreadySyncingError","circular","SynchronizedTypeId","make","makeSynchronized","get","ref","getAndUpdateEffect","getAndSet","getAndUpdate","internal","getAndUpdateSome","modifySome","set","setAndGet","update","updateAndGet","updateSome","updateSomeAndGet","updateSomeAndGetEffectSynchronized","unsafeMakeSynchronized","selectOwner","sql","createMessageTable","createMessageTableIndex","createOwnerTable","insertOwner","selectOwnerTimestampAndMerkleTree","selectLastTimestampForTableRowColumn","insertIntoMessagesIfNew","updateOwnerTimestampAndMerkleTree","selectMessagesToSync","Index","name","DbFactory","Context","Tag","createDb","Effect","gen","createSqlite","Sqlite","SqliteFactory","createSync","Sync","SyncFactory","initContext","empty","add","NanoIdGenerator","Time","afterInitContext","Deferred","afterInit","options","effect","flatMap","context","sqlite","transaction","provide","queryRowsRef","Map","schema","initialData","onError","onSyncStateChange","onReceive","mnemonic","logDebug","contextWithSqlite","owner","getSchema","tap","ensureSchema","currentSchema","tables","map","t","includes","readOwner","createOwner","applyMutations","sync","unsafeDone","succeed","Owner","Callbacks","loadQueries","queries","zipRight","mutate","mutations","queriesToRefresh","time","toSyncMutations","localOnlyMutations","mutation","table","startsWith","mutationToNewMessages","some","column","value","exec","parameters","id","messages","message","upsertValueIntoTableRowColumn","length","forkSync","resetOwner","logTrace","dropAllTables","restoreOwner","exportDatabase","export","GenericTag","previousState","forEach","query","sqliteQuery","deserializeQuery","maybeExplainQueryPlan","rows","queriesRows","currentState","patches","makePatches","logExplainQueryPlan","Console","log","drawSqliteQueryPlan","constVoid","_","trim","row","tableName","columnName","has","push","globalThis","Array","from","columns","indexes","result","newSchema","currentTable","find","newColumn","filter","c","join","indexEquivalence","indexToDrop","newIndex","self","that","encryptionKey","all","makeOwner","makeInitialTimestamp","initialTimestampString","timestampToString","merkleTreeToString","initialMerkleTree","timestamp","merkleTree","readTimestampAndMerkleTree","nextTimestamp","mapAccum","currentTimestamp","newMessage","sendTimestamp","nextMerkleTree","applyMessages","writeTimestampAndMerkleTree","unsafeTimestampFromString","Object","entries","values","undefined","isInsert","Option","none","cast","messageTimestamp","lastTimestamp","millis","changes","insertIntoMerkleTree","insert","catchSomeDefect","error","SqliteNoSuchTableOrColumnError","ensureSchemaByNewMessages","tablesMap","concat","syncLock","matchEffect","onFailure","onSuccess","syncLoop","scoped","forkDaemon","callbacks","syncDataRef","a","Ref","_tag","handleSyncResult","repeat","schedule","Schedule","recurs","until","match","onNone","onSome","syncData","catchAllDefect","fail","makeUnexpectedError","ensureTransferableError","catchTag","state","catchAll","current","reduce","local","receiveTimestamp","remote","diffMerkleTrees","diff","makeSyncTimestamp","option","serializeQuery","p","Predicate","isUint8Array","isJsonObjectOrArray","json","JSON","stringify","serializedSqliteQuery","parse","Uint8Array","_emptyRows","emptyRows","queryResultCache","WeakMap","queryResultFromRows","queryResult","notSupportedPlatformWorker","applyPatches","next","patch","op","index","previousRows","nextRows","replaceAtPatches","i","previousRow","nextRow","areEqual","b","aIsUint8Array","bIsUint8Array","aIsArray","bIsArray","aKeys","keys","bKeys","AlterTableNode","freeze","is","node","kind","create","cloneWithTableProps","props","cloneWithColumnAlteration","columnAlteration","columnAlterations","CreateIndexNode","IdentifierNode","cloneWith","cloneWithColumns","CreateSchemaNode","params","createSchema","ON_COMMIT_ACTIONS","CreateTableNode","cloneWithColumn","createTable","cloneWithConstraint","constraint","constraints","cloneWithFrontModifier","modifier","frontModifiers","cloneWithEndModifier","endModifiers","DropIndexNode","SchemableIdentifierNode","dropIndex","DropSchemaNode","dropSchema","DropTableNode","AddColumnNode","ColumnDefinitionNode","dataType","ColumnNode","DropColumnNode","RenameColumnNode","renameTo","CheckConstraintNode","expression","constraintName","ON_MODIFY_FOREIGN_ACTIONS","ReferencesNode","cloneWithOnDelete","references","onDelete","cloneWithOnUpdate","onUpdate","parseDefaultValueExpression","isOperationNodeSource","toOperationNode","ValueNode","createImmediate","GeneratedNode","createWithExpression","always","DefaultValueNode","defaultValue","parseOnModifyForeignAction","action","Error","ColumnDefinitionBuilder","constructor","this","autoIncrement","identity","primaryKey","parseStringReference","SelectAllNode","unique","notNull","unsigned","defaultTo","check","generatedAlwaysAs","generated","generatedAlwaysAsIdentity","generatedByDefaultAsIdentity","byDefault","stored","modifyFront","nullsNotDistinct","ifNotExists","modifyEnd","$call","func","preventAwait","ModifyColumnNode","ForeignKeyConstraintNode","sourceColumns","targetTable","targetColumns","ForeignKeyConstraintBuilder","AddConstraintNode","UniqueConstraintNode","DropConstraintNode","dropConstraint","AlterColumnNode","prop","AlterColumnBuilder","setDataType","AlteredColumnBuilder","parseDataTypeExpression","setDefault","dropDefault","setNotNull","dropNotNull","alterColumnNode","AlterTableExecutor","executor","transformQuery","queryId","compile","compileQuery","execute","executeQuery","AlterTableAddForeignKeyConstraintBuilder","constraintBuilder","addConstraint","AlterTableDropConstraintBuilder","ifExists","cascade","restrict","PrimaryConstraintNode","AddIndexNode","AlterTableAddIndexBuilder","addIndex","parseOrderedColumnName","using","indexType","RawNode","createWithSql","UniqueConstraintNodeBuilder","AlterTableBuilder","newTableName","parseTable","setSchema","alterColumn","alteration","builder","AlterTableColumnAlteringBuilder","dropColumn","renameColumn","addColumn","build","noop","modifyColumn","addUniqueConstraint","uniqueConstraintBuilder","addCheckConstraint","checkExpression","addForeignKeyConstraint","addPrimaryKeyConstraint","indexName","ImmediateValueTransformer","OperationNodeTransformer","transformValue","super","immediate","CreateIndexBuilder","on","where","args","transformer","QueryNode","cloneWithWhere","transformNode","parseValueBinaryOperationOrExpression","CreateSchemaBuilder","parseOnCommitAction","CreateTableBuilder","temporary","onCommit","columnBuilder","as","selectQuery","parseExpression","DropIndexBuilder","DropSchemaBuilder","DropTableBuilder","CreateViewNode","createView","ImmediateValuePlugin","transformResult","CreateViewBuilder","materialized","orReplace","parseColumnName","queryNode","withPlugin","DropViewNode","dropView","DropViewBuilder","CreateTypeNode","cloneWithEnum","createType","enum","ValueListNode","CreateTypeBuilder","asEnum","DropTypeNode","dropType","DropTypeBuilder","parseSchemableIdentifier","parts","split","createWithSchema","str","SchemaModule","createQueryId","dropTable","createIndex","alterTable","viewName","typeName","plugin","withoutPlugins","withSchema","withPluginAtFront","WithSchemaPlugin","DynamicModule","reference","DynamicReferenceBuilder","DefaultConnectionProvider","driver","provideConnection","consumer","connection","acquireConnection","releaseConnection","DefaultQueryExecutor","QueryExecutorBase","compiler","adapter","connectionProvider","plugins","withPlugins","withConnectionProvider","performanceNow","performance","isFunction","RuntimeDriver","WeakSet","then","catch","err","reject","beginTransaction","settings","commitTransaction","rollbackTransaction","destroy","isLevelEnabled","async","compiledQuery","caughtError","startTime","call","level","queryDurationMillis","ignoreError","SingleConnectionProvider","finally","runner","TRANSACTION_ISOLATION_LEVELS","Log","config","defaultLogger","getEvent","event","console","toFixed","stack","Kysely","QueryCreator","superProps","obj","isObject","dialect","createDriver","createQueryCompiler","createAdapter","runtimeDriver","dynamic","introspection","createIntrospector","CaseBuilder","CaseNode","isUndefined","fn","createFunctionModule","TransactionBuilder","ConnectionBuilder","withTables","isTransaction","getExecutor","Transaction","callback","db","setIsolationLevel","isolationLevel","kyselyProps","validateTransactionSettings","DialectAdapterBase","supportsCreateIfNotExists","supportsTransactionalDdl","supportsReturning","supportsOutput","SqliteAdapter","acquireMigrationLock","_db","_opt","releaseMigrationLock","DummyDriver","DummyConnection","streamQuery","OperationNodeVisitor","nodeStack","parentNode","AliasNode","visitAlias","bind","visitColumn","visitIdentifier","visitSchemableIdentifier","visitRaw","ReferenceNode","visitReference","SelectQueryNode","visitSelectQuery","SelectionNode","visitSelection","TableNode","visitTable","FromNode","visitFrom","visitSelectAll","AndNode","visitAnd","OrNode","visitOr","visitValue","visitValueList","PrimitiveValueListNode","visitPrimitiveValueList","ParensNode","visitParens","JoinNode","visitJoin","OperatorNode","visitOperator","WhereNode","visitWhere","InsertQueryNode","visitInsertQuery","DeleteQueryNode","visitDeleteQuery","ReturningNode","visitReturning","visitCreateTable","visitAddColumn","visitColumnDefinition","visitDropTable","DataTypeNode","visitDataType","OrderByNode","visitOrderBy","OrderByItemNode","visitOrderByItem","GroupByNode","visitGroupBy","GroupByItemNode","visitGroupByItem","UpdateQueryNode","visitUpdateQuery","ColumnUpdateNode","visitColumnUpdate","LimitNode","visitLimit","OffsetNode","visitOffset","OnConflictNode","visitOnConflict","OnDuplicateKeyNode","visitOnDuplicateKey","visitCreateIndex","visitDropIndex","ListNode","visitList","PrimaryKeyConstraintNode","visitPrimaryKeyConstraint","visitUniqueConstraint","visitReferences","visitCheckConstraint","WithNode","visitWith","CommonTableExpressionNode","visitCommonTableExpression","CommonTableExpressionNameNode","visitCommonTableExpressionName","HavingNode","visitHaving","visitCreateSchema","visitDropSchema","visitAlterTable","visitDropColumn","visitRenameColumn","visitAlterColumn","visitModifyColumn","visitAddConstraint","visitDropConstraint","visitForeignKeyConstraint","visitCreateView","visitDropView","visitGenerated","visitDefaultValue","OnNode","visitOn","ValuesNode","visitValues","SelectModifierNode","visitSelectModifier","visitCreateType","visitDropType","ExplainNode","visitExplain","DefaultInsertValueNode","visitDefaultInsertValue","AggregateFunctionNode","visitAggregateFunction","OverNode","visitOver","PartitionByNode","visitPartitionBy","PartitionByItemNode","visitPartitionByItem","SetOperationNode","visitSetOperation","BinaryOperationNode","visitBinaryOperation","UnaryOperationNode","visitUnaryOperation","UsingNode","visitUsing","FunctionNode","visitFunction","visitCase","WhenNode","visitWhen","JSONReferenceNode","visitJSONReference","JSONPathNode","visitJSONPath","JSONPathLegNode","visitJSONPathLeg","JSONOperatorChainNode","visitJSONOperatorChain","TupleNode","visitTuple","MergeQueryNode","visitMergeQuery","MatchedNode","visitMatched","visitAddIndex","CastNode","visitCast","FetchNode","visitFetch","TopNode","visitTop","OutputNode","visitOutput","visitNode","pop","DefaultQueryCompiler","numParameters","splice","getSql","wrapInParens","explain","append","with","distinctOn","compileDistinctOn","compileList","top","selections","joins","groupBy","having","setOperations","orderBy","limit","offset","fetch","sortSelectModifiers","froms","selection","expressions","nodes","separator","lastIndex","rootQueryNode","isSubQuery","ignore","into","output","defaultValues","onConflict","onDuplicateKey","returning","alias","getLeftIdentifierWrapper","compileUnwrappedIdentifier","getRightIdentifierWrapper","isString","sanitizeIdentifier","left","right","appendImmediateValue","appendValue","JOIN_TYPE_SQL","joinType","sqlFragments","operator","identifier","getAutoIncrement","items","direction","updates","indexExpression","indexWhere","doNothing","updateWhere","recursive","isBoolean","compileColumnAlterations","announcesNewColumnDataType","dataTypeExpression","rawModifier","SELECT_MODIFIER_SQL","of","format","getLeftExplainOptionsWrapper","getExplainOptionsDelimiter","getExplainOptionAssignment","getRightExplainOptionsWrapper","distinct","aggregated","over","partitionBy","leftOperand","rightOperand","isMinusOperator","operand","arguments","when","else","isStatement","condition","traversal","inOperator","pathLeg","pathLegs","isArrayLocation","type","String","len","whens","not","bySource","rowCount","modifiers","parameter","addParameter","getCurrentParameterPlaceholder","leftWrap","rightWrap","sanitized","isNumber","isNull","isDate","toISOString","isBigInt","arr","sort","SELECT_MODIFIER_PRIORITY","ForKeyShare","ForNoKeyUpdate","ForUpdate","ForShare","NoWait","SkipLocked","Distinct","InnerJoin","LeftJoin","RightJoin","FullJoin","LateralInnerJoin","LateralLeftJoin","Using","ID_WRAP_REGEX","SqliteQueryCompiler","syncTimeout","lockTimeout","socketTimeout","isLocked","socket","processWebsocketEvent","data","clearTimeout","refreshQueries","createSocket","externalWebsocketConnection","send","channelId","enableWebsocketConnection","WebSocket","syncUrl","onerror","onclose","onopen","EvoluFactory","Common","Layer","flushSync","serviceOption","FlushSync","getOrElse","Db","instances","createEvolu","runtime","createRuntime","defaultConfig","dbSchema","schemaToTables","evolu","runSync","getPropertySignatures","Record","toEntries","out","propertySignatures","AST","ast","propertySignature","Config","dbFactory","appState","nanoIdGenerator","errorStore","makeStore","ownerStore","rowsStore","syncStateStore","initialSyncState","loadingPromises","subscribedQueries","handleAllErrors","tapError","logError","setState","runFork","flow","runPromise","initialDataAsMutations","provideService","initialDataToMutations","handlePatches","releaseUnsubscribedLoadingPromises","socketResolved","subscribe","getState","appStateReset","rowsStoreStateFromPatches","nextState","resolveLoadingPromises","rowsStoreState","loadingPromise","promise","status","assign","releaseOnResolve","delete","queue","onComplete","rowId","queueMicrotask","onCompletes","onCompletesDef","isNotUndefined","subscribeError","getError","createQuery","queryCallback","kysely","isSqlMutation","loadQuery","_resolve","subscribeQuery","listener","unsubscribe","count","getQuery","subscribeOwner","getOwner","subscribeSyncState","getSyncState","createOrUpdate","reload","reloadApp","createIndexes","Id","SqliteDate","s","isNaN","SqliteBoolean","fields","ReservedColumns","createdAt","updatedAt","isDeleted","database","maybeJson","String1000","NonEmptyString1000","PositiveInt","platformSqliteFactory","platformSqlite","maybeParseJson","mode","exit","valuesToSqliteValues","parseArray","o","parseString","isArray","parseObject","isSqlMutationRegEx","RegExp","test","maybeLogSqliteQueryExecutionTime","logQueryExecutionTime","start","elapsed","parentId","parent","indent","r","detail","initialState","listeners","Set","TypeId","defaultConsole","withConsole","setConsole","consoleWith","assert","clear","countReset","debug","dir","dirxml","group","info","timeLog","trace","warn","withGroup","withTime","dynamicReference","refType","parseSimpleReferenceExpression","isDynamicReferenceBuilder","parseUnaryOperation","parseReferenceExpression","JSONPathBuilder","at","legType","TraversedJSONPathBuilder","cloneWithTraversal","cloneWithLeg","cloneWithValue","expressionType","AliasedJSONPathBuilder","$castTo","$notNull","jsonPath","createExpressionBuilder","NOOP_QUERY_EXECUTOR","unary","expr","ExpressionWrapper","eb","lhs","rhs","parseValueBinaryOperation","selectFrom","createSelectQueryBuilder","createFrom","parseTableExpressionOrList","case","parseJSONReference","val","parseValueExpression","refTuple","tuple","lit","parseSafeImmediateValue","exists","neg","between","end","betweenSymmetric","and","exprs","isReadonlyArray","parseFilterList","parseFilterObject","or","parens","expressionBuilder","AliasedExpressionWrapper","OrWrapper","AndWrapper","cloneWithWhen","caseNode","cloneWithThen","slice","cloneWithResult","cloneWithTables","fromItems","withNode","cloneWithOrderByItems","deleteNode","cloneWithItems","cloneWithoutOrderBy","cloneWithLimit","cloneWithoutLimit","cloneWithUsing","cloneWithFroms","createWithoutInto","insertQuery","cloneWithOperation","onNode","operation","createWithOn","cloneWithOn","joinNode","jsonPathNode","mergeNode","transformAlias","transformColumn","transformIdentifier","transformSchemableIdentifier","transformRaw","transformReference","transformSelectQuery","transformSelection","transformTable","transformFrom","transformSelectAll","transformAnd","transformOr","transformValueList","transformPrimitiveValueList","transformParens","transformJoin","transformOperator","transformWhere","transformInsertQuery","transformDeleteQuery","transformReturning","transformCreateTable","transformAddColumn","transformColumnDefinition","transformDropTable","transformDataType","transformOrderBy","transformOrderByItem","transformGroupBy","transformGroupByItem","transformUpdateQuery","transformColumnUpdate","transformLimit","transformOffset","transformOnConflict","transformOnDuplicateKey","transformCreateIndex","transformDropIndex","transformList","transformPrimaryKeyConstraint","transformUniqueConstraint","transformReferences","transformCheckConstraint","transformWith","transformCommonTableExpression","transformCommonTableExpressionName","transformHaving","transformCreateSchema","transformDropSchema","transformAlterTable","transformDropColumn","transformRenameColumn","transformAlterColumn","transformModifyColumn","transformAddConstraint","transformDropConstraint","transformForeignKeyConstraint","transformCreateView","transformDropView","transformGenerated","transformDefaultValue","transformOn","transformValues","transformSelectModifier","transformCreateType","transformDropType","transformExplain","transformDefaultInsertValue","transformAggregateFunction","transformOver","transformPartitionBy","transformPartitionByItem","transformSetOperation","transformBinaryOperation","transformUnaryOperation","transformUsing","transformFunction","transformCase","transformWhen","transformJSONReference","transformJSONPath","transformJSONPathLeg","transformJSONOperatorChain","transformTuple","transformMergeQuery","transformMatched","transformAddIndex","transformCast","transformFetch","transformTop","transformOutput","transformNodeImpl","transformNodeList","list","COMPARISON_OPERATORS","ARITHMETIC_OPERATORS","JSON_OPERATORS","BINARY_OPERATORS","UNARY_FILTER_OPERATORS","UNARY_OPERATORS","OPERATORS","isOperator","isBinaryOperator","isComparisonOperator","isArithmeticOperator","isJSONOperator","cloneWithSelections","cloneWithJoin","cloneWithReturning","cloneWithoutReturning","cloneWithoutWhere","cloneWithExplain","cloneWithTop","cloneWithOutput","createWithChild","child","createWithChildren","children","fill","createSelectAll","havingNode","select","cloneWithDistinctOn","selectNode","cloneWithGroupByItems","cloneWithOffset","cloneWithFetch","cloneWithHaving","cloneWithSetOperations","cloneWithoutSelections","cloneWithoutOffset","cloneWithoutGroupBy","createWithoutTable","cloneWithFromItems","updateQuery","cloneWithUpdates","whenNode","whereNode","isIsOperator","needsIsOperator","parseOperator","parseValueExpressionOrList","parseReferentialBinaryOperation","combinator","v","k","withParens","combine","nodeOrSource","SIMPLE_COLUMN_DATA_TYPES","COLUMN_DATA_TYPE_REGEX","isColumnDataType","exp","parseAliasedExpression","isExpressionOrFactory","isExpression","isAliasedExpression","parseJoin","lhsColumn","rhsColumn","parseTableExpression","parseSingleOnJoin","createJoinBuilder","parseCallbackJoin","isOrderByDirection","thing","parseOrderBy","parseOrderByItem","item","parsedRef","parseOrderByDirectionExpression","parseOrderByExpression","overNode","cloneWithPartitionByItems","JoinBuilder","onRef","onTrue","parsePartitionBy","parseReferenceExpressionOrList","OverBuilder","createQueryCreator","createOverBuilder","arg","it","referenceNode","opWithoutLastChar","parseStringReferenceWithTableAndSchema","parseStringReferenceWithTable","parseAliasedStringReference","ALIAS_SEPARATOR","columnRef","order","createSelectAllFromTable","parseSelectArg","parseSelectExpression","parseSelectAll","parseSelectAllArg","parseAliasedTable","parseTop","isTopModifiers","parseValueExpressionList","isSafeImmediateValue","ROOT_OPERATION_NODES","WithSchemaTransformer","ctes","cte","transformed","schemableIds","cteId","CaseThenBuilder","valueExpression","CaseWhenBuilder","CaseEndBuilder","endCase","aggregateFunction","cloneWithDistinct","aggregateFunctionNode","cloneWithFilter","cloneWithOrFilter","cloneWithOver","AggregateFunctionBuilder","AliasedAggregateFunctionBuilder","filterWhere","filterWhereRef","aggregateFunctionBuilder","agg","avg","coalesce","countAll","max","min","sum","any","jsonAgg","toJson","NoResultError","isNoResultErrorConstructor","prototype","hasOwnProperty","parseGroupBy","parseSetOperations","parseFetch","SelectQueryBuilderImpl","isSelectQueryBuilder","whereRef","havingRef","forUpdate","asArray","forShare","forKeyShare","forNoKeyUpdate","skipLocked","noWait","selectAll","innerJoin","leftJoin","rightJoin","fullJoin","innerJoinLateral","leftJoinLateral","union","unionAll","intersect","intersectAll","except","exceptAll","AliasedSelectQueryBuilderImpl","clearSelect","clearWhere","clearLimit","clearOffset","clearOrderBy","clearGroupBy","$if","$narrowType","$assertType","$asTuple","executeTakeFirst","executeTakeFirstOrThrow","errorConstructor","stream","chunkSize","queryBuilder","isAliasedSelectQueryBuilder","parseInsertExpression","objectOrList","cols","col","size","parseColumnNamesAndIndexes","rowColumns","rowValues","hasUndefinedOrComplexColumns","columnIdx","hasMissingColumns","parseRowValues","parseInsertColumnsAndValues","parseUpdate","parseUpdateObjectExpression","updateObj","InsertResult","insertId","numInsertedOrUpdatedRows","cloneWithIndexWhere","cloneWithIndexOrWhere","cloneWithUpdateWhere","cloneWithUpdateOrWhere","cloneWithoutIndexWhere","cloneWithoutUpdateWhere","OnConflictBuilder","columnNode","onConflictNode","columnNodes","OnConflictDoNothingBuilder","doUpdateSet","OnConflictUpdateBuilder","InsertQueryBuilder","onDuplicateKeyUpdate","returningAll","outputAll","clearReturning","numAffectedRows","numUpdatedOrDeletedRows","DeleteResult","numDeletedRows","DeleteQueryBuilder","BigInt","UpdateResult","numUpdatedRows","numChangedRows","UpdateQueryBuilder","columnNames","CTEBuilder","notMaterialized","parseCommonTableExpression","nameOrBuilderCallback","expressionNode","parseCommonTableExpressionName","cteBuilderFactory","cloneWithExpression","parseMergeWhen","refRight","isMatched","parseMergeThen","MergeResult","MergeQueryBuilder","WheneableMergeQueryBuilder","whenMatched","whenMatchedAnd","whenMatchedAndRef","MatchedThenableMergeQueryBuilder","whenNotMatched","whenNotMatchedAnd","whenNotMatchedAndRef","whenNotMatchedBySource","whenNotMatchedBySourceAnd","whenNotMatchedBySourceAndRef","NotMatchedThenableMergeQueryBuilder","thenDelete","thenDoNothing","thenUpdate","thenUpdateSet","ub","thenInsertValues","selectNoFrom","insertInto","replaceInto","deleteFrom","updateTable","mergeInto","nameOrBuilder","withRecursive","NoopQueryExecutor","reason","LOGGED_MESSAGES","NO_PLUGINS","transformedNode","transformedResult","warnOfOutdatedDriverOrPlugins","connectionDefer","connectionReleaseDefer","ex","isEmpty","isBuffer","Buffer","isArrayBufferOrView","ArrayBuffer","isView","isPlainObject","getTag","getPrototypeOf","proto","getLast","asReadonlyArray","compare","obj1","obj2","arr1","arr2","compareArrays","buf1","buf2","date2","getTime","keys1","keys2","compareGenericObjects","compareObjects","clazz","defineProperties","enumerable","CHARS","LazyQueryId","chars","Math","random","randomString","runtimeFlags","CooperativeYielding","Interruption","OpSupervision","RuntimeMetrics","WindDown","LayerTypeId","MemoMapTypeId","isLayer","isFresh","annotateLogs","annotateSpans","buildWithScope","catchAllCause","die","dieSync","discard","effectDiscard","effectContext","extendScope","failSync","failCause","failCauseSync","flatten","fresh","fromFunction","launch","mapError","matchCause","memoize","merge","mergeAll","orDie","orElse","passthrough","project","locallyEffect","locally","locallyWith","locallyScoped","fiberRefLocallyScopedWith","retry","scope","scopedDiscard","scopedContext","service","succeedContext","suspend","syncContext","tapErrorCause","toRuntime","toRuntimeWithMemoMap","provideMerge","zipWith","unwrapEffect","unwrapScoped","setClock","clock","fiberRuntime","defaultServices","currentServices","clockTag","setConfigProvider","configProvider","layer","withConfigProviderScoped","parentSpan","span","tracer","spanTag","setRequestBatching","requestBatching","fiberRefLocallyScoped","core","currentRequestBatching","setRequestCaching","requestCaching","currentCacheEnabled","setRequestCache","cache","isEffect","x","currentCache","setScheduler","scheduler","Scheduler","currentScheduler","addSpanStackTrace","onEnd","makeSpanScoped","addFinalizer","setTracer","withTracerScoped","setTracerEnabled","enabled","currentTracerEnabled","setTracerTiming","currentTracerTimingEnabled","setUnhandledErrorLogLevel","currentUnhandledErrorLogLevel","withSpan","withParentSpan","makeMemoMap","buildWithMemoMap"],"sourceRoot":""}