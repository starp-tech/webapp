{"version":3,"file":"672.js","mappings":"iIA8DA,K,wHA9BO,SAA+BA,GAEpC,IAAMC,EAAOD,EAAKE,MAClB,IAbF,SAAoBD,GAClB,MACkB,kBAATA,GACC,MAARA,GACA,SAAUA,GACV,WAAYA,GACZ,WAAYA,CAEhB,CAKOE,CAAWF,GACd,MAAM,IAAIG,MAAM,4DAIlB,OADeC,EAAAA,EAAOC,sBAAsBL,EAE9C,E,wBAEO,SAA+BM,GACpC,KAAMA,aAAuBC,aAC3B,MAAM,IAAIJ,MAAM,+CAElB,GAAIG,EAAYE,WAAa,EAC3B,MAAM,IAAIL,MACR,yEAIJ,IAAMM,EAAWL,EAAAA,EAAOM,sBAAsBJ,GACxCN,EAAIW,OAAAC,OAAA,GAAQH,EAAS,CAACI,KAAM,SAElC,MAAO,CAELb,KAAMA,EACNC,MAAOD,EACPa,KAAM,OAEV,E,cA5DA,IAMMC,EAAgBC,EAAAA,QAAcD,cAEpC,GAAqB,MAAjBA,EACF,MAAM,IAAIX,MART,wLAWHW,EAAcE,SAgDd,4B","sources":["webpack://StarpyApp/./node_modules/react-native-blob-jsi-helper/src/index.tsx"],"sourcesContent":["import { NativeModules, Platform } from 'react-native';\n\nconst LINKING_ERROR =\n  `The package 'react-native-blob-jsi-helper' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo managed workflow\\n';\n\nconst BlobJsiHelper = NativeModules.BlobJsiHelper;\n\nif (BlobJsiHelper == null) {\n  throw new Error(LINKING_ERROR);\n}\n\nBlobJsiHelper.install();\n\ninterface BlobData {\n  size: number;\n  offset: number;\n  blobId: string;\n}\n\nfunction isBlobData(data: unknown): data is BlobData {\n  return (\n    typeof data === 'object' &&\n    data != null &&\n    'size' in data &&\n    'offset' in data &&\n    'blobId' in data\n  );\n}\n\nexport function getArrayBufferForBlob(blob: Blob): Uint8Array {\n  // @ts-expect-error React Native adds the hidden `_data` field.\n  const data = blob._data;\n  if (!isBlobData(data))\n    throw new Error('Invalid Blob! Blob did not contain a valid ._data field!');\n\n  // @ts-expect-error I inject that function using JSI.\n  const buffer = global.getArrayBufferForBlob(data) as Uint8Array;\n  return buffer;\n}\n\nexport function getBlobForArrayBuffer(arrayBuffer: ArrayBuffer): Blob {\n  if (!(arrayBuffer instanceof ArrayBuffer)) {\n    throw new Error('arrayBuffer is not instance of ArrayBuffer!');\n  }\n  if (arrayBuffer.byteLength < 1)\n    throw new Error(\n      'Invalid ArrayBuffer! ArrayBuffer.byteLength has to be greater than 0!'\n    );\n\n  // @ts-expect-error I inject that function using JSI.\n  const blobData = global.getBlobForArrayBuffer(arrayBuffer) as Blob;\n  const data = { ...blobData, type: 'blob' };\n\n  return {\n    // @ts-expect-error Blob is actually differently typed\n    data: data,\n    _data: data,\n    type: 'blob',\n  };\n}\n"],"names":["blob","data","_data","isBlobData","Error","global","getArrayBufferForBlob","arrayBuffer","ArrayBuffer","byteLength","blobData","getBlobForArrayBuffer","Object","assign","type","BlobJsiHelper","NativeModules","install"],"sourceRoot":""}