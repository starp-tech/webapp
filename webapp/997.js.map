{"version":3,"file":"997.js","mappings":"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","sources":["webpack://StarpyApp/./node_modules/@evolu/common-web/dist/NanoIdGeneratorLive.js","webpack://StarpyApp/./node_modules/@evolu/common-web/dist/PlatformLive.js","webpack://StarpyApp/./node_modules/effect/src/SynchronizedRef.ts","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Sql.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Db.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Diff.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/alter-table-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/create-index-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/create-schema-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/create-table-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/drop-index-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/drop-schema-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/drop-table-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/add-column-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/column-definition-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/drop-column-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/rename-column-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/check-constraint-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/references-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/default-value-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/generated-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/default-value-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/on-modify-action-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/column-definition-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/modify-column-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/foreign-key-constraint-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/foreign-key-constraint-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/add-constraint-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/unique-constraint-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/drop-constraint-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/alter-column-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/alter-column-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/alter-table-executor.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/alter-table-add-foreign-key-constraint-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/alter-table-drop-constraint-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/primary-constraint-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/add-index-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/alter-table-add-index-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/unique-constraint-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/alter-table-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-transformer.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/create-index-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/create-schema-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/on-commit-action-parse.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/create-table-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/drop-index-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/drop-schema-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/drop-table-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/create-view-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-plugin.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/create-view-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/drop-view-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/drop-view-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/create-type-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/create-type-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/drop-type-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/drop-type-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/identifier-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/schema/schema.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/dynamic/dynamic.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/driver/default-connection-provider.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-executor/default-query-executor.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/util/performance-now.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/driver/runtime-driver.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/driver/single-connection-provider.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/driver/driver.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/util/log.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/kysely.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/util/compilable.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/dialect/dialect-adapter-base.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/dialect/sqlite/sqlite-adapter.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/driver/dummy-driver.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/operation-node-visitor.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/dialect/sqlite/sqlite-query-compiler.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Evolu.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Model.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Platform.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Sqlite.js","webpack://StarpyApp/./node_modules/@evolu/common/dist/src/Store.js","webpack://StarpyApp/./node_modules/effect/src/Console.ts","webpack://StarpyApp/./node_modules/kysely/dist/esm/dynamic/dynamic-reference-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/unary-operation-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/unary-operation-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/json-path-leg-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/json-path-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/tuple-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/cast-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/expression/expression-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/expression/expression-wrapper.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/alias-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/and-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/binary-operation-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/case-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/column-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/using-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/delete-query-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/from-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/identifier-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/insert-query-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/on-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/join-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/json-operator-chain-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/json-path-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/json-reference-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/limit-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/merge-query-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/operation-node-source.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/operation-node-transformer.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/operator-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/or-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/order-by-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/parens-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/primitive-value-list-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/returning-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/explain-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/query-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/raw-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/reference-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/schemable-identifier-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/select-all-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/group-by-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/having-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/select-query-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/set-operation-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/table-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/update-query-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/value-list-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/value-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/when-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/where-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/binary-operation-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/data-type-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/data-type-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/expression-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/expression/expression.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/join-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/order-by-item-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/order-by-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/partition-by-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/over-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/join-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/partition-by-item-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/partition-by-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/over-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/parse-utils.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/reference-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/selection-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/select-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/table-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/top-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/top-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/value-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/plugin/with-schema/with-schema-transformer.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/plugin/with-schema/with-schema-plugin.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/case-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/aggregate-function-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/function-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/aggregate-function-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/function-module.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/no-result-error.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/select-modifier-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/offset-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/group-by-item-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/group-by-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/set-operation-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/fetch-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/fetch-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/select-query-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/values-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/default-insert-value-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/insert-values-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/column-update-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/update-set-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/on-duplicate-key-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/insert-result.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/on-conflict-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/on-conflict-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/insert-query-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/delete-result.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/delete-query-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/update-result.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/update-query-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/common-table-expression-name-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/common-table-expression-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/cte-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/with-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/with-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/operation-node/matched-node.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/parser/merge-parser.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/merge-result.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-builder/merge-query-builder.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-creator.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-executor/noop-query-executor.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/util/deferred.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/util/log-once.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/query-executor/query-executor-base.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/util/object-utils.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/util/prevent-await.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/util/random-string.js","webpack://StarpyApp/./node_modules/kysely/dist/esm/util/query-id.js"],"sourcesContent":["import { createNanoIdGeneratorLive } from \"@evolu/common\";\nimport { customAlphabet, nanoid } from \"nanoid\";\nexport const NanoIdGeneratorLive = createNanoIdGeneratorLive(customAlphabet, nanoid);\n","import { AppState, SyncLock, SyncLockAlreadySyncingError, getLockName, } from \"@evolu/common\";\nimport * as Effect from \"effect/Effect\";\nimport * as Layer from \"effect/Layer\";\nexport const AppStateLive = Layer.succeed(AppState, {\n    init: ({ reloadUrl, onRequestSync }) => Effect.sync(() => {\n        if (typeof document === \"undefined\") {\n            return { reset: Effect.void };\n        }\n        const localStorageKey = \"evolu:reloadAllTabs\";\n        const replaceLocation = () => {\n            location.replace(reloadUrl);\n        };\n        window.addEventListener(\"storage\", (e) => {\n            if (e.key === localStorageKey)\n                replaceLocation();\n        });\n        let timer;\n        const handleRequestSyncEvents = () => {\n            if (timer != null)\n                return;\n            onRequestSync();\n            timer = window.setTimeout(() => {\n                timer = null;\n            }, 50);\n        };\n        window.addEventListener(\"online\", handleRequestSyncEvents);\n        document.addEventListener(\"visibilitychange\", () => {\n            if (document.visibilityState !== \"hidden\")\n                handleRequestSyncEvents();\n        });\n        window.addEventListener(\"focus\", handleRequestSyncEvents);\n        const reset = Effect.sync(() => {\n            localStorage.setItem(localStorageKey, Date.now().toString());\n            replaceLocation();\n        });\n        return { reset };\n    }),\n});\nexport const SyncLockLive = Layer.succeed(SyncLock, {\n    tryAcquire: Effect.gen(function* () {\n        yield* Effect.logTrace(\"SyncLock tryAcquire\");\n        const lockName = yield* getLockName(\"SyncLock\");\n        const acquire = Effect.async((resume) => {\n            navigator.locks.request(lockName, { ifAvailable: true }, (lock) => {\n                if (lock == null) {\n                    Effect.logTrace(\"SyncLock not acquired\").pipe(Effect.zipRight(Effect.fail(new SyncLockAlreadySyncingError())), resume);\n                    return;\n                }\n                return new Promise((resolve) => {\n                    Effect.logTrace(\"SyncLock acquired\").pipe(Effect.zipRight(Effect.succeed({\n                        release: Effect.logTrace(\"SyncLock released\").pipe(Effect.tap(Effect.sync(resolve))),\n                    })), resume);\n                });\n            });\n        });\n        const release = ({ release }) => release;\n        return yield* Effect.acquireRelease(acquire, release);\n    }),\n});\n","/**\n * @since 2.0.0\n */\nimport type * as Effect from \"./Effect.js\"\nimport * as circular from \"./internal/effect/circular.js\"\nimport * as ref from \"./internal/ref.js\"\nimport * as internal from \"./internal/synchronizedRef.js\"\nimport type * as Option from \"./Option.js\"\nimport type * as Ref from \"./Ref.js\"\nimport type * as Types from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const SynchronizedRefTypeId: unique symbol = circular.SynchronizedTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type SynchronizedRefTypeId = typeof SynchronizedRefTypeId\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface SynchronizedRef<in out A> extends SynchronizedRef.Variance<A>, Ref.Ref<A> {\n  modifyEffect<B, E, R>(f: (a: A) => Effect.Effect<readonly [B, A], E, R>): Effect.Effect<B, E, R>\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace SynchronizedRef {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Variance<in out A> {\n    readonly [SynchronizedRefTypeId]: {\n      readonly _A: Types.Invariant<A>\n    }\n  }\n}\n\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const make: <A>(value: A) => Effect.Effect<SynchronizedRef<A>> = circular.makeSynchronized\n\n/**\n * @since 2.0.0\n * @category getters\n */\nexport const get: <A>(self: SynchronizedRef<A>) => Effect.Effect<A> = ref.get\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndSet: {\n  <A>(value: A): (self: Ref.Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref.Ref<A>, value: A): Effect.Effect<A>\n} = ref.getAndSet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdate: {\n  <A>(f: (a: A) => A): (self: Ref.Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref.Ref<A>, f: (a: A) => A): Effect.Effect<A>\n} = ref.getAndUpdate\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdateEffect: {\n  <A, R, E>(f: (a: A) => Effect.Effect<A, E, R>): (self: SynchronizedRef<A>) => Effect.Effect<A, E, R>\n  <A, R, E>(self: SynchronizedRef<A>, f: (a: A) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R>\n} = internal.getAndUpdateEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdateSome: {\n  <A>(pf: (a: A) => Option.Option<A>): (self: Ref.Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref.Ref<A>, pf: (a: A) => Option.Option<A>): Effect.Effect<A>\n} = ref.getAndUpdateSome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const getAndUpdateSomeEffect: {\n  <A, R, E>(pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>): (self: SynchronizedRef<A>) => Effect.Effect<A, E, R>\n  <A, R, E>(self: SynchronizedRef<A>, pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>): Effect.Effect<A, E, R>\n} = internal.getAndUpdateSomeEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modify: {\n  <A, B>(f: (a: A) => readonly [B, A]): (self: SynchronizedRef<A>) => Effect.Effect<B>\n  <A, B>(self: SynchronizedRef<A>, f: (a: A) => readonly [B, A]): Effect.Effect<B>\n} = internal.modify\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modifyEffect: {\n  <A, B, E, R>(f: (a: A) => Effect.Effect<readonly [B, A], E, R>): (self: SynchronizedRef<A>) => Effect.Effect<B, E, R>\n  <A, B, E, R>(self: SynchronizedRef<A>, f: (a: A) => Effect.Effect<readonly [B, A], E, R>): Effect.Effect<B, E, R>\n} = internal.modifyEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modifySome: {\n  <B, A>(\n    fallback: B,\n    pf: (a: A) => Option.Option<readonly [B, A]>\n  ): (self: Ref.Ref<A>) => Effect.Effect<B>\n  <A, B>(\n    self: Ref.Ref<A>,\n    fallback: B,\n    pf: (a: A) => Option.Option<readonly [B, A]>\n  ): Effect.Effect<B>\n} = ref.modifySome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const modifySomeEffect: {\n  <A, B, R, E>(\n    fallback: B,\n    pf: (a: A) => Option.Option<Effect.Effect<readonly [B, A], E, R>>\n  ): (self: SynchronizedRef<A>) => Effect.Effect<B, E, R>\n  <A, B, R, E>(\n    self: SynchronizedRef<A>,\n    fallback: B,\n    pf: (a: A) => Option.Option<Effect.Effect<readonly [B, A], E, R>>\n  ): Effect.Effect<B, E, R>\n} = internal.modifySomeEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const set: {\n  <A>(value: A): (self: Ref.Ref<A>) => Effect.Effect<void>\n  <A>(self: Ref.Ref<A>, value: A): Effect.Effect<void>\n} = ref.set\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const setAndGet: {\n  <A>(value: A): (self: Ref.Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref.Ref<A>, value: A): Effect.Effect<A>\n} = ref.setAndGet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const update: {\n  <A>(f: (a: A) => A): (self: Ref.Ref<A>) => Effect.Effect<void>\n  <A>(self: Ref.Ref<A>, f: (a: A) => A): Effect.Effect<void>\n} = ref.update\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateEffect: {\n  <A, R, E>(f: (a: A) => Effect.Effect<A, E, R>): (self: SynchronizedRef<A>) => Effect.Effect<void, E, R>\n  <A, R, E>(self: SynchronizedRef<A>, f: (a: A) => Effect.Effect<A, E, R>): Effect.Effect<void, E, R>\n} = internal.updateEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateAndGet: {\n  <A>(f: (a: A) => A): (self: Ref.Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref.Ref<A>, f: (a: A) => A): Effect.Effect<A>\n} = ref.updateAndGet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateAndGetEffect: {\n  <A, R, E>(f: (a: A) => Effect.Effect<A, E, R>): (self: SynchronizedRef<A>) => Effect.Effect<A, E, R>\n  <A, R, E>(self: SynchronizedRef<A>, f: (a: A) => Effect.Effect<A, E, R>): Effect.Effect<A, E, R>\n} = internal.updateAndGetEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSome: {\n  <A>(f: (a: A) => Option.Option<A>): (self: Ref.Ref<A>) => Effect.Effect<void>\n  <A>(self: Ref.Ref<A>, f: (a: A) => Option.Option<A>): Effect.Effect<void>\n} = ref.updateSome\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSomeEffect: {\n  <A, R, E>(\n    pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>\n  ): (self: SynchronizedRef<A>) => Effect.Effect<void, E, R>\n  <A, R, E>(self: SynchronizedRef<A>, pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>): Effect.Effect<void, E, R>\n} = internal.updateSomeEffect\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSomeAndGet: {\n  <A>(pf: (a: A) => Option.Option<A>): (self: Ref.Ref<A>) => Effect.Effect<A>\n  <A>(self: Ref.Ref<A>, pf: (a: A) => Option.Option<A>): Effect.Effect<A>\n} = ref.updateSomeAndGet\n\n/**\n * @since 2.0.0\n * @category utils\n */\nexport const updateSomeAndGetEffect: {\n  <A, R, E>(pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>): (self: SynchronizedRef<A>) => Effect.Effect<A, E, R>\n  <A, R, E>(self: SynchronizedRef<A>, pf: (a: A) => Option.Option<Effect.Effect<A, E, R>>): Effect.Effect<A, E, R>\n} = circular.updateSomeAndGetEffectSynchronized\n\n/**\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeMake: <A>(value: A) => SynchronizedRef<A> = circular.unsafeMakeSynchronized\n","export const selectOwner = {\n    sql: `select \"id\", \"mnemonic\", \"encryptionKey\" from \"evolu_owner\"`,\n};\nexport const createMessageTable = {\n    sql: `create table \"evolu_message\" (\"timestamp\" blob primary key, \"table\" blob, \"row\" blob, \"column\" blob, \"value\" blob)`,\n};\nexport const createMessageTableIndex = {\n    sql: `create index \"index_evolu_message\" on \"evolu_message\" (\"table\", \"row\", \"column\", \"timestamp\" desc)`,\n};\nexport const createOwnerTable = {\n    sql: `create table \"evolu_owner\" (\"id\" blob, \"mnemonic\" blob, \"encryptionKey\" blob, \"timestamp\" blob, \"merkleTree\" blob)`,\n};\nexport const insertOwner = {\n    sql: `insert into \"evolu_owner\" (\"id\", \"mnemonic\", \"encryptionKey\", \"timestamp\", \"merkleTree\") values (?, ?, ?, ?, ?)`,\n};\nexport const selectOwnerTimestampAndMerkleTree = {\n    sql: `select \"timestamp\", \"merkleTree\" from \"evolu_owner\"`,\n};\nexport const selectLastTimestampForTableRowColumn = {\n    sql: `select \"timestamp\" from \"evolu_message\" where \"table\" = ? and \"row\" = ? and \"column\" = ? order by \"timestamp\" desc limit ?`,\n};\nexport const insertIntoMessagesIfNew = {\n    sql: `insert into \"evolu_message\" (\"timestamp\", \"table\", \"row\", \"column\", \"value\") values (?, ?, ?, ?, ?) on conflict do nothing`,\n};\nexport const updateOwnerTimestampAndMerkleTree = {\n    sql: `update \"evolu_owner\" set \"merkleTree\" = ?, \"timestamp\" = ?`,\n};\nexport const selectMessagesToSync = {\n    sql: `select * from \"evolu_message\" where \"timestamp\" >= ? order by \"timestamp\"`,\n};\n","import * as S from \"@effect/schema/Schema\";\nimport * as Arr from \"effect/Array\";\nimport * as Console from \"effect/Console\";\nimport * as Context from \"effect/Context\";\nimport * as Deferred from \"effect/Deferred\";\nimport * as Effect from \"effect/Effect\";\nimport { constVoid, pipe } from \"effect/Function\";\nimport * as Option from \"effect/Option\";\nimport * as Predicate from \"effect/Predicate\";\nimport * as Ref from \"effect/Ref\";\nimport * as Schedule from \"effect/Schedule\";\nimport * as String from \"effect/String\";\nimport * as SynchronizedRef from \"effect/SynchronizedRef\";\nimport { Time, diffMerkleTrees, initialMerkleTree, insertIntoMerkleTree, makeInitialTimestamp, makeSyncTimestamp, merkleTreeToString, receiveTimestamp, sendTimestamp, timestampToString, unsafeTimestampFromString, } from \"./Crdt.js\";\nimport { NanoIdGenerator } from \"./Crypto.js\";\nimport { makePatches } from \"./Diff.js\";\nimport { ensureTransferableError, makeUnexpectedError, } from \"./Error.js\";\nimport { cast } from \"./Model.js\";\nimport { Owner, makeOwner } from \"./Owner.js\";\nimport { SyncLock } from \"./Platform.js\";\nimport * as Sql from \"./Sql.js\";\nimport { Sqlite, SqliteFactory, drawSqliteQueryPlan, isJsonObjectOrArray, } from \"./Sqlite.js\";\nimport { Sync, SyncFactory, } from \"./Sync.js\";\nexport const Index = S.Struct({\n    name: S.String,\n    sql: S.String,\n});\nexport class DbFactory extends Context.Tag(\"DbFactory\")() {\n}\nexport const createDb = Effect.gen(function* () {\n    const { createSqlite } = yield* SqliteFactory;\n    const { createSync } = yield* SyncFactory;\n    const initContext = Context.empty().pipe(Context.add(NanoIdGenerator, yield* NanoIdGenerator), Context.add(Time, yield* Time), Context.add(SyncLock, yield* SyncLock));\n    const afterInitContext = yield* Deferred.make();\n    const afterInit = (options) => (effect) => Effect.flatMap(Deferred.await(afterInitContext), (context) => Effect.flatMap(Sqlite, (sqlite) => sqlite.transaction(options.transaction)(effect)).pipe(Effect.provide(context)));\n    const queryRowsRef = yield* SynchronizedRef.make(new Map());\n    const db = {\n        init: (schema, initialData, onError, onSyncStateChange, onReceive, mnemonic) => Effect.gen(function* () {\n            yield* Effect.logDebug([\"Db init\", { schema }]);\n            const sqlite = yield* createSqlite;\n            const contextWithSqlite = Context.add(initContext, Sqlite, sqlite);\n            const owner = yield* getSchema.pipe(Effect.tap(ensureSchema(schema)), Effect.flatMap((currentSchema) => {\n                if (currentSchema.tables.map((t) => t.name).includes(\"evolu_owner\"))\n                    return readOwner;\n                return createOwner(mnemonic).pipe(Effect.tap(applyMutations(initialData)));\n            }), sqlite.transaction(\"exclusive\"), Effect.provide(contextWithSqlite));\n            const sync = yield* createSync.pipe(Effect.provide(initContext));\n            yield* sync.init(owner);\n            Deferred.unsafeDone(afterInitContext, Effect.succeed(contextWithSqlite.pipe(Context.add(Owner, owner), Context.add(Sync, sync), Context.add(Callbacks, { onError, onSyncStateChange, onReceive }))));\n            return owner;\n        }),\n        loadQueries: (queries) => Effect.logDebug([\"Db loadQueries\", { queries }]).pipe(Effect.zipRight(loadQueries(queries, queryRowsRef)), afterInit({ transaction: \"shared\" })),\n        mutate: (mutations, queriesToRefresh) => Effect.gen(function* () {\n            yield* Effect.logDebug([\"Db mutate\", { mutations, queriesToRefresh }]);\n            const time = yield* Time;\n            const sqlite = yield* Sqlite;\n            const [toSyncMutations, localOnlyMutations] = Arr.partition(mutations, \n            /** Table name starting with '_' is local only (not synced). */\n            (mutation) => mutation.table.startsWith(\"_\"));\n            for (const mutation of localOnlyMutations) {\n                const isDeleteMutation = mutationToNewMessages(mutation).some(({ column, value }) => column === \"isDeleted\" && value === 1);\n                if (isDeleteMutation) {\n                    yield* sqlite.exec({\n                        sql: `delete from \"${mutation.table}\" where \"id\" = ?;`,\n                        parameters: [mutation.id],\n                    });\n                }\n                else {\n                    const messages = mutationToNewMessages(mutation);\n                    for (const message of messages) {\n                        const now = yield* time.now;\n                        yield* upsertValueIntoTableRowColumn(message, messages, now);\n                    }\n                }\n            }\n            if (toSyncMutations.length > 0) {\n                yield* Effect.tap(applyMutations(toSyncMutations), forkSync);\n            }\n            return yield* loadQueries(queriesToRefresh, queryRowsRef);\n        }).pipe(afterInit({ transaction: \"exclusive\" })),\n        resetOwner: () => Effect.logTrace(\"Db resetOwner\").pipe(Effect.tap(dropAllTables), afterInit({ transaction: \"last\" })),\n        restoreOwner: (schema, mnemonic) => Effect.logTrace(\"Db restoreOwner\").pipe(Effect.tap(dropAllTables), Effect.tap(Effect.flatMap(getSchema, ensureSchema(schema))), Effect.tap(createOwner(mnemonic)), afterInit({ transaction: \"last\" })),\n        ensureSchema: (schema) => getSchema.pipe(Effect.flatMap(ensureSchema(schema)), afterInit({ transaction: \"exclusive\" })),\n        sync: (queriesToRefresh) => Effect.logDebug([\"Db sync\", { queriesToRefresh }]).pipe(Effect.zipRight(forkSync()), Effect.zipRight(loadQueries(queriesToRefresh, queryRowsRef)), afterInit({ transaction: \"shared\" })),\n        exportDatabase: () => Effect.logTrace(\"Db exportDatabase\").pipe(Effect.zipRight(Sqlite), Effect.flatMap((sqlite) => sqlite.export()), afterInit({ transaction: \"exclusive\" })),\n        // TODO:\n        // dispose: () =>\n        //   Effect.logTrace(\"Db dispose\").pipe(\n        //     Effect.tap(Scope.close(scope, Exit.succeed(\"Db disposed\"))),\n        //     afterInit({ transaction: \"last\" }),\n        //   ),\n    };\n    return db;\n});\nexport const Callbacks = Context.GenericTag(\"Callbacks\");\nconst loadQueries = (queries, queryRowsRef) => Effect.gen(function* () {\n    const sqlite = yield* Sqlite;\n    const previousState = yield* SynchronizedRef.getAndUpdateEffect(queryRowsRef, (previousState) => Effect.map(Effect.forEach(queries, (query) => {\n        const sqliteQuery = deserializeQuery(query);\n        return sqlite.exec(sqliteQuery).pipe(Effect.tap(maybeExplainQueryPlan(sqliteQuery)), Effect.map(({ rows }) => [query, rows]));\n    }), (queriesRows) => new Map([...previousState, ...queriesRows])));\n    const currentState = yield* SynchronizedRef.get(queryRowsRef);\n    return queries.map((query) => ({\n        query,\n        patches: makePatches(previousState.get(query), currentState.get(query) || []),\n    }));\n});\nconst maybeExplainQueryPlan = (sqliteQuery) => {\n    if (!sqliteQuery.options?.logExplainQueryPlan)\n        return Effect.void;\n    return Sqlite.pipe(Effect.flatMap((sqlite) => sqlite.exec({\n        ...sqliteQuery,\n        sql: `EXPLAIN QUERY PLAN ${sqliteQuery.sql}`,\n    })), Effect.tap(Console.log(\"ExplainQueryPlan\", sqliteQuery)), Effect.tap(({ rows }) => Console.log(drawSqliteQueryPlan(rows))), Effect.map(constVoid));\n};\nconst getSchema = Effect.gen(function* (_) {\n    yield* Effect.logTrace(\"Db getSchema\");\n    const sqlite = yield* Sqlite;\n    const tables = yield* Effect.map(sqlite.exec({\n        // https://til.simonwillison.net/sqlite/list-all-columns-in-a-database\n        sql: `\nselect\n  sqlite_master.name as tableName,\n  table_info.name as columnName\nfrom\n  sqlite_master\n  join pragma_table_info(sqlite_master.name) as table_info\n    `.trim(),\n    }), ({ rows }) => {\n        const map = new Map();\n        rows.forEach((row) => {\n            const { tableName, columnName } = row;\n            if (!map.has(tableName))\n                map.set(tableName, []);\n            map.get(tableName)?.push(columnName);\n        });\n        return globalThis.Array.from(map, ([name, columns]) => ({\n            name,\n            columns,\n        }));\n    });\n    const indexes = yield* Effect.map(sqlite.exec({\n        sql: `\nselect\n  name, sql\nfrom\n  sqlite_master\nwhere\n  type='index' and\n  name not like 'sqlite_%' and\n  name not like 'index_evolu_%'\n`.trim(),\n    }), (result) => Arr.map(result.rows, (row) => ({\n        name: row.name,\n        /**\n         * SQLite returns \"CREATE INDEX\" for \"create index\" for some reason.\n         * Other keywords remain unchanged. We have to normalize the casing\n         * for `indexEquivalence` manually.\n         */\n        sql: row.sql.replace(\"CREATE INDEX\", \"create index\"),\n    })));\n    return { tables, indexes };\n});\nconst ensureSchema = (newSchema) => (currentSchema) => Effect.gen(function* () {\n    yield* Effect.logTrace(\"Db ensureSchema\");\n    const sql = [];\n    newSchema.tables.forEach((table) => {\n        const currentTable = currentSchema.tables.find((t) => t.name === table.name);\n        if (!currentTable) {\n            sql.push(`\n  create table ${table.name} (\n    \"id\" text primary key,\n    ${table.columns\n                .filter((c) => c !== \"id\")\n                // \"A column with affinity BLOB does not prefer one storage class over another\n                // and no attempt is made to coerce data from one storage class into another.\"\n                // https://www.sqlite.org/datatype3.html\n                .map((name) => `\"${name}\" blob`)\n                .join(\", \")}\n  );`.trim());\n        }\n        else {\n            Arr.differenceWith(String.Equivalence)(table.columns, currentTable.columns).forEach((newColumn) => {\n                sql.push(`alter table \"${table.name}\" add column \"${newColumn}\" blob;`);\n            });\n        }\n    });\n    // Remove old indexes.\n    Arr.differenceWith(indexEquivalence)(currentSchema.indexes, Arr.intersectionWith(indexEquivalence)(currentSchema.indexes, newSchema.indexes)).forEach((indexToDrop) => {\n        sql.push(`drop index \"${indexToDrop.name}\";`);\n    });\n    // Add new indexes.\n    Arr.differenceWith(indexEquivalence)(newSchema.indexes, currentSchema.indexes).forEach((newIndex) => {\n        sql.push(`${newIndex.sql};`);\n    });\n    if (sql.length > 0) {\n        const sqlite = yield* Sqlite;\n        yield* sqlite.exec({ sql: sql.join(\"\\n\") });\n    }\n});\nconst indexEquivalence = (self, that) => self.name === that.name && self.sql === that.sql;\nconst readOwner = Effect.logTrace(\"Db readOwner\").pipe(Effect.zipRight(Sqlite), Effect.flatMap((sqlite) => sqlite.exec(Sql.selectOwner)), Effect.map(({ rows: [row] }) => ({\n    id: row.id,\n    mnemonic: row.mnemonic,\n    encryptionKey: row.encryptionKey,\n})));\nconst createOwner = (mnemonic) => Effect.logTrace(\"Db createOwner\").pipe(Effect.zipRight(Effect.all([makeOwner(mnemonic), Sqlite, makeInitialTimestamp])), Effect.tap(([owner, sqlite, initialTimestampString]) => Effect.all([\n    sqlite.exec(Sql.createMessageTable),\n    sqlite.exec(Sql.createMessageTableIndex),\n    sqlite.exec(Sql.createOwnerTable),\n    sqlite.exec({\n        ...Sql.insertOwner,\n        parameters: [\n            owner.id,\n            owner.mnemonic,\n            owner.encryptionKey,\n            timestampToString(initialTimestampString),\n            merkleTreeToString(initialMerkleTree),\n        ],\n    }),\n])), Effect.map(([owner]) => owner));\nconst applyMutations = (mutations) => Effect.gen(function* (_) {\n    const { timestamp, merkleTree } = yield* readTimestampAndMerkleTree;\n    const [nextTimestamp, messages] = yield* Effect.mapAccum(mutations.flatMap(mutationToNewMessages), timestamp, (currentTimestamp, newMessage) => Effect.map(sendTimestamp(currentTimestamp), (nextTimestamp) => {\n        const message = {\n            ...newMessage,\n            timestamp: timestampToString(nextTimestamp),\n        };\n        return [nextTimestamp, message];\n    }));\n    const nextMerkleTree = yield* applyMessages(merkleTree, messages);\n    yield* writeTimestampAndMerkleTree(nextTimestamp, nextMerkleTree);\n    return messages;\n});\nconst readTimestampAndMerkleTree = Sqlite.pipe(Effect.flatMap((sqlite) => sqlite.exec(Sql.selectOwnerTimestampAndMerkleTree)), Effect.map(({ rows: [{ timestamp, merkleTree }] }) => ({\n    timestamp: unsafeTimestampFromString(timestamp),\n    merkleTree: merkleTree,\n})));\nconst mutationToNewMessages = (mutation) => pipe(Object.entries(mutation.values), Arr.filterMap(([column, value]) => \n// The value can be undefined if exactOptionalPropertyTypes isn't true.\n// Don't insert nulls because null is the default value.\nvalue === undefined || (mutation.isInsert && value == null)\n    ? Option.none()\n    : Option.some([column, value])), Arr.map(([column, value]) => ({\n    table: mutation.table,\n    row: mutation.id,\n    column,\n    value: typeof value === \"boolean\"\n        ? cast(value)\n        : value instanceof Date\n            ? cast(value)\n            : value,\n})));\nconst applyMessages = (merkleTree, messages) => Effect.gen(function* () {\n    const sqlite = yield* Sqlite;\n    for (const message of messages) {\n        const messageTimestamp = unsafeTimestampFromString(message.timestamp);\n        const lastTimestamp = yield* Effect.map(sqlite.exec({\n            ...Sql.selectLastTimestampForTableRowColumn,\n            parameters: [message.table, message.row, message.column, 1],\n        }), ({ rows }) => rows.length > 0 ? rows[0].timestamp : null);\n        if (lastTimestamp == null || lastTimestamp < message.timestamp) {\n            yield* upsertValueIntoTableRowColumn(message, messages, messageTimestamp.millis);\n        }\n        if (lastTimestamp == null || lastTimestamp !== message.timestamp) {\n            const { changes } = yield* sqlite.exec({\n                ...Sql.insertIntoMessagesIfNew,\n                parameters: [\n                    message.timestamp,\n                    message.table,\n                    message.row,\n                    message.column,\n                    message.value,\n                ],\n            });\n            if (changes === 1)\n                merkleTree = insertIntoMerkleTree(merkleTree, messageTimestamp);\n        }\n    }\n    return merkleTree;\n});\nexport const upsertValueIntoTableRowColumn = (message, messages, millis) => Sqlite.pipe(Effect.map((sqlite) => {\n    const now = cast(new Date(millis));\n    return sqlite.exec({\n        sql: `\n    insert into\n      \"${message.table}\" (\"id\", \"${message.column}\", \"createdAt\", \"updatedAt\")\n    values\n      (?, ?, ?, ?)\n    on conflict do update set\n      \"${message.column}\" = ?,\n      \"updatedAt\" = ?\n        `.trim(),\n        parameters: [message.row, message.value, now, now, message.value, now],\n    });\n}), Effect.flatMap((insert) => Effect.catchSomeDefect(insert, (error) => S.is(SqliteNoSuchTableOrColumnError)(error)\n    ? Option.some(\n    // If one message fails, we ensure schema for all messages.\n    ensureSchemaByNewMessages(messages).pipe(Effect.zipRight(insert)))\n    : Option.none())));\nconst SqliteNoSuchTableOrColumnError = S.Struct({\n    message: S.Union(S.String.pipe(S.includes(\"no such table\")), S.String.pipe(S.includes(\"no such column\")), S.String.pipe(S.includes(\"has no column\"))),\n});\nconst ensureSchemaByNewMessages = (messages) => Effect.gen(function* () {\n    const tablesMap = new Map();\n    messages.forEach((message) => {\n        const table = tablesMap.get(message.table);\n        if (table == null) {\n            tablesMap.set(message.table, {\n                name: message.table,\n                columns: [message.column, \"createdAt\", \"updatedAt\"],\n            });\n            return;\n        }\n        if (table.columns.includes(message.column))\n            return;\n        tablesMap.set(message.table, {\n            name: message.table,\n            columns: table.columns.concat(message.column),\n        });\n    });\n    const tables = Arr.fromIterable(tablesMap.values());\n    yield* Effect.flatMap(getSchema, ensureSchema({ tables, indexes: [] }));\n});\nconst writeTimestampAndMerkleTree = (timestamp, merkleTree) => Effect.flatMap(Sqlite, (sqlite) => sqlite.exec({\n    ...Sql.updateOwnerTimestampAndMerkleTree,\n    parameters: [\n        merkleTreeToString(merkleTree),\n        timestampToString(timestamp),\n    ],\n}));\nconst dropAllTables = Effect.gen(function* () {\n    yield* Effect.logTrace(\"Db dropAllTables\");\n    const sqlite = yield* Sqlite;\n    const schema = yield* getSchema;\n    yield* Effect.forEach(schema.tables, (table) => \n    // The dropped table is completely removed from the database schema and\n    // the disk file. The table can not be recovered.\n    // All indices and triggers associated with the table are also deleted.\n    // https://sqlite.org/lang_droptable.html\n    sqlite.exec({ sql: `drop table \"${table.name}\"` }));\n});\nconst forkSync = (messages = []) => SyncLock.pipe(Effect.flatMap((syncLock) => syncLock.tryAcquire), Effect.matchEffect({\n    onFailure: () => Effect.void,\n    onSuccess: () => syncLoop(messages),\n}), Effect.scoped, Effect.forkDaemon);\nconst syncLoop = (messages = []) => Effect.gen(function* (_) {\n    const sqlite = yield* Sqlite;\n    const sync = yield* Sync;\n    const callbacks = yield* Callbacks;\n    const time = yield* Time;\n    const syncDataRef = yield* readTimestampAndMerkleTree.pipe(sqlite.transaction(\"shared\"), Effect.map((a) => ({ ...a, messages })), Effect.flatMap(Ref.make));\n    callbacks.onSyncStateChange({ _tag: \"SyncStateIsSyncing\" });\n    yield* Ref.get(syncDataRef).pipe(Effect.flatMap(sync.sync), Effect.flatMap(handleSyncResult), Effect.repeat({\n        // TODO: Schedule.jittered(Schedule.exponential(\"10 millis\"))\n        schedule: Schedule.recurs(50),\n        until: Option.match({\n            onNone: () => Effect.gen(function* () {\n                callbacks.onSyncStateChange({\n                    _tag: \"SyncStateIsSynced\",\n                    time: yield* time.now,\n                });\n                return true;\n            }),\n            onSome: (syncData) => Effect.gen(function* () {\n                yield* Ref.set(syncDataRef, syncData);\n                return false;\n            }),\n        }),\n    }), Effect.catchAllDefect((error) => \n    // Db can run in a Web Worker, so we must ensure transferable error.\n    Effect.fail(makeUnexpectedError(ensureTransferableError(error)))), Effect.catchTag(\"SyncStateIsNotSynced\", (state) => Effect.succeed(callbacks.onSyncStateChange(state))), Effect.catchAll((error) => Effect.succeed(callbacks.onError(error))));\n});\nconst handleSyncResult = (result) => Effect.flatMap(Sqlite, (sqlite) => Effect.gen(function* (_) {\n    const { onReceive } = yield* Callbacks;\n    const current = yield* readTimestampAndMerkleTree;\n    const nextTimestamp = yield* Effect.reduce(result.messages, current.timestamp, (local, message) => receiveTimestamp({\n        local,\n        remote: unsafeTimestampFromString(message.timestamp),\n    }));\n    const nextMerkleTree = yield* applyMessages(current.merkleTree, result.messages);\n    if (result.messages.length > 0) {\n        yield* writeTimestampAndMerkleTree(nextTimestamp, nextMerkleTree);\n        onReceive();\n    }\n    return yield* diffMerkleTrees(result.merkleTree, nextMerkleTree).pipe(Effect.flatMap((diff) => sqlite.exec({\n        ...Sql.selectMessagesToSync,\n        parameters: [timestampToString(makeSyncTimestamp(diff))],\n    })), Effect.map(({ rows }) => ({\n        messages: rows,\n        merkleTree: nextMerkleTree,\n        timestamp: nextTimestamp,\n    })), Effect.option);\n}).pipe(sqlite.transaction(\"exclusive\")));\n// We use queries as keys, hence JSON.stringify.\nexport const serializeQuery = ({ sql, parameters = [], options, }) => {\n    const query = {\n        sql,\n        parameters: parameters.map((p) => Predicate.isUint8Array(p)\n            ? Arr.fromIterable(p)\n            : isJsonObjectOrArray(p)\n                ? { json: p }\n                : p),\n        ...(options && { options }),\n    };\n    return JSON.stringify(query);\n};\nexport const deserializeQuery = (query) => {\n    const serializedSqliteQuery = JSON.parse(query);\n    return {\n        ...serializedSqliteQuery,\n        parameters: serializedSqliteQuery.parameters.map((p) => Arr.isArray(p)\n            ? new Uint8Array(p)\n            : typeof p === \"object\" && p != null\n                ? p.json\n                : p),\n    };\n};\n// To preserve identity.\nconst _emptyRows = [];\nexport const emptyRows = () => _emptyRows;\n// To preserve identity.\nconst queryResultCache = new WeakMap();\nexport const queryResultFromRows = (rows) => {\n    let queryResult = queryResultCache.get(rows);\n    if (queryResult == null) {\n        queryResult = { rows, row: rows[0] };\n        queryResultCache.set(rows, queryResult);\n    }\n    return queryResult;\n};\nexport const notSupportedPlatformWorker = {\n    init: () => Effect.fail({\n        _tag: \"NotSupportedPlatformError\",\n    }),\n    loadQueries: () => Effect.succeed([]),\n    mutate: () => Effect.succeed([]),\n    resetOwner: () => Effect.void,\n    restoreOwner: () => Effect.void,\n    ensureSchema: () => Effect.void,\n    sync: () => Effect.succeed([]),\n    exportDatabase: () => Effect.succeed(new Uint8Array()),\n};\n","import * as Arr from \"effect/Array\";\nimport * as Predicate from \"effect/Predicate\";\nexport const applyPatches = (patches, current) => patches.reduce((next, patch) => {\n    switch (patch.op) {\n        case \"replaceAll\":\n            return patch.value;\n        case \"replaceAt\": {\n            return Arr.replace(next, patch.index, patch.value);\n        }\n    }\n}, current);\n/**\n * We detect only changes in the whole result and in-place edits. In the future,\n * we will add more heuristics. We will probably not implement the Myers diff\n * algorithm because it's faster to rerender all than to compute many detailed\n * patches. We will only implement logic a developer would implement manually,\n * if necessary.\n */\nexport const makePatches = (previousRows, nextRows) => {\n    if (previousRows === undefined)\n        return [{ op: \"replaceAll\", value: nextRows }];\n    // TODO: Detect prepend and append, it's cheap.\n    if (previousRows.length !== nextRows.length) {\n        return [{ op: \"replaceAll\", value: nextRows }];\n    }\n    const length = previousRows.length;\n    const replaceAtPatches = [];\n    for (let i = 0; i < length; i++) {\n        const previousRow = previousRows[i];\n        const nextRow = nextRows[i];\n        // We expect the same shape for both rows.\n        for (const key in previousRow)\n            if (!areEqual(previousRow[key], nextRow[key])) {\n                replaceAtPatches.push({ op: \"replaceAt\", value: nextRow, index: i });\n                break;\n            }\n    }\n    if (length > 0 && replaceAtPatches.length === length) {\n        return [{ op: \"replaceAll\", value: nextRows }];\n    }\n    return replaceAtPatches;\n};\nexport const areEqual = (a, b) => {\n    // Compare string, number, null ASAP.\n    if (a === b)\n        return true;\n    // Different type works only for string and number, everything else is an object.\n    if (typeof a !== typeof b)\n        return false;\n    // Both are nonnullable objects.\n    if (typeof a === \"object\" && a !== null && b !== null) {\n        const aIsUint8Array = Predicate.isUint8Array(a);\n        const bIsUint8Array = Predicate.isUint8Array(b);\n        if (aIsUint8Array && bIsUint8Array) {\n            if (a.length !== b.length)\n                return false;\n            for (let i = 0; i < a.length; i++)\n                if (a[i] !== b[i])\n                    return false;\n            return true;\n        }\n        const aIsArray = Arr.isArray(a);\n        const bIsArray = Arr.isArray(b);\n        if (aIsArray && bIsArray) {\n            if (a.length !== b.length)\n                return false;\n            for (let i = 0; i < a.length; i++)\n                if (!areEqual(a[i], b[i]))\n                    return false;\n            return true;\n        }\n        if (!aIsUint8Array && !bIsUint8Array && !aIsArray && !bIsArray) {\n            const aKeys = Object.keys(a);\n            const bKeys = Object.keys(b);\n            if (aKeys.length !== bKeys.length)\n                return false;\n            for (const key of aKeys)\n                if (!areEqual(a[key], b[key]))\n                    return false;\n            return true;\n        }\n    }\n    return false;\n};\n","/// <reference types=\"./alter-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AlterTableNode = freeze({\n    is(node) {\n        return node.kind === 'AlterTableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'AlterTableNode',\n            table,\n        });\n    },\n    cloneWithTableProps(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithColumnAlteration(node, columnAlteration) {\n        return freeze({\n            ...node,\n            columnAlterations: node.columnAlterations\n                ? [...node.columnAlterations, columnAlteration]\n                : [columnAlteration],\n        });\n    },\n});\n","/// <reference types=\"./create-index-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CreateIndexNode = freeze({\n    is(node) {\n        return node.kind === 'CreateIndexNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateIndexNode',\n            name: IdentifierNode.create(name),\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithColumns(node, columns) {\n        return freeze({\n            ...node,\n            columns: [...(node.columns || []), ...columns],\n        });\n    },\n});\n","/// <reference types=\"./create-schema-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CreateSchemaNode = freeze({\n    is(node) {\n        return node.kind === 'CreateSchemaNode';\n    },\n    create(schema, params) {\n        return freeze({\n            kind: 'CreateSchemaNode',\n            schema: IdentifierNode.create(schema),\n            ...params,\n        });\n    },\n    cloneWith(createSchema, params) {\n        return freeze({\n            ...createSchema,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./create-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport const ON_COMMIT_ACTIONS = ['preserve rows', 'delete rows', 'drop'];\n/**\n * @internal\n */\nexport const CreateTableNode = freeze({\n    is(node) {\n        return node.kind === 'CreateTableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'CreateTableNode',\n            table,\n            columns: freeze([]),\n        });\n    },\n    cloneWithColumn(createTable, column) {\n        return freeze({\n            ...createTable,\n            columns: freeze([...createTable.columns, column]),\n        });\n    },\n    cloneWithConstraint(createTable, constraint) {\n        return freeze({\n            ...createTable,\n            constraints: createTable.constraints\n                ? freeze([...createTable.constraints, constraint])\n                : freeze([constraint]),\n        });\n    },\n    cloneWithFrontModifier(createTable, modifier) {\n        return freeze({\n            ...createTable,\n            frontModifiers: createTable.frontModifiers\n                ? freeze([...createTable.frontModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWithEndModifier(createTable, modifier) {\n        return freeze({\n            ...createTable,\n            endModifiers: createTable.endModifiers\n                ? freeze([...createTable.endModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWith(createTable, params) {\n        return freeze({\n            ...createTable,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./drop-index-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const DropIndexNode = freeze({\n    is(node) {\n        return node.kind === 'DropIndexNode';\n    },\n    create(name, params) {\n        return freeze({\n            kind: 'DropIndexNode',\n            name: SchemableIdentifierNode.create(name),\n            ...params,\n        });\n    },\n    cloneWith(dropIndex, props) {\n        return freeze({\n            ...dropIndex,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./drop-schema-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const DropSchemaNode = freeze({\n    is(node) {\n        return node.kind === 'DropSchemaNode';\n    },\n    create(schema, params) {\n        return freeze({\n            kind: 'DropSchemaNode',\n            schema: IdentifierNode.create(schema),\n            ...params,\n        });\n    },\n    cloneWith(dropSchema, params) {\n        return freeze({\n            ...dropSchema,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./drop-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DropTableNode = freeze({\n    is(node) {\n        return node.kind === 'DropTableNode';\n    },\n    create(table, params) {\n        return freeze({\n            kind: 'DropTableNode',\n            table,\n            ...params,\n        });\n    },\n    cloneWith(dropIndex, params) {\n        return freeze({\n            ...dropIndex,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./add-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AddColumnNode = freeze({\n    is(node) {\n        return node.kind === 'AddColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'AddColumnNode',\n            column,\n        });\n    },\n});\n","/// <reference types=\"./column-definition-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const ColumnDefinitionNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnDefinitionNode';\n    },\n    create(column, dataType) {\n        return freeze({\n            kind: 'ColumnDefinitionNode',\n            column: ColumnNode.create(column),\n            dataType,\n        });\n    },\n    cloneWithFrontModifier(node, modifier) {\n        return freeze({\n            ...node,\n            frontModifiers: node.frontModifiers\n                ? freeze([...node.frontModifiers, modifier])\n                : [modifier],\n        });\n    },\n    cloneWithEndModifier(node, modifier) {\n        return freeze({\n            ...node,\n            endModifiers: node.endModifiers\n                ? freeze([...node.endModifiers, modifier])\n                : [modifier],\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./drop-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const DropColumnNode = freeze({\n    is(node) {\n        return node.kind === 'DropColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'DropColumnNode',\n            column: ColumnNode.create(column),\n        });\n    },\n});\n","/// <reference types=\"./rename-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const RenameColumnNode = freeze({\n    is(node) {\n        return node.kind === 'RenameColumnNode';\n    },\n    create(column, newColumn) {\n        return freeze({\n            kind: 'RenameColumnNode',\n            column: ColumnNode.create(column),\n            renameTo: ColumnNode.create(newColumn),\n        });\n    },\n});\n","/// <reference types=\"./check-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CheckConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'CheckConstraintNode';\n    },\n    create(expression, constraintName) {\n        return freeze({\n            kind: 'CheckConstraintNode',\n            expression,\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n});\n","/// <reference types=\"./references-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport const ON_MODIFY_FOREIGN_ACTIONS = [\n    'no action',\n    'restrict',\n    'cascade',\n    'set null',\n    'set default',\n];\n/**\n * @internal\n */\nexport const ReferencesNode = freeze({\n    is(node) {\n        return node.kind === 'ReferencesNode';\n    },\n    create(table, columns) {\n        return freeze({\n            kind: 'ReferencesNode',\n            table,\n            columns: freeze([...columns]),\n        });\n    },\n    cloneWithOnDelete(references, onDelete) {\n        return freeze({\n            ...references,\n            onDelete,\n        });\n    },\n    cloneWithOnUpdate(references, onUpdate) {\n        return freeze({\n            ...references,\n            onUpdate,\n        });\n    },\n});\n","/// <reference types=\"./default-value-parser.d.ts\" />\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nexport function parseDefaultValueExpression(value) {\n    return isOperationNodeSource(value)\n        ? value.toOperationNode()\n        : ValueNode.createImmediate(value);\n}\n","/// <reference types=\"./generated-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GeneratedNode = freeze({\n    is(node) {\n        return node.kind === 'GeneratedNode';\n    },\n    create(params) {\n        return freeze({\n            kind: 'GeneratedNode',\n            ...params,\n        });\n    },\n    createWithExpression(expression) {\n        return freeze({\n            kind: 'GeneratedNode',\n            always: true,\n            expression,\n        });\n    },\n    cloneWith(node, params) {\n        return freeze({\n            ...node,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./default-value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DefaultValueNode = freeze({\n    is(node) {\n        return node.kind === 'DefaultValueNode';\n    },\n    create(defaultValue) {\n        return freeze({\n            kind: 'DefaultValueNode',\n            defaultValue,\n        });\n    },\n});\n","/// <reference types=\"./on-modify-action-parser.d.ts\" />\nimport { ON_MODIFY_FOREIGN_ACTIONS, } from '../operation-node/references-node.js';\nexport function parseOnModifyForeignAction(action) {\n    if (ON_MODIFY_FOREIGN_ACTIONS.includes(action)) {\n        return action;\n    }\n    throw new Error(`invalid OnModifyForeignAction ${action}`);\n}\n","/// <reference types=\"./column-definition-builder.d.ts\" />\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\nimport { ReferencesNode, } from '../operation-node/references-node.js';\nimport { SelectAllNode } from '../operation-node/select-all-node.js';\nimport { parseStringReference } from '../parser/reference-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { parseDefaultValueExpression, } from '../parser/default-value-parser.js';\nimport { GeneratedNode } from '../operation-node/generated-node.js';\nimport { DefaultValueNode } from '../operation-node/default-value-node.js';\nimport { parseOnModifyForeignAction } from '../parser/on-modify-action-parser.js';\nexport class ColumnDefinitionBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /**\n     * Adds `auto_increment` or `autoincrement` to the column definition\n     * depending on the dialect.\n     *\n     * Some dialects like PostgreSQL don't support this. On PostgreSQL\n     * you can use the `serial` or `bigserial` data type instead.\n     */\n    autoIncrement() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { autoIncrement: true }));\n    }\n    /**\n     * Makes the column an identity column.\n     *\n     * This only works on some dialects like MS SQL Server (MSSQL).\n     *\n     * For PostgreSQL's `generated always as identity` use {@link generatedAlwaysAsIdentity}.\n     */\n    identity() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { identity: true }));\n    }\n    /**\n     * Makes the column the primary key.\n     *\n     * If you want to specify a composite primary key use the\n     * {@link CreateTableBuilder.addPrimaryKeyConstraint} method.\n     */\n    primaryKey() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { primaryKey: true }));\n    }\n    /**\n     * Adds a foreign key constraint for the column.\n     *\n     * If your database engine doesn't support foreign key constraints in the\n     * column definition (like MySQL 5) you need to call the table level\n     * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * col.references('person.id')\n     * ```\n     */\n    references(ref) {\n        const references = parseStringReference(ref);\n        if (!references.table || SelectAllNode.is(references.column)) {\n            throw new Error(`invalid call references('${ref}'). The reference must have format table.column or schema.table.column`);\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.create(references.table, [\n                references.column,\n            ]),\n        }));\n    }\n    /**\n     * Adds an `on delete` constraint for the foreign key column.\n     *\n     * If your database engine doesn't support foreign key constraints in the\n     * column definition (like MySQL 5) you need to call the table level\n     * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * col.references('person.id').onDelete('cascade')\n     * ```\n     */\n    onDelete(onDelete) {\n        if (!this.#node.references) {\n            throw new Error('on delete constraint can only be added for foreign keys');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.cloneWithOnDelete(this.#node.references, parseOnModifyForeignAction(onDelete)),\n        }));\n    }\n    /**\n     * Adds an `on update` constraint for the foreign key column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * col.references('person.id').onUpdate('cascade')\n     * ```\n     */\n    onUpdate(onUpdate) {\n        if (!this.#node.references) {\n            throw new Error('on update constraint can only be added for foreign keys');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.cloneWithOnUpdate(this.#node.references, parseOnModifyForeignAction(onUpdate)),\n        }));\n    }\n    /**\n     * Adds a unique constraint for the column.\n     */\n    unique() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { unique: true }));\n    }\n    /**\n     * Adds a `not null` constraint for the column.\n     */\n    notNull() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { notNull: true }));\n    }\n    /**\n     * Adds a `unsigned` modifier for the column.\n     *\n     * This only works on some dialects like MySQL.\n     */\n    unsigned() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { unsigned: true }));\n    }\n    /**\n     * Adds a default value constraint for the column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema\n     *   .createTable('pet')\n     *   .addColumn('number_of_legs', 'integer', (col) => col.defaultTo(4))\n     *   .execute()\n     * ```\n     *\n     * Values passed to `defaultTo` are interpreted as value literals by default. You can define\n     * an arbitrary SQL expression using the {@link sql} template tag:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * db.schema\n     *   .createTable('pet')\n     *   .addColumn(\n     *     'number_of_legs',\n     *     'integer',\n     *     (col) => col.defaultTo(sql`any SQL here`)\n     *   )\n     *   .execute()\n     * ```\n     */\n    defaultTo(value) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            defaultTo: DefaultValueNode.create(parseDefaultValueExpression(value)),\n        }));\n    }\n    /**\n     * Adds a check constraint for the column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * db.schema\n     *   .createTable('pet')\n     *   .addColumn('number_of_legs', 'integer', (col) =>\n     *     col.check(sql`number_of_legs < 5`)\n     *   )\n     *   .execute()\n     * ```\n     */\n    check(expression) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            check: CheckConstraintNode.create(expression.toOperationNode()),\n        }));\n    }\n    /**\n     * Makes the column a generated column using a `generated always as` statement.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * db.schema\n     *   .createTable('person')\n     *   .addColumn('full_name', 'varchar(255)',\n     *     (col) => col.generatedAlwaysAs(sql`concat(first_name, ' ', last_name)`)\n     *   )\n     *   .execute()\n     * ```\n     */\n    generatedAlwaysAs(expression) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.createWithExpression(expression.toOperationNode()),\n        }));\n    }\n    /**\n     * Adds the `generated always as identity` specifier.\n     *\n     * This only works on some dialects like PostgreSQL.\n     *\n     * For MS SQL Server (MSSQL)'s identity column use {@link identity}.\n     */\n    generatedAlwaysAsIdentity() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.create({ identity: true, always: true }),\n        }));\n    }\n    /**\n     * Adds the `generated by default as identity` specifier on supported dialects.\n     */\n    generatedByDefaultAsIdentity() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.create({ identity: true, byDefault: true }),\n        }));\n    }\n    /**\n     * Makes a generated column stored instead of virtual. This method can only\n     * be used with {@link generatedAlwaysAs}\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema\n     *   .createTable('person')\n     *   .addColumn('full_name', 'varchar(255)', (col) => col\n     *     .generatedAlwaysAs(\"concat(first_name, ' ', last_name)\")\n     *     .stored()\n     *   )\n     *   .execute()\n     * ```\n     */\n    stored() {\n        if (!this.#node.generated) {\n            throw new Error('stored() can only be called after generatedAlwaysAs');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.cloneWith(this.#node.generated, {\n                stored: true,\n            }),\n        }));\n    }\n    /**\n     * This can be used to add any additional SQL right after the column's data type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *  .addColumn('id', 'integer', col => col.primaryKey())\n     *  .addColumn('first_name', 'varchar(36)', col => col.modifyFront(sql`collate utf8mb4_general_ci`).notNull())\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `first_name` varchar(36) collate utf8mb4_general_ci not null\n     * )\n     * ```\n     */\n    modifyFront(modifier) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWithFrontModifier(this.#node, modifier.toOperationNode()));\n    }\n    /**\n     * Adds `nulls not distinct` specifier.\n     * Should be used with `unique` constraint.\n     *\n     * This only works on some dialects like PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *  .addColumn('id', 'integer', col => col.primaryKey())\n     *  .addColumn('first_name', 'varchar(30)', col => col.unique().nullsNotDistinct())\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create table \"person\" (\n     *   \"id\" integer primary key,\n     *   \"first_name\" varchar(30) unique nulls not distinct\n     * )\n     * ```\n     */\n    nullsNotDistinct() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { nullsNotDistinct: true }));\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the column definition.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *  .addColumn('id', 'integer', col => col.primaryKey())\n     *  .addColumn('age', 'integer', col => col.unsigned().notNull().modifyEnd(sql`comment ${sql.lit('it is not polite to ask a woman her age')}`))\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `age` integer unsigned not null comment 'it is not polite to ask a woman her age'\n     * )\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWithEndModifier(this.#node, modifier.toOperationNode()));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\npreventAwait(ColumnDefinitionBuilder, \"don't await ColumnDefinitionBuilder instances directly.\");\n","/// <reference types=\"./modify-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ModifyColumnNode = freeze({\n    is(node) {\n        return node.kind === 'ModifyColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'ModifyColumnNode',\n            column,\n        });\n    },\n});\n","/// <reference types=\"./foreign-key-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\nimport { ReferencesNode } from './references-node.js';\n/**\n * @internal\n */\nexport const ForeignKeyConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'ForeignKeyConstraintNode';\n    },\n    create(sourceColumns, targetTable, targetColumns, constraintName) {\n        return freeze({\n            kind: 'ForeignKeyConstraintNode',\n            columns: sourceColumns,\n            references: ReferencesNode.create(targetTable, targetColumns),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./foreign-key-constraint-builder.d.ts\" />\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { parseOnModifyForeignAction } from '../parser/on-modify-action-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class ForeignKeyConstraintBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    onDelete(onDelete) {\n        return new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {\n            onDelete: parseOnModifyForeignAction(onDelete),\n        }));\n    }\n    onUpdate(onUpdate) {\n        return new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {\n            onUpdate: parseOnModifyForeignAction(onUpdate),\n        }));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\npreventAwait(ForeignKeyConstraintBuilder, \"don't await ForeignKeyConstraintBuilder instances directly.\");\n","/// <reference types=\"./add-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AddConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'AddConstraintNode';\n    },\n    create(constraint) {\n        return freeze({\n            kind: 'AddConstraintNode',\n            constraint,\n        });\n    },\n});\n","/// <reference types=\"./unique-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const UniqueConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'UniqueConstraintNode';\n    },\n    create(columns, constraintName, nullsNotDistinct) {\n        return freeze({\n            kind: 'UniqueConstraintNode',\n            columns: freeze(columns.map(ColumnNode.create)),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n            nullsNotDistinct,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./drop-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const DropConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'DropConstraintNode';\n    },\n    create(constraintName) {\n        return freeze({\n            kind: 'DropConstraintNode',\n            constraintName: IdentifierNode.create(constraintName),\n        });\n    },\n    cloneWith(dropConstraint, props) {\n        return freeze({\n            ...dropConstraint,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./alter-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const AlterColumnNode = freeze({\n    is(node) {\n        return node.kind === 'AlterColumnNode';\n    },\n    create(column, prop, value) {\n        return freeze({\n            kind: 'AlterColumnNode',\n            column: ColumnNode.create(column),\n            [prop]: value,\n        });\n    },\n});\n","/// <reference types=\"./alter-column-builder.d.ts\" />\nimport { AlterColumnNode } from '../operation-node/alter-column-node.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { parseDefaultValueExpression, } from '../parser/default-value-parser.js';\nexport class AlterColumnBuilder {\n    #column;\n    constructor(column) {\n        this.#column = column;\n    }\n    setDataType(dataType) {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'dataType', parseDataTypeExpression(dataType)));\n    }\n    setDefault(value) {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'setDefault', parseDefaultValueExpression(value)));\n    }\n    dropDefault() {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'dropDefault', true));\n    }\n    setNotNull() {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'setNotNull', true));\n    }\n    dropNotNull() {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'dropNotNull', true));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n}\n/**\n * Allows us to force consumers to do exactly one alteration to a column.\n *\n * Basically, deny the following:\n *\n * ```ts\n * db.schema.alterTable('person').alterColumn('age', (ac) => ac)\n * ```\n *\n * ```ts\n * db.schema.alterTable('person').alterColumn('age', (ac) => ac.dropNotNull().setNotNull())\n * ```\n *\n * Which would now throw a compilation error, instead of a runtime error.\n */\nexport class AlteredColumnBuilder {\n    #alterColumnNode;\n    constructor(alterColumnNode) {\n        this.#alterColumnNode = alterColumnNode;\n    }\n    toOperationNode() {\n        return this.#alterColumnNode;\n    }\n}\n","/// <reference types=\"./alter-table-executor.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class AlterTableExecutor {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableExecutor, \"don't await AlterTableExecutor instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./alter-table-add-foreign-key-constraint-builder.d.ts\" />\nimport { AddConstraintNode } from '../operation-node/add-constraint-node.js';\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class AlterTableAddForeignKeyConstraintBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    onDelete(onDelete) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.onDelete(onDelete),\n        });\n    }\n    onUpdate(onUpdate) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.onUpdate(onUpdate),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(AlterTableNode.cloneWithTableProps(this.#props.node, {\n            addConstraint: AddConstraintNode.create(this.#props.constraintBuilder.toOperationNode()),\n        }), this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableAddForeignKeyConstraintBuilder, \"don't await AlterTableAddForeignKeyConstraintBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./alter-table-drop-constraint-builder.d.ts\" />\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { DropConstraintNode } from '../operation-node/drop-constraint-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class AlterTableDropConstraintBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    ifExists: true,\n                }),\n            }),\n        });\n    }\n    cascade() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    modifier: 'cascade',\n                }),\n            }),\n        });\n    }\n    restrict() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    modifier: 'restrict',\n                }),\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableDropConstraintBuilder, \"don't await AlterTableDropConstraintBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./primary-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const PrimaryConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'PrimaryKeyConstraintNode';\n    },\n    create(columns, constraintName) {\n        return freeze({\n            kind: 'PrimaryKeyConstraintNode',\n            columns: freeze(columns.map(ColumnNode.create)),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n});\n","/// <reference types=\"./add-index-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const AddIndexNode = freeze({\n    is(node) {\n        return node.kind === 'AddIndexNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'AddIndexNode',\n            name: IdentifierNode.create(name),\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithColumns(node, columns) {\n        return freeze({\n            ...node,\n            columns: [...(node.columns || []), ...columns],\n        });\n    },\n});\n","/// <reference types=\"./alter-table-add-index-builder.d.ts\" />\nimport { AddIndexNode } from '../operation-node/add-index-node.js';\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { parseOrderedColumnName, } from '../parser/reference-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class AlterTableAddIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Makes the index unique.\n     */\n    unique() {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWith(this.#props.node.addIndex, {\n                    unique: true,\n                }),\n            }),\n        });\n    }\n    /**\n     * Adds a column to the index.\n     *\n     * Also see {@link columns} for adding multiple columns at once or {@link expression}\n     * for specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *         .alterTable('person')\n     *         .createIndex('person_first_name_and_age_index')\n     *         .column('first_name')\n     *         .column('age desc')\n     *         .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` add index `person_first_name_and_age_index` (`first_name`, `age` desc)\n     * ```\n     */\n    column(column) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWithColumns(this.#props.node.addIndex, [\n                    parseOrderedColumnName(column),\n                ]),\n            }),\n        });\n    }\n    /**\n     * Specifies a list of columns for the index.\n     *\n     * Also see {@link column} for adding a single column or {@link expression} for\n     * specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *         .alterTable('person')\n     *         .addIndex('person_first_name_and_age_index')\n     *         .columns(['first_name', 'age desc'])\n     *         .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` add index `person_first_name_and_age_index` (`first_name`, `age` desc)\n     * ```\n     */\n    columns(columns) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWithColumns(this.#props.node.addIndex, columns.map(parseOrderedColumnName)),\n            }),\n        });\n    }\n    /**\n     * Specifies an arbitrary expression for the index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .alterTable('person')\n     *   .addIndex('person_first_name_index')\n     *   .expression(sql`(first_name < 'Sami')`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` add index `person_first_name_index` ((first_name < 'Sami'))\n     * ```\n     */\n    expression(expression) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWithColumns(this.#props.node.addIndex, [\n                    expression.toOperationNode(),\n                ]),\n            }),\n        });\n    }\n    using(indexType) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWith(this.#props.node.addIndex, {\n                    using: RawNode.createWithSql(indexType),\n                }),\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableAddIndexBuilder, \"don't await AlterTableAddIndexBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./unique-constraint-builder.d.ts\" />\nimport { UniqueConstraintNode } from '../operation-node/unique-constraint-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class UniqueConstraintNodeBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n    /**\n     * Adds `nulls not distinct` to the unique constraint definition\n     *\n     * Supported by PostgreSQL dialect only\n     */\n    nullsNotDistinct() {\n        return new UniqueConstraintNodeBuilder(UniqueConstraintNode.cloneWith(this.#node, { nullsNotDistinct: true }));\n    }\n}\npreventAwait(UniqueConstraintNodeBuilder, \"don't await UniqueConstraintNodeBuilder instances directly.\");\n","/// <reference types=\"./alter-table-builder.d.ts\" />\nimport { AddColumnNode } from '../operation-node/add-column-node.js';\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { DropColumnNode } from '../operation-node/drop-column-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { RenameColumnNode } from '../operation-node/rename-column-node.js';\nimport { freeze, noop } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { ColumnDefinitionBuilder, } from './column-definition-builder.js';\nimport { ModifyColumnNode } from '../operation-node/modify-column-node.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { ForeignKeyConstraintBuilder } from './foreign-key-constraint-builder.js';\nimport { AddConstraintNode } from '../operation-node/add-constraint-node.js';\nimport { UniqueConstraintNode } from '../operation-node/unique-constraint-node.js';\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { DropConstraintNode } from '../operation-node/drop-constraint-node.js';\nimport { AlterColumnBuilder, } from './alter-column-builder.js';\nimport { AlterTableExecutor } from './alter-table-executor.js';\nimport { AlterTableAddForeignKeyConstraintBuilder } from './alter-table-add-foreign-key-constraint-builder.js';\nimport { AlterTableDropConstraintBuilder } from './alter-table-drop-constraint-builder.js';\nimport { PrimaryConstraintNode } from '../operation-node/primary-constraint-node.js';\nimport { DropIndexNode } from '../operation-node/drop-index-node.js';\nimport { AddIndexNode } from '../operation-node/add-index-node.js';\nimport { AlterTableAddIndexBuilder } from './alter-table-add-index-builder.js';\nimport { UniqueConstraintNodeBuilder, } from './unique-constraint-builder.js';\n/**\n * This builder can be used to create a `alter table` query.\n */\nexport class AlterTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    renameTo(newTableName) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                renameTo: parseTable(newTableName),\n            }),\n        });\n    }\n    setSchema(newSchema) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                setSchema: IdentifierNode.create(newSchema),\n            }),\n        });\n    }\n    alterColumn(column, alteration) {\n        const builder = alteration(new AlterColumnBuilder(column));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    dropColumn(column) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, DropColumnNode.create(column)),\n        });\n    }\n    renameColumn(column, newColumn) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, RenameColumnNode.create(column, newColumn)),\n        });\n    }\n    addColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, AddColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    modifyColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, ModifyColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addUniqueConstraint}\n     */\n    addUniqueConstraint(constraintName, columns, build = noop) {\n        const uniqueConstraintBuilder = build(new UniqueConstraintNodeBuilder(UniqueConstraintNode.create(columns, constraintName)));\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: AddConstraintNode.create(uniqueConstraintBuilder.toOperationNode()),\n            }),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addCheckConstraint}\n     */\n    addCheckConstraint(constraintName, checkExpression) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: AddConstraintNode.create(CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName)),\n            }),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addForeignKeyConstraint}\n     *\n     * Unlike {@link CreateTableBuilder.addForeignKeyConstraint} this method returns\n     * the constraint builder and doesn't take a callback as the last argument. This\n     * is because you can only add one column per `ALTER TABLE` query.\n     */\n    addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), parseTable(targetTable), targetColumns.map(ColumnNode.create), constraintName)),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addPrimaryKeyConstraint}\n     */\n    addPrimaryKeyConstraint(constraintName, columns) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: AddConstraintNode.create(PrimaryConstraintNode.create(columns, constraintName)),\n            }),\n        });\n    }\n    dropConstraint(constraintName) {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.create(constraintName),\n            }),\n        });\n    }\n    /**\n     * This can be used to add index to table.\n     *\n     *  ### Examples\n     *\n     * ```ts\n     * db.schema.alterTable('person')\n     *   .addIndex('person_email_index')\n     *   .column('email')\n     *   .unique()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` add unique index `person_email_index` (`email`)\n     * ```\n     */\n    addIndex(indexName) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.create(indexName),\n            }),\n        });\n    }\n    /**\n     * This can be used to drop index from table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.alterTable('person')\n     *   .dropIndex('person_email_index')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` drop index `test_first_name_index`\n     * ```\n     */\n    dropIndex(indexName) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropIndex: DropIndexNode.create(indexName),\n            }),\n        });\n    }\n    /**\n     * Calls the given function passing `this` as the only argument.\n     *\n     * See {@link CreateTableBuilder.$call}\n     */\n    $call(func) {\n        return func(this);\n    }\n}\nexport class AlterTableColumnAlteringBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    alterColumn(column, alteration) {\n        const builder = alteration(new AlterColumnBuilder(column));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    dropColumn(column) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, DropColumnNode.create(column)),\n        });\n    }\n    renameColumn(column, newColumn) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, RenameColumnNode.create(column, newColumn)),\n        });\n    }\n    addColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, AddColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    modifyColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, ModifyColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(AlterTableBuilder, \"don't await AlterTableBuilder instances\");\npreventAwait(AlterColumnBuilder, \"don't await AlterColumnBuilder instances\");\npreventAwait(AlterTableColumnAlteringBuilder, \"don't await AlterTableColumnAlteringBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./immediate-value-transformer.d.ts\" />\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\n/**\n * Transforms all ValueNodes to immediate.\n *\n * WARNING! This should never be part of the public API. Users should never use this.\n * This is an internal helper.\n *\n * @internal\n */\nexport class ImmediateValueTransformer extends OperationNodeTransformer {\n    transformValue(node) {\n        return {\n            ...super.transformValue(node),\n            immediate: true,\n        };\n    }\n}\n","/// <reference types=\"./create-index-builder.d.ts\" />\nimport { CreateIndexNode, } from '../operation-node/create-index-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { parseOrderedColumnName, } from '../parser/reference-parser.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { ImmediateValueTransformer } from '../plugin/immediate-value/immediate-value-transformer.js';\nexport class CreateIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"if not exists\" modifier.\n     *\n     * If the index already exists, no error is thrown if this method has been called.\n     */\n    ifNotExists() {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    /**\n     * Makes the index unique.\n     */\n    unique() {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                unique: true,\n            }),\n        });\n    }\n    /**\n     * Adds `nulls not distinct` specifier to index.\n     * This only works on some dialects like PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createIndex('person_first_name_index')\n     *  .on('person')\n     *  .column('first_name')\n     *  .nullsNotDistinct()\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_index\"\n     * on \"test\" (\"first_name\")\n     * nulls not distinct;\n     * ```\n     */\n    nullsNotDistinct() {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                nullsNotDistinct: true,\n            }),\n        });\n    }\n    /**\n     * Specifies the table for the index.\n     */\n    on(table) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                table: parseTable(table),\n            }),\n        });\n    }\n    /**\n     * Adds a column to the index.\n     *\n     * Also see {@link columns} for adding multiple columns at once or {@link expression}\n     * for specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *         .createIndex('person_first_name_and_age_index')\n     *         .on('person')\n     *         .column('first_name')\n     *         .column('age desc')\n     *         .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_and_age_index\" on \"person\" (\"first_name\", \"age\" desc)\n     * ```\n     */\n    column(column) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWithColumns(this.#props.node, [\n                parseOrderedColumnName(column),\n            ]),\n        });\n    }\n    /**\n     * Specifies a list of columns for the index.\n     *\n     * Also see {@link column} for adding a single column or {@link expression} for\n     * specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *         .createIndex('person_first_name_and_age_index')\n     *         .on('person')\n     *         .columns(['first_name', 'age desc'])\n     *         .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_and_age_index\" on \"person\" (\"first_name\", \"age\" desc)\n     * ```\n     */\n    columns(columns) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWithColumns(this.#props.node, columns.map(parseOrderedColumnName)),\n        });\n    }\n    /**\n     * Specifies an arbitrary expression for the index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createIndex('person_first_name_index')\n     *   .on('person')\n     *   .expression(sql`first_name COLLATE \"fi_FI\"`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_index\" on \"person\" (first_name COLLATE \"fi_FI\")\n     * ```\n     */\n    expression(expression) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWithColumns(this.#props.node, [\n                expression.toOperationNode(),\n            ]),\n        });\n    }\n    using(indexType) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                using: RawNode.createWithSql(indexType),\n            }),\n        });\n    }\n    where(...args) {\n        const transformer = new ImmediateValueTransformer();\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: QueryNode.cloneWithWhere(this.#props.node, transformer.transformNode(parseValueBinaryOperationOrExpression(args))),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateIndexBuilder, \"don't await CreateIndexBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./create-schema-builder.d.ts\" />\nimport { CreateSchemaNode } from '../operation-node/create-schema-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class CreateSchemaBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifNotExists() {\n        return new CreateSchemaBuilder({\n            ...this.#props,\n            node: CreateSchemaNode.cloneWith(this.#props.node, { ifNotExists: true }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateSchemaBuilder, \"don't await CreateSchemaBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./on-commit-action-parse.d.ts\" />\nimport { ON_COMMIT_ACTIONS, } from '../operation-node/create-table-node.js';\nexport function parseOnCommitAction(action) {\n    if (ON_COMMIT_ACTIONS.includes(action)) {\n        return action;\n    }\n    throw new Error(`invalid OnCommitAction ${action}`);\n}\n","/// <reference types=\"./create-table-builder.d.ts\" />\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { CreateTableNode, } from '../operation-node/create-table-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { ColumnDefinitionBuilder } from './column-definition-builder.js';\nimport { freeze, noop } from '../util/object-utils.js';\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ForeignKeyConstraintBuilder } from './foreign-key-constraint-builder.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { PrimaryConstraintNode } from '../operation-node/primary-constraint-node.js';\nimport { UniqueConstraintNode } from '../operation-node/unique-constraint-node.js';\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { parseOnCommitAction } from '../parser/on-commit-action-parse.js';\nimport { UniqueConstraintNodeBuilder, } from './unique-constraint-builder.js';\nimport { parseExpression } from '../parser/expression-parser.js';\n/**\n * This builder can be used to create a `create table` query.\n */\nexport class CreateTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"temporary\" modifier.\n     *\n     * Use this to create a temporary table.\n     */\n    temporary() {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                temporary: true,\n            }),\n        });\n    }\n    /**\n     * Adds an \"on commit\" statement.\n     *\n     * This can be used in conjunction with temporary tables on supported databases\n     * like PostgreSQL.\n     */\n    onCommit(onCommit) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                onCommit: parseOnCommitAction(onCommit),\n            }),\n        });\n    }\n    /**\n     * Adds the \"if not exists\" modifier.\n     *\n     * If the table already exists, no error is thrown if this method has been called.\n     */\n    ifNotExists() {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    /**\n     * Adds a column to the table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', (col) => col.autoIncrement().primaryKey()),\n     *   .addColumn('first_name', 'varchar(50)', (col) => col.notNull())\n     *   .addColumn('last_name', 'varchar(255)')\n     *   .addColumn('bank_balance', 'numeric(8, 2)')\n     *   // You can specify any data type using the `sql` tag if the types\n     *   // don't include it.\n     *   .addColumn('data', sql`any_type_here`)\n     *   .addColumn('parent_id', 'integer', (col) =>\n     *     col.references('person.id').onDelete('cascade'))\n     *   )\n     * ```\n     *\n     * With this method, it's once again good to remember that Kysely just builds the\n     * query and doesn't provide the same API for all databases. For example, some\n     * databases like older MySQL don't support the `references` statement in the\n     * column definition. Instead foreign key constraints need to be defined in the\n     * `create table` query. See the next example:\n     *\n     * ```ts\n     *   .addColumn('parent_id', 'integer')\n     *   .addForeignKeyConstraint(\n     *     'person_parent_id_fk', ['parent_id'], 'person', ['id'],\n     *     (cb) => cb.onDelete('cascade')\n     *   )\n     * ```\n     *\n     * Another good example is that PostgreSQL doesn't support the `auto_increment`\n     * keyword and you need to define an autoincrementing column for example using\n     * `serial`:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'serial', (col) => col.primaryKey()),\n     * ```\n     */\n    addColumn(columnName, dataType, build = noop) {\n        const columnBuilder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithColumn(this.#props.node, columnBuilder.toOperationNode()),\n        });\n    }\n    /**\n     * Adds a primary key constraint for one or more columns.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addPrimaryKeyConstraint('primary_key', ['first_name', 'last_name'])\n     * ```\n     */\n    addPrimaryKeyConstraint(constraintName, columns) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, PrimaryConstraintNode.create(columns, constraintName)),\n        });\n    }\n    /**\n     * Adds a unique constraint for one or more columns.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addUniqueConstraint('first_name_last_name_unique', ['first_name', 'last_name'])\n     * ```\n     *\n     * In dialects such as PostgreSQL you can specify `nulls not distinct` as follows:\n     * ```ts\n     * addUniqueConstraint('first_name_last_name_unique', ['first_name', 'last_name'], (builder) => builder.nullsNotDistinct())\n     * ```\n     */\n    addUniqueConstraint(constraintName, columns, build = noop) {\n        const uniqueConstraintBuilder = build(new UniqueConstraintNodeBuilder(UniqueConstraintNode.create(columns, constraintName)));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, uniqueConstraintBuilder.toOperationNode()),\n        });\n    }\n    /**\n     * Adds a check constraint.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * addCheckConstraint('check_legs', sql`number_of_legs < 5`)\n     * ```\n     */\n    addCheckConstraint(constraintName, checkExpression) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName)),\n        });\n    }\n    /**\n     * Adds a foreign key constraint.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * addForeignKeyConstraint(\n     *   'owner_id_foreign',\n     *   ['owner_id'],\n     *   'person',\n     *   ['id'],\n     * )\n     * ```\n     *\n     * Add constraint for multiple columns:\n     *\n     * ```ts\n     * addForeignKeyConstraint(\n     *   'owner_id_foreign',\n     *   ['owner_id1', 'owner_id2'],\n     *   'person',\n     *   ['id1', 'id2'],\n     *   (cb) => cb.onDelete('cascade')\n     * )\n     * ```\n     */\n    addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns, build = noop) {\n        const builder = build(new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), parseTable(targetTable), targetColumns.map(ColumnNode.create), constraintName)));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the front of the query __after__ the `create` keyword.\n     *\n     * Also see {@link temporary}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *   .modifyFront(sql`global temporary`)\n     *   .addColumn('id', 'integer', col => col.primaryKey())\n     *   .addColumn('first_name', 'varchar(64)', col => col.notNull())\n     *   .addColumn('last_name', 'varchar(64), col => col.notNull())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (Postgres):\n     *\n     * ```sql\n     * create global temporary table \"person\" (\n     *   \"id\" integer primary key,\n     *   \"first_name\" varchar(64) not null,\n     *   \"last_name\" varchar(64) not null\n     * )\n     * ```\n     */\n    modifyFront(modifier) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithFrontModifier(this.#props.node, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * Also see {@link onCommit}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('person')\n     *   .addColumn('id', 'integer', col => col => primaryKey())\n     *   .addColumn('first_name', 'varchar(64)', col => col.notNull())\n     *   .addColumn('last_name', 'varchar(64), col => col.notNull())\n     *   .modifyEnd(sql`collate utf8_unicode_ci`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `first_name` varchar(64) not null,\n     *   `last_name` varchar(64) not null\n     * ) collate utf8_unicode_ci\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithEndModifier(this.#props.node, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * Allows to create table from `select` query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createTable('copy')\n     *   .temporary()\n     *   .as(db.selectFrom('person').select(['first_name', 'last_name']))\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create temporary table \"copy\" as\n     * select \"first_name\", \"last_name\" from \"person\"\n     * ```\n     */\n    as(expression) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                selectQuery: parseExpression(expression),\n            }),\n        });\n    }\n    /**\n     * Calls the given function passing `this` as the only argument.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema\n     *   .createTable('test')\n     *   .$call((builder) => builder.addColumn('id', 'integer'))\n     *   .execute()\n     * ```\n     *\n     * ```ts\n     * const addDefaultColumns = <T extends string, C extends string = never>(\n     *   builder: CreateTableBuilder<T, C>\n     * ) => {\n     *   return builder\n     *     .addColumn('id', 'integer', (col) => col.notNull())\n     *     .addColumn('created_at', 'date', (col) =>\n     *       col.notNull().defaultTo(sql`now()`)\n     *     )\n     *     .addColumn('updated_at', 'date', (col) =>\n     *       col.notNull().defaultTo(sql`now()`)\n     *     )\n     * }\n     *\n     * db.schema\n     *   .createTable('test')\n     *   .$call(addDefaultColumns)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateTableBuilder, \"don't await CreateTableBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./drop-index-builder.d.ts\" />\nimport { DropIndexNode } from '../operation-node/drop-index-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Specifies the table the index was created for. This is not needed\n     * in all dialects.\n     */\n    on(table) {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: DropIndexNode.cloneWith(this.#props.node, {\n                table: parseTable(table),\n            }),\n        });\n    }\n    ifExists() {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: DropIndexNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: DropIndexNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropIndexBuilder, \"don't await DropIndexBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./drop-schema-builder.d.ts\" />\nimport { DropSchemaNode } from '../operation-node/drop-schema-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropSchemaBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new DropSchemaBuilder({\n            ...this.#props,\n            node: DropSchemaNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropSchemaBuilder({\n            ...this.#props,\n            node: DropSchemaNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropSchemaBuilder, \"don't await DropSchemaBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./drop-table-builder.d.ts\" />\nimport { DropTableNode } from '../operation-node/drop-table-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new DropTableBuilder({\n            ...this.#props,\n            node: DropTableNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropTableBuilder({\n            ...this.#props,\n            node: DropTableNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropTableBuilder, \"don't await DropTableBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./create-view-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const CreateViewNode = freeze({\n    is(node) {\n        return node.kind === 'CreateViewNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateViewNode',\n            name: SchemableIdentifierNode.create(name),\n        });\n    },\n    cloneWith(createView, params) {\n        return freeze({\n            ...createView,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./immediate-value-plugin.d.ts\" />\nimport { ImmediateValueTransformer } from './immediate-value-transformer.js';\n/**\n * Transforms all ValueNodes to immediate.\n *\n * WARNING! This should never be part of the public API. Users should never use this.\n * This is an internal helper.\n *\n * @internal\n */\nexport class ImmediateValuePlugin {\n    #transformer = new ImmediateValueTransformer();\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node);\n    }\n    transformResult(args) {\n        return Promise.resolve(args.result);\n    }\n}\n","/// <reference types=\"./create-view-builder.d.ts\" />\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { parseColumnName } from '../parser/reference-parser.js';\nimport { ImmediateValuePlugin } from '../plugin/immediate-value/immediate-value-plugin.js';\nexport class CreateViewBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"temporary\" modifier.\n     *\n     * Use this to create a temporary view.\n     */\n    temporary() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                temporary: true,\n            }),\n        });\n    }\n    materialized() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    /**\n     * Only implemented on some dialects like SQLite. On most dialects, use {@link orReplace}.\n     */\n    ifNotExists() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    orReplace() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                orReplace: true,\n            }),\n        });\n    }\n    columns(columns) {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                columns: columns.map(parseColumnName),\n            }),\n        });\n    }\n    /**\n     * Sets the select query or a `values` statement that creates the view.\n     *\n     * WARNING!\n     * Some dialects don't support parameterized queries in DDL statements and therefore\n     * the query or raw {@link sql } expression passed here is interpolated into a single\n     * string opening an SQL injection vulnerability. DO NOT pass unchecked user input\n     * into the query or raw expression passed to this method!\n     */\n    as(query) {\n        const queryNode = query\n            .withPlugin(new ImmediateValuePlugin())\n            .toOperationNode();\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                as: queryNode,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateViewBuilder, \"don't await CreateViewBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./drop-view-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const DropViewNode = freeze({\n    is(node) {\n        return node.kind === 'DropViewNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'DropViewNode',\n            name: SchemableIdentifierNode.create(name),\n        });\n    },\n    cloneWith(dropView, params) {\n        return freeze({\n            ...dropView,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./drop-view-builder.d.ts\" />\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { DropViewNode } from '../operation-node/drop-view-node.js';\nexport class DropViewBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    materialized() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: DropViewNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    ifExists() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: DropViewNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: DropViewNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropViewBuilder, \"don't await DropViewBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./create-type-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ValueListNode } from './value-list-node.js';\nimport { ValueNode } from './value-node.js';\n/**\n * @internal\n */\nexport const CreateTypeNode = freeze({\n    is(node) {\n        return node.kind === 'CreateTypeNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateTypeNode',\n            name,\n        });\n    },\n    cloneWithEnum(createType, values) {\n        return freeze({\n            ...createType,\n            enum: ValueListNode.create(values.map((value) => ValueNode.createImmediate(value))),\n        });\n    },\n});\n","/// <reference types=\"./create-type-builder.d.ts\" />\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { CreateTypeNode } from '../operation-node/create-type-node.js';\nexport class CreateTypeBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    /**\n     * Creates an anum type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createType('species').asEnum(['cat', 'dog', 'frog'])\n     * ```\n     */\n    asEnum(values) {\n        return new CreateTypeBuilder({\n            ...this.#props,\n            node: CreateTypeNode.cloneWithEnum(this.#props.node, values),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(CreateTypeBuilder, \"don't await CreateTypeBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./drop-type-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DropTypeNode = freeze({\n    is(node) {\n        return node.kind === 'DropTypeNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'DropTypeNode',\n            name,\n        });\n    },\n    cloneWith(dropType, params) {\n        return freeze({\n            ...dropType,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./drop-type-builder.d.ts\" />\nimport { DropTypeNode } from '../operation-node/drop-type-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropTypeBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new DropTypeBuilder({\n            ...this.#props,\n            node: DropTypeNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\npreventAwait(DropTypeBuilder, \"don't await DropTypeBuilder instances directly. To execute the query you need to call `execute`\");\n","/// <reference types=\"./identifier-parser.d.ts\" />\nimport { SchemableIdentifierNode } from '../operation-node/schemable-identifier-node.js';\nexport function parseSchemableIdentifier(id) {\n    const SCHEMA_SEPARATOR = '.';\n    if (id.includes(SCHEMA_SEPARATOR)) {\n        const parts = id.split(SCHEMA_SEPARATOR).map(trim);\n        if (parts.length === 2) {\n            return SchemableIdentifierNode.createWithSchema(parts[0], parts[1]);\n        }\n        else {\n            throw new Error(`invalid schemable identifier ${id}`);\n        }\n    }\n    else {\n        return SchemableIdentifierNode.create(id);\n    }\n}\nfunction trim(str) {\n    return str.trim();\n}\n","/// <reference types=\"./schema.d.ts\" />\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { CreateIndexNode } from '../operation-node/create-index-node.js';\nimport { CreateSchemaNode } from '../operation-node/create-schema-node.js';\nimport { CreateTableNode } from '../operation-node/create-table-node.js';\nimport { DropIndexNode } from '../operation-node/drop-index-node.js';\nimport { DropSchemaNode } from '../operation-node/drop-schema-node.js';\nimport { DropTableNode } from '../operation-node/drop-table-node.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { AlterTableBuilder } from './alter-table-builder.js';\nimport { CreateIndexBuilder } from './create-index-builder.js';\nimport { CreateSchemaBuilder } from './create-schema-builder.js';\nimport { CreateTableBuilder } from './create-table-builder.js';\nimport { DropIndexBuilder } from './drop-index-builder.js';\nimport { DropSchemaBuilder } from './drop-schema-builder.js';\nimport { DropTableBuilder } from './drop-table-builder.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { CreateViewBuilder } from './create-view-builder.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { DropViewBuilder } from './drop-view-builder.js';\nimport { DropViewNode } from '../operation-node/drop-view-node.js';\nimport { CreateTypeBuilder } from './create-type-builder.js';\nimport { DropTypeBuilder } from './drop-type-builder.js';\nimport { CreateTypeNode } from '../operation-node/create-type-node.js';\nimport { DropTypeNode } from '../operation-node/drop-type-node.js';\nimport { parseSchemableIdentifier } from '../parser/identifier-parser.js';\n/**\n * Provides methods for building database schema.\n */\nexport class SchemaModule {\n    #executor;\n    constructor(executor) {\n        this.#executor = executor;\n    }\n    /**\n     * Create a new table.\n     *\n     * ### Examples\n     *\n     * This example creates a new table with columns `id`, `first_name`,\n     * `last_name` and `gender`:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('first_name', 'varchar', col => col.notNull())\n     *   .addColumn('last_name', 'varchar', col => col.notNull())\n     *   .addColumn('gender', 'varchar')\n     *   .execute()\n     * ```\n     *\n     * This example creates a table with a foreign key. Not all database\n     * engines support column-level foreign key constraint definitions.\n     * For example if you are using MySQL 5.X see the next example after\n     * this one.\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('owner_id', 'integer', col => col\n     *     .references('person.id')\n     *     .onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * This example adds a foreign key constraint for a columns just\n     * like the previous example, but using a table-level statement.\n     * On MySQL 5.X you need to define foreign key constraints like\n     * this:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('owner_id', 'integer')\n     *   .addForeignKeyConstraint(\n     *     'pet_owner_id_foreign', ['owner_id'], 'person', ['id'],\n     *     (constraint) => constraint.onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     */\n    createTable(table) {\n        return new CreateTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateTableNode.create(parseTable(table)),\n        });\n    }\n    /**\n     * Drop a table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropTable('person')\n     *   .execute()\n     * ```\n     */\n    dropTable(table) {\n        return new DropTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropTableNode.create(parseTable(table)),\n        });\n    }\n    /**\n     * Create a new index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createIndex('person_full_name_unique_index')\n     *   .on('person')\n     *   .columns(['first_name', 'last_name'])\n     *   .execute()\n     * ```\n     */\n    createIndex(indexName) {\n        return new CreateIndexBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateIndexNode.create(indexName),\n        });\n    }\n    /**\n     * Drop an index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropIndex('person_full_name_unique_index')\n     *   .execute()\n     * ```\n     */\n    dropIndex(indexName) {\n        return new DropIndexBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropIndexNode.create(indexName),\n        });\n    }\n    /**\n     * Create a new schema.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createSchema('some_schema')\n     *   .execute()\n     * ```\n     */\n    createSchema(schema) {\n        return new CreateSchemaBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateSchemaNode.create(schema),\n        });\n    }\n    /**\n     * Drop a schema.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropSchema('some_schema')\n     *   .execute()\n     * ```\n     */\n    dropSchema(schema) {\n        return new DropSchemaBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropSchemaNode.create(schema),\n        });\n    }\n    /**\n     * Alter a table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .alterTable('person')\n     *   .alterColumn('first_name', (ac) => ac.setDataType('text'))\n     *   .execute()\n     * ```\n     */\n    alterTable(table) {\n        return new AlterTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: AlterTableNode.create(parseTable(table)),\n        });\n    }\n    /**\n     * Create a new view.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createView('dogs')\n     *   .orReplace()\n     *   .as(db.selectFrom('pet').selectAll().where('species', '=', 'dog'))\n     *   .execute()\n     * ```\n     */\n    createView(viewName) {\n        return new CreateViewBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateViewNode.create(viewName),\n        });\n    }\n    /**\n     * Drop a view.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropView('dogs')\n     *   .ifExists()\n     *   .execute()\n     * ```\n     */\n    dropView(viewName) {\n        return new DropViewBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropViewNode.create(viewName),\n        });\n    }\n    /**\n     * Create a new type.\n     *\n     * Only some dialects like PostgreSQL have user-defined types.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createType('species')\n     *   .asEnum(['dog', 'cat', 'frog'])\n     *   .execute()\n     * ```\n     */\n    createType(typeName) {\n        return new CreateTypeBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateTypeNode.create(parseSchemableIdentifier(typeName)),\n        });\n    }\n    /**\n     * Drop a type.\n     *\n     * Only some dialects like PostgreSQL have user-defined types.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropType('species')\n     *   .ifExists()\n     *   .execute()\n     * ```\n     */\n    dropType(typeName) {\n        return new DropTypeBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropTypeNode.create(parseSchemableIdentifier(typeName)),\n        });\n    }\n    /**\n     * Returns a copy of this schema module with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new SchemaModule(this.#executor.withPlugin(plugin));\n    }\n    /**\n     * Returns a copy of this schema module  without any plugins.\n     */\n    withoutPlugins() {\n        return new SchemaModule(this.#executor.withoutPlugins());\n    }\n    /**\n     * See {@link QueryCreator.withSchema}\n     */\n    withSchema(schema) {\n        return new SchemaModule(this.#executor.withPluginAtFront(new WithSchemaPlugin(schema)));\n    }\n}\n","/// <reference types=\"./dynamic.d.ts\" />\nimport { DynamicReferenceBuilder } from './dynamic-reference-builder.js';\nexport class DynamicModule {\n    /**\n     * Creates a dynamic reference to a column that is not know at compile time.\n     *\n     * Kysely is built in a way that by default you can't refer to tables or columns\n     * that are not actually visible in the current query and context. This is all\n     * done by typescript at compile time, which means that you need to know the\n     * columns and tables at compile time. This is not always the case of course.\n     *\n     * This method is meant to be used in those cases where the column names\n     * come from the user input or are not otherwise known at compile time.\n     *\n     * WARNING! Unlike values, column names are not escaped by the database engine\n     * or Kysely and if you pass in unchecked column names using this method, you\n     * create an SQL injection vulnerability. Always __always__ validate the user\n     * input before passing it to this method.\n     *\n     * There are couple of examples below for some use cases, but you can pass\n     * `ref` to other methods as well. If the types allow you to pass a `ref`\n     * value to some place, it should work.\n     *\n     * ### Examples\n     *\n     * Filter by a column not know at compile time:\n     *\n     * ```ts\n     * async function someQuery(filterColumn: string, filterValue: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .selectAll()\n     *     .where(ref(filterColumn), '=', filterValue)\n     *     .execute()\n     * }\n     *\n     * someQuery('first_name', 'Arnold')\n     * someQuery('person.last_name', 'Aniston')\n     * ```\n     *\n     * Order by a column not know at compile time:\n     *\n     * ```ts\n     * async function someQuery(orderBy: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .select('person.first_name as fn')\n     *     .orderBy(ref(orderBy))\n     *     .execute()\n     * }\n     *\n     * someQuery('fn')\n     * ```\n     *\n     * In this example we add selections dynamically:\n     *\n     * ```ts\n     * const { ref } = db.dynamic\n     *\n     * // Some column name provided by the user. Value not known at compile time.\n     * const columnFromUserInput = req.query.select;\n     *\n     * // A type that lists all possible values `columnFromUserInput` can have.\n     * // You can use `keyof Person` if any column of an interface is allowed.\n     * type PossibleColumns = 'last_name' | 'first_name' | 'birth_date'\n     *\n     * const [person] = await db.selectFrom('person')\n     *   .select([\n     *     ref<PossibleColumns>(columnFromUserInput),\n     *     'id'\n     *   ])\n     *   .execute()\n     *\n     * // The resulting type contains all `PossibleColumns` as optional fields\n     * // because we cannot know which field was actually selected before\n     * // running the code.\n     * const lastName: string | undefined = person.last_name\n     * const firstName: string | undefined = person.first_name\n     * const birthDate: string | undefined = person.birth_date\n     *\n     * // The result type also contains the compile time selection `id`.\n     * person.id\n     * ```\n     */\n    ref(reference) {\n        return new DynamicReferenceBuilder(reference);\n    }\n}\n","/// <reference types=\"./default-connection-provider.d.ts\" />\nexport class DefaultConnectionProvider {\n    #driver;\n    constructor(driver) {\n        this.#driver = driver;\n    }\n    async provideConnection(consumer) {\n        const connection = await this.#driver.acquireConnection();\n        try {\n            return await consumer(connection);\n        }\n        finally {\n            await this.#driver.releaseConnection(connection);\n        }\n    }\n}\n","/// <reference types=\"./default-query-executor.d.ts\" />\nimport { QueryExecutorBase } from './query-executor-base.js';\nexport class DefaultQueryExecutor extends QueryExecutorBase {\n    #compiler;\n    #adapter;\n    #connectionProvider;\n    constructor(compiler, adapter, connectionProvider, plugins = []) {\n        super(plugins);\n        this.#compiler = compiler;\n        this.#adapter = adapter;\n        this.#connectionProvider = connectionProvider;\n    }\n    get adapter() {\n        return this.#adapter;\n    }\n    compileQuery(node) {\n        return this.#compiler.compileQuery(node);\n    }\n    provideConnection(consumer) {\n        return this.#connectionProvider.provideConnection(consumer);\n    }\n    withPlugins(plugins) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, ...plugins]);\n    }\n    withPlugin(plugin) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, plugin]);\n    }\n    withPluginAtFront(plugin) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [plugin, ...this.plugins]);\n    }\n    withConnectionProvider(connectionProvider) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, connectionProvider, [...this.plugins]);\n    }\n    withoutPlugins() {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, []);\n    }\n}\n","/// <reference types=\"./performance-now.d.ts\" />\nimport { isFunction } from './object-utils.js';\nexport function performanceNow() {\n    if (typeof performance !== 'undefined' && isFunction(performance.now)) {\n        return performance.now();\n    }\n    else {\n        return Date.now();\n    }\n}\n","/// <reference types=\"./runtime-driver.d.ts\" />\nimport { performanceNow } from '../util/performance-now.js';\n/**\n * A small wrapper around {@link Driver} that makes sure the driver is\n * initialized before it is used, only initialized and destroyed\n * once etc.\n */\nexport class RuntimeDriver {\n    #driver;\n    #log;\n    #initPromise;\n    #initDone;\n    #destroyPromise;\n    #connections = new WeakSet();\n    constructor(driver, log) {\n        this.#initDone = false;\n        this.#driver = driver;\n        this.#log = log;\n    }\n    async init() {\n        if (this.#destroyPromise) {\n            throw new Error('driver has already been destroyed');\n        }\n        if (!this.#initPromise) {\n            this.#initPromise = this.#driver\n                .init()\n                .then(() => {\n                this.#initDone = true;\n            })\n                .catch((err) => {\n                this.#initPromise = undefined;\n                return Promise.reject(err);\n            });\n        }\n        await this.#initPromise;\n    }\n    async acquireConnection() {\n        if (this.#destroyPromise) {\n            throw new Error('driver has already been destroyed');\n        }\n        if (!this.#initDone) {\n            await this.init();\n        }\n        const connection = await this.#driver.acquireConnection();\n        if (!this.#connections.has(connection)) {\n            if (this.#needsLogging()) {\n                this.#addLogging(connection);\n            }\n            this.#connections.add(connection);\n        }\n        return connection;\n    }\n    async releaseConnection(connection) {\n        await this.#driver.releaseConnection(connection);\n    }\n    beginTransaction(connection, settings) {\n        return this.#driver.beginTransaction(connection, settings);\n    }\n    commitTransaction(connection) {\n        return this.#driver.commitTransaction(connection);\n    }\n    rollbackTransaction(connection) {\n        return this.#driver.rollbackTransaction(connection);\n    }\n    async destroy() {\n        if (!this.#initPromise) {\n            return;\n        }\n        await this.#initPromise;\n        if (!this.#destroyPromise) {\n            this.#destroyPromise = this.#driver.destroy().catch((err) => {\n                this.#destroyPromise = undefined;\n                return Promise.reject(err);\n            });\n        }\n        await this.#destroyPromise;\n    }\n    #needsLogging() {\n        return (this.#log.isLevelEnabled('query') || this.#log.isLevelEnabled('error'));\n    }\n    // This method monkey patches the database connection's executeQuery method\n    // by adding logging code around it. Monkey patching is not pretty, but it's\n    // the best option in this case.\n    #addLogging(connection) {\n        const executeQuery = connection.executeQuery;\n        connection.executeQuery = async (compiledQuery) => {\n            let caughtError;\n            const startTime = performanceNow();\n            try {\n                return await executeQuery.call(connection, compiledQuery);\n            }\n            catch (error) {\n                caughtError = error;\n                await this.#logError(error, compiledQuery, startTime);\n                throw error;\n            }\n            finally {\n                if (!caughtError) {\n                    await this.#logQuery(compiledQuery, startTime);\n                }\n            }\n        };\n    }\n    async #logError(error, compiledQuery, startTime) {\n        await this.#log.error(() => ({\n            level: 'error',\n            error,\n            query: compiledQuery,\n            queryDurationMillis: this.#calculateDurationMillis(startTime),\n        }));\n    }\n    async #logQuery(compiledQuery, startTime) {\n        await this.#log.query(() => ({\n            level: 'query',\n            query: compiledQuery,\n            queryDurationMillis: this.#calculateDurationMillis(startTime),\n        }));\n    }\n    #calculateDurationMillis(startTime) {\n        return performanceNow() - startTime;\n    }\n}\n","/// <reference types=\"./single-connection-provider.d.ts\" />\nconst ignoreError = () => { };\nexport class SingleConnectionProvider {\n    #connection;\n    #runningPromise;\n    constructor(connection) {\n        this.#connection = connection;\n    }\n    async provideConnection(consumer) {\n        while (this.#runningPromise) {\n            await this.#runningPromise.catch(ignoreError);\n        }\n        // `#runningPromise` must be set to undefined before it's\n        // resolved or rejected. Otherwise the while loop above\n        // will misbehave.\n        this.#runningPromise = this.#run(consumer).finally(() => {\n            this.#runningPromise = undefined;\n        });\n        return this.#runningPromise;\n    }\n    // Run the runner in an async function to make sure it doesn't\n    // throw synchronous errors.\n    async #run(runner) {\n        return await runner(this.#connection);\n    }\n}\n","/// <reference types=\"./driver.d.ts\" />\nexport const TRANSACTION_ISOLATION_LEVELS = [\n    'read uncommitted',\n    'read committed',\n    'repeatable read',\n    'serializable',\n    'snapshot',\n];\n","/// <reference types=\"./log.d.ts\" />\nimport { freeze, isFunction } from './object-utils.js';\nexport const LOG_LEVELS = freeze(['query', 'error']);\nexport class Log {\n    #levels;\n    #logger;\n    constructor(config) {\n        if (isFunction(config)) {\n            this.#logger = config;\n            this.#levels = freeze({\n                query: true,\n                error: true,\n            });\n        }\n        else {\n            this.#logger = defaultLogger;\n            this.#levels = freeze({\n                query: config.includes('query'),\n                error: config.includes('error'),\n            });\n        }\n    }\n    isLevelEnabled(level) {\n        return this.#levels[level];\n    }\n    async query(getEvent) {\n        if (this.#levels.query) {\n            await this.#logger(getEvent());\n        }\n    }\n    async error(getEvent) {\n        if (this.#levels.error) {\n            await this.#logger(getEvent());\n        }\n    }\n}\nfunction defaultLogger(event) {\n    if (event.level === 'query') {\n        console.log(`kysely:query: ${event.query.sql}`);\n        console.log(`kysely:query: duration: ${event.queryDurationMillis.toFixed(1)}ms`);\n    }\n    else if (event.level === 'error') {\n        if (event.error instanceof Error) {\n            console.error(`kysely:error: ${event.error.stack ?? event.error.message}`);\n        }\n        else {\n            console.error(`kysely:error: ${JSON.stringify({\n                error: event.error,\n                query: event.query.sql,\n                queryDurationMillis: event.queryDurationMillis,\n            })}`);\n        }\n    }\n}\n","/// <reference types=\"./kysely.d.ts\" />\nimport { SchemaModule } from './schema/schema.js';\nimport { DynamicModule } from './dynamic/dynamic.js';\nimport { DefaultConnectionProvider } from './driver/default-connection-provider.js';\nimport { QueryCreator } from './query-creator.js';\nimport { DefaultQueryExecutor } from './query-executor/default-query-executor.js';\nimport { freeze, isObject, isUndefined } from './util/object-utils.js';\nimport { RuntimeDriver } from './driver/runtime-driver.js';\nimport { SingleConnectionProvider } from './driver/single-connection-provider.js';\nimport { TRANSACTION_ISOLATION_LEVELS, } from './driver/driver.js';\nimport { preventAwait } from './util/prevent-await.js';\nimport { createFunctionModule, } from './query-builder/function-module.js';\nimport { Log } from './util/log.js';\nimport { createQueryId } from './util/query-id.js';\nimport { isCompilable } from './util/compilable.js';\nimport { CaseBuilder } from './query-builder/case-builder.js';\nimport { CaseNode } from './operation-node/case-node.js';\nimport { parseExpression } from './parser/expression-parser.js';\nimport { WithSchemaPlugin } from './plugin/with-schema/with-schema-plugin.js';\n/**\n * The main Kysely class.\n *\n * You should create one instance of `Kysely` per database using the {@link Kysely}\n * constructor. Each `Kysely` instance maintains it's own connection pool.\n *\n * ### Examples\n *\n * This example assumes your database has tables `person` and `pet`:\n *\n * ```ts\n * import { Kysely, Generated, PostgresDialect } from 'kysely'\n *\n * interface PersonTable {\n *   id: Generated<number>\n *   first_name: string\n *   last_name: string\n * }\n *\n * interface PetTable {\n *   id: Generated<number>\n *   owner_id: number\n *   name: string\n *   species: 'cat' | 'dog'\n * }\n *\n * interface Database {\n *   person: PersonTable,\n *   pet: PetTable\n * }\n *\n * const db = new Kysely<Database>({\n *   dialect: new PostgresDialect({\n *     host: 'localhost',\n *     database: 'kysely_test',\n *   })\n * })\n * ```\n *\n * @typeParam DB - The database interface type. Keys of this type must be table names\n *    in the database and values must be interfaces that describe the rows in those\n *    tables. See the examples above.\n */\nexport class Kysely extends QueryCreator {\n    #props;\n    constructor(args) {\n        let superProps;\n        let props;\n        if (isKyselyProps(args)) {\n            superProps = { executor: args.executor };\n            props = { ...args };\n        }\n        else {\n            const dialect = args.dialect;\n            const driver = dialect.createDriver();\n            const compiler = dialect.createQueryCompiler();\n            const adapter = dialect.createAdapter();\n            const log = new Log(args.log ?? []);\n            const runtimeDriver = new RuntimeDriver(driver, log);\n            const connectionProvider = new DefaultConnectionProvider(runtimeDriver);\n            const executor = new DefaultQueryExecutor(compiler, adapter, connectionProvider, args.plugins ?? []);\n            superProps = { executor };\n            props = {\n                config: args,\n                executor,\n                dialect,\n                driver: runtimeDriver,\n            };\n        }\n        super(superProps);\n        this.#props = freeze(props);\n    }\n    /**\n     * Returns the {@link SchemaModule} module for building database schema.\n     */\n    get schema() {\n        return new SchemaModule(this.#props.executor);\n    }\n    /**\n     * Returns a the {@link DynamicModule} module.\n     *\n     * The {@link DynamicModule} module can be used to bypass strict typing and\n     * passing in dynamic values for the queries.\n     */\n    get dynamic() {\n        return new DynamicModule();\n    }\n    /**\n     * Returns a {@link DatabaseIntrospector | database introspector}.\n     */\n    get introspection() {\n        return this.#props.dialect.createIntrospector(this.withoutPlugins());\n    }\n    case(value) {\n        return new CaseBuilder({\n            node: CaseNode.create(isUndefined(value) ? undefined : parseExpression(value)),\n        });\n    }\n    /**\n     * Returns a {@link FunctionModule} that can be used to write type safe function\n     * calls.\n     *\n     * ```ts\n     * await db.selectFrom('person')\n     *   .innerJoin('pet', 'pet.owner_id', 'person.id')\n     *   .select((eb) => [\n     *     'person.id',\n     *     eb.fn.count('pet.id').as('pet_count')\n     *   ])\n     *   .groupBy('person.id')\n     *   .having((eb) => eb.fn.count('pet.id'), '>', 10)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"person\".\"id\", count(\"pet\".\"id\") as \"pet_count\"\n     * from \"person\"\n     * inner join \"pet\" on \"pet\".\"owner_id\" = \"person\".\"id\"\n     * group by \"person\".\"id\"\n     * having count(\"pet\".\"id\") > $1\n     * ```\n     */\n    get fn() {\n        return createFunctionModule();\n    }\n    /**\n     * Creates a {@link TransactionBuilder} that can be used to run queries inside a transaction.\n     *\n     * The returned {@link TransactionBuilder} can be used to configure the transaction. The\n     * {@link TransactionBuilder.execute} method can then be called to run the transaction.\n     * {@link TransactionBuilder.execute} takes a function that is run inside the\n     * transaction. If the function throws, the transaction is rolled back. Otherwise\n     * the transaction is committed.\n     *\n     * The callback function passed to the {@link TransactionBuilder.execute | execute}\n     * method gets the transaction object as its only argument. The transaction is\n     * of type {@link Transaction} which inherits {@link Kysely}. Any query\n     * started through the transaction object is executed inside the transaction.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"transactions\", \"Simple transaction\", 10) -->\n     *\n     * This example inserts two rows in a transaction. If an error is thrown inside\n     * the callback passed to the `execute` method, the transaction is rolled back.\n     * Otherwise it's committed.\n     *\n     * ```ts\n     * const catto = await db.transaction().execute(async (trx) => {\n     *   const jennifer = await trx.insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       last_name: 'Aniston',\n     *       age: 40,\n     *     })\n     *     .returning('id')\n     *     .executeTakeFirstOrThrow()\n     *\n     *   return await trx.insertInto('pet')\n     *     .values({\n     *       owner_id: jennifer.id,\n     *       name: 'Catto',\n     *       species: 'cat',\n     *       is_favorite: false,\n     *     })\n     *     .returningAll()\n     *     .executeTakeFirst()\n     * })\n     * ```\n     *\n     * Setting the isolation level:\n     *\n     * ```ts\n     * await db\n     *   .transaction()\n     *   .setIsolationLevel('serializable')\n     *   .execute(async (trx) => {\n     *     await doStuff(trx)\n     *   })\n     * ```\n     */\n    transaction() {\n        return new TransactionBuilder({ ...this.#props });\n    }\n    /**\n     * Provides a kysely instance bound to a single database connection.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .connection()\n     *   .execute(async (db) => {\n     *     // `db` is an instance of `Kysely` that's bound to a single\n     *     // database connection. All queries executed through `db` use\n     *     // the same connection.\n     *     await doStuff(db)\n     *   })\n     * ```\n     */\n    connection() {\n        return new ConnectionBuilder({ ...this.#props });\n    }\n    /**\n     * Returns a copy of this Kysely instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    /**\n     * Returns a copy of this Kysely instance without any plugins.\n     */\n    withoutPlugins() {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * @override\n     */\n    withSchema(schema) {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n    /**\n     * Returns a copy of this Kysely instance with tables added to its\n     * database type.\n     *\n     * This method only modifies the types and doesn't affect any of the\n     * executed queries in any way.\n     *\n     * ### Examples\n     *\n     * The following example adds and uses a temporary table:\n     *\n     * @example\n     * ```ts\n     * await db.schema\n     *   .createTable('temp_table')\n     *   .temporary()\n     *   .addColumn('some_column', 'integer')\n     *   .execute()\n     *\n     * const tempDb = db.withTables<{\n     *   temp_table: {\n     *     some_column: number\n     *   }\n     * }>()\n     *\n     * await tempDb\n     *   .insertInto('temp_table')\n     *   .values({ some_column: 100 })\n     *   .execute()\n     * ```\n     */\n    withTables() {\n        return new Kysely({ ...this.#props });\n    }\n    /**\n     * Releases all resources and disconnects from the database.\n     *\n     * You need to call this when you are done using the `Kysely` instance.\n     */\n    async destroy() {\n        await this.#props.driver.destroy();\n    }\n    /**\n     * Returns true if this `Kysely` instance is a transaction.\n     *\n     * You can also use `db instanceof Transaction`.\n     */\n    get isTransaction() {\n        return false;\n    }\n    /**\n     * @internal\n     * @private\n     */\n    getExecutor() {\n        return this.#props.executor;\n    }\n    /**\n     * Executes a given compiled query or query builder.\n     *\n     * See {@link https://github.com/koskimas/kysely/blob/master/site/docs/recipes/splitting-build-compile-and-execute-code.md#execute-compiled-queries splitting build, compile and execute code recipe} for more information.\n     */\n    executeQuery(query, queryId = createQueryId()) {\n        const compiledQuery = isCompilable(query) ? query.compile() : query;\n        return this.getExecutor().executeQuery(compiledQuery, queryId);\n    }\n}\nexport class Transaction extends Kysely {\n    #props;\n    constructor(props) {\n        super(props);\n        this.#props = props;\n    }\n    // The return type is `true` instead of `boolean` to make Kysely<DB>\n    // unassignable to Transaction<DB> while allowing assignment the\n    // other way around.\n    get isTransaction() {\n        return true;\n    }\n    transaction() {\n        throw new Error('calling the transaction method for a Transaction is not supported');\n    }\n    connection() {\n        throw new Error('calling the connection method for a Transaction is not supported');\n    }\n    async destroy() {\n        throw new Error('calling the destroy method for a Transaction is not supported');\n    }\n    withPlugin(plugin) {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    withoutPlugins() {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * @override\n     */\n    withSchema(schema) {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n    withTables() {\n        return new Transaction({ ...this.#props });\n    }\n}\nexport function isKyselyProps(obj) {\n    return (isObject(obj) &&\n        isObject(obj.config) &&\n        isObject(obj.driver) &&\n        isObject(obj.executor) &&\n        isObject(obj.dialect));\n}\nexport class ConnectionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    async execute(callback) {\n        return this.#props.executor.provideConnection(async (connection) => {\n            const executor = this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection));\n            const db = new Kysely({\n                ...this.#props,\n                executor,\n            });\n            return await callback(db);\n        });\n    }\n}\npreventAwait(ConnectionBuilder, \"don't await ConnectionBuilder instances directly. To execute the query you need to call the `execute` method\");\nexport class TransactionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    setIsolationLevel(isolationLevel) {\n        return new TransactionBuilder({\n            ...this.#props,\n            isolationLevel,\n        });\n    }\n    async execute(callback) {\n        const { isolationLevel, ...kyselyProps } = this.#props;\n        const settings = { isolationLevel };\n        validateTransactionSettings(settings);\n        return this.#props.executor.provideConnection(async (connection) => {\n            const executor = this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection));\n            const transaction = new Transaction({\n                ...kyselyProps,\n                executor,\n            });\n            try {\n                await this.#props.driver.beginTransaction(connection, settings);\n                const result = await callback(transaction);\n                await this.#props.driver.commitTransaction(connection);\n                return result;\n            }\n            catch (error) {\n                await this.#props.driver.rollbackTransaction(connection);\n                throw error;\n            }\n        });\n    }\n}\npreventAwait(TransactionBuilder, \"don't await TransactionBuilder instances directly. To execute the transaction you need to call the `execute` method\");\nfunction validateTransactionSettings(settings) {\n    if (settings.isolationLevel &&\n        !TRANSACTION_ISOLATION_LEVELS.includes(settings.isolationLevel)) {\n        throw new Error(`invalid transaction isolation level ${settings.isolationLevel}`);\n    }\n}\n","/// <reference types=\"./compilable.d.ts\" />\nimport { isFunction, isObject } from './object-utils.js';\nexport function isCompilable(value) {\n    return isObject(value) && isFunction(value.compile);\n}\n","/// <reference types=\"./dialect-adapter-base.d.ts\" />\n/**\n * A basic implementation of `DialectAdapter` with sensible default values.\n * 3rd party dialects can extend this instead of implementing the `DialectAdapter`\n * interface from scratch. That way all new settings will get default values when\n * they are added and there will be less breaking changes.\n */\nexport class DialectAdapterBase {\n    get supportsCreateIfNotExists() {\n        return true;\n    }\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return false;\n    }\n}\n","/// <reference types=\"./sqlite-adapter.d.ts\" />\nimport { DialectAdapterBase } from '../dialect-adapter-base.js';\nexport class SqliteAdapter extends DialectAdapterBase {\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return true;\n    }\n    async acquireMigrationLock(_db, _opt) {\n        // SQLite only has one connection that's reserved by the migration system\n        // for the whole time between acquireMigrationLock and releaseMigrationLock.\n        // We don't need to do anything here.\n    }\n    async releaseMigrationLock(_db, _opt) {\n        // SQLite only has one connection that's reserved by the migration system\n        // for the whole time between acquireMigrationLock and releaseMigrationLock.\n        // We don't need to do anything here.\n    }\n}\n","/// <reference types=\"./dummy-driver.d.ts\" />\n/**\n * A driver that does absolutely nothing.\n *\n * You can use this to create Kysely instances solely for building queries\n *\n * ### Examples\n *\n * This example creates a Kysely instance for building postgres queries:\n *\n * ```ts\n * const db = new Kysely<Database>({\n *   dialect: {\n *     createAdapter() {\n *       return new PostgresAdapter()\n *     },\n *     createDriver() {\n *       return new DummyDriver()\n *     },\n *     createIntrospector(db: Kysely<any>) {\n *       return new PostgresIntrospector(db)\n *     },\n *     createQueryCompiler() {\n *       return new PostgresQueryCompiler()\n *     },\n *   },\n * })\n * ```\n *\n * You can use it to build a query and compile it to SQL but trying to\n * execute the query will throw an error.\n *\n * ```ts\n * const { sql } = db.selectFrom('person').selectAll().compile()\n * console.log(sql) // select * from \"person\"\n * ```\n */\nexport class DummyDriver {\n    async init() {\n        // Nothing to do here.\n    }\n    async acquireConnection() {\n        return new DummyConnection();\n    }\n    async beginTransaction() {\n        // Nothing to do here.\n    }\n    async commitTransaction() {\n        // Nothing to do here.\n    }\n    async rollbackTransaction() {\n        // Nothing to do here.\n    }\n    async releaseConnection() {\n        // Nothing to do here.\n    }\n    async destroy() {\n        // Nothing to do here.\n    }\n}\nclass DummyConnection {\n    async executeQuery() {\n        return {\n            rows: [],\n        };\n    }\n    async *streamQuery() {\n        // Nothing to do here.\n    }\n}\n","/// <reference types=\"./operation-node-visitor.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport class OperationNodeVisitor {\n    nodeStack = [];\n    get parentNode() {\n        return this.nodeStack[this.nodeStack.length - 2];\n    }\n    #visitors = freeze({\n        AliasNode: this.visitAlias.bind(this),\n        ColumnNode: this.visitColumn.bind(this),\n        IdentifierNode: this.visitIdentifier.bind(this),\n        SchemableIdentifierNode: this.visitSchemableIdentifier.bind(this),\n        RawNode: this.visitRaw.bind(this),\n        ReferenceNode: this.visitReference.bind(this),\n        SelectQueryNode: this.visitSelectQuery.bind(this),\n        SelectionNode: this.visitSelection.bind(this),\n        TableNode: this.visitTable.bind(this),\n        FromNode: this.visitFrom.bind(this),\n        SelectAllNode: this.visitSelectAll.bind(this),\n        AndNode: this.visitAnd.bind(this),\n        OrNode: this.visitOr.bind(this),\n        ValueNode: this.visitValue.bind(this),\n        ValueListNode: this.visitValueList.bind(this),\n        PrimitiveValueListNode: this.visitPrimitiveValueList.bind(this),\n        ParensNode: this.visitParens.bind(this),\n        JoinNode: this.visitJoin.bind(this),\n        OperatorNode: this.visitOperator.bind(this),\n        WhereNode: this.visitWhere.bind(this),\n        InsertQueryNode: this.visitInsertQuery.bind(this),\n        DeleteQueryNode: this.visitDeleteQuery.bind(this),\n        ReturningNode: this.visitReturning.bind(this),\n        CreateTableNode: this.visitCreateTable.bind(this),\n        AddColumnNode: this.visitAddColumn.bind(this),\n        ColumnDefinitionNode: this.visitColumnDefinition.bind(this),\n        DropTableNode: this.visitDropTable.bind(this),\n        DataTypeNode: this.visitDataType.bind(this),\n        OrderByNode: this.visitOrderBy.bind(this),\n        OrderByItemNode: this.visitOrderByItem.bind(this),\n        GroupByNode: this.visitGroupBy.bind(this),\n        GroupByItemNode: this.visitGroupByItem.bind(this),\n        UpdateQueryNode: this.visitUpdateQuery.bind(this),\n        ColumnUpdateNode: this.visitColumnUpdate.bind(this),\n        LimitNode: this.visitLimit.bind(this),\n        OffsetNode: this.visitOffset.bind(this),\n        OnConflictNode: this.visitOnConflict.bind(this),\n        OnDuplicateKeyNode: this.visitOnDuplicateKey.bind(this),\n        CreateIndexNode: this.visitCreateIndex.bind(this),\n        DropIndexNode: this.visitDropIndex.bind(this),\n        ListNode: this.visitList.bind(this),\n        PrimaryKeyConstraintNode: this.visitPrimaryKeyConstraint.bind(this),\n        UniqueConstraintNode: this.visitUniqueConstraint.bind(this),\n        ReferencesNode: this.visitReferences.bind(this),\n        CheckConstraintNode: this.visitCheckConstraint.bind(this),\n        WithNode: this.visitWith.bind(this),\n        CommonTableExpressionNode: this.visitCommonTableExpression.bind(this),\n        CommonTableExpressionNameNode: this.visitCommonTableExpressionName.bind(this),\n        HavingNode: this.visitHaving.bind(this),\n        CreateSchemaNode: this.visitCreateSchema.bind(this),\n        DropSchemaNode: this.visitDropSchema.bind(this),\n        AlterTableNode: this.visitAlterTable.bind(this),\n        DropColumnNode: this.visitDropColumn.bind(this),\n        RenameColumnNode: this.visitRenameColumn.bind(this),\n        AlterColumnNode: this.visitAlterColumn.bind(this),\n        ModifyColumnNode: this.visitModifyColumn.bind(this),\n        AddConstraintNode: this.visitAddConstraint.bind(this),\n        DropConstraintNode: this.visitDropConstraint.bind(this),\n        ForeignKeyConstraintNode: this.visitForeignKeyConstraint.bind(this),\n        CreateViewNode: this.visitCreateView.bind(this),\n        DropViewNode: this.visitDropView.bind(this),\n        GeneratedNode: this.visitGenerated.bind(this),\n        DefaultValueNode: this.visitDefaultValue.bind(this),\n        OnNode: this.visitOn.bind(this),\n        ValuesNode: this.visitValues.bind(this),\n        SelectModifierNode: this.visitSelectModifier.bind(this),\n        CreateTypeNode: this.visitCreateType.bind(this),\n        DropTypeNode: this.visitDropType.bind(this),\n        ExplainNode: this.visitExplain.bind(this),\n        DefaultInsertValueNode: this.visitDefaultInsertValue.bind(this),\n        AggregateFunctionNode: this.visitAggregateFunction.bind(this),\n        OverNode: this.visitOver.bind(this),\n        PartitionByNode: this.visitPartitionBy.bind(this),\n        PartitionByItemNode: this.visitPartitionByItem.bind(this),\n        SetOperationNode: this.visitSetOperation.bind(this),\n        BinaryOperationNode: this.visitBinaryOperation.bind(this),\n        UnaryOperationNode: this.visitUnaryOperation.bind(this),\n        UsingNode: this.visitUsing.bind(this),\n        FunctionNode: this.visitFunction.bind(this),\n        CaseNode: this.visitCase.bind(this),\n        WhenNode: this.visitWhen.bind(this),\n        JSONReferenceNode: this.visitJSONReference.bind(this),\n        JSONPathNode: this.visitJSONPath.bind(this),\n        JSONPathLegNode: this.visitJSONPathLeg.bind(this),\n        JSONOperatorChainNode: this.visitJSONOperatorChain.bind(this),\n        TupleNode: this.visitTuple.bind(this),\n        MergeQueryNode: this.visitMergeQuery.bind(this),\n        MatchedNode: this.visitMatched.bind(this),\n        AddIndexNode: this.visitAddIndex.bind(this),\n        CastNode: this.visitCast.bind(this),\n        FetchNode: this.visitFetch.bind(this),\n        TopNode: this.visitTop.bind(this),\n    });\n    visitNode = (node) => {\n        this.nodeStack.push(node);\n        this.#visitors[node.kind](node);\n        this.nodeStack.pop();\n    };\n}\n","/// <reference types=\"./default-query-compiler.d.ts\" />\nimport { CreateTableNode } from '../operation-node/create-table-node.js';\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { OperationNodeVisitor } from '../operation-node/operation-node-visitor.js';\nimport { OperatorNode } from '../operation-node/operator-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { freeze, isString, isNumber, isBoolean, isNull, isDate, isBigInt, } from '../util/object-utils.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { SetOperationNode } from '../operation-node/set-operation-node.js';\nimport { MergeQueryNode } from '../operation-node/merge-query-node.js';\nexport class DefaultQueryCompiler extends OperationNodeVisitor {\n    #sql = '';\n    #parameters = [];\n    get numParameters() {\n        return this.#parameters.length;\n    }\n    compileQuery(node) {\n        this.#sql = '';\n        this.#parameters = [];\n        this.visitNode(node);\n        return freeze({\n            query: node,\n            sql: this.getSql(),\n            parameters: [...this.#parameters],\n        });\n    }\n    getSql() {\n        return this.#sql;\n    }\n    visitSelectQuery(node) {\n        const wrapInParens = this.parentNode !== undefined &&\n            !ParensNode.is(this.parentNode) &&\n            !InsertQueryNode.is(this.parentNode) &&\n            !CreateTableNode.is(this.parentNode) &&\n            !CreateViewNode.is(this.parentNode) &&\n            !SetOperationNode.is(this.parentNode);\n        if (this.parentNode === undefined && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (wrapInParens) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('select');\n        if (node.distinctOn) {\n            this.append(' ');\n            this.compileDistinctOn(node.distinctOn);\n        }\n        if (node.frontModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.frontModifiers, ' ');\n        }\n        if (node.top) {\n            this.append(' ');\n            this.visitNode(node.top);\n        }\n        if (node.selections) {\n            this.append(' ');\n            this.compileList(node.selections);\n        }\n        if (node.from) {\n            this.append(' ');\n            this.visitNode(node.from);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.groupBy) {\n            this.append(' ');\n            this.visitNode(node.groupBy);\n        }\n        if (node.having) {\n            this.append(' ');\n            this.visitNode(node.having);\n        }\n        if (node.setOperations) {\n            this.append(' ');\n            this.compileList(node.setOperations, ' ');\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.offset) {\n            this.append(' ');\n            this.visitNode(node.offset);\n        }\n        if (node.fetch) {\n            this.append(' ');\n            this.visitNode(node.fetch);\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(this.sortSelectModifiers([...node.endModifiers]), ' ');\n        }\n        if (wrapInParens) {\n            this.append(')');\n        }\n    }\n    visitFrom(node) {\n        this.append('from ');\n        this.compileList(node.froms);\n    }\n    visitSelection(node) {\n        this.visitNode(node.selection);\n    }\n    visitColumn(node) {\n        this.visitNode(node.column);\n    }\n    compileDistinctOn(expressions) {\n        this.append('distinct on (');\n        this.compileList(expressions);\n        this.append(')');\n    }\n    compileList(nodes, separator = ', ') {\n        const lastIndex = nodes.length - 1;\n        for (let i = 0; i <= lastIndex; i++) {\n            this.visitNode(nodes[i]);\n            if (i < lastIndex) {\n                this.append(separator);\n            }\n        }\n    }\n    visitWhere(node) {\n        this.append('where ');\n        this.visitNode(node.where);\n    }\n    visitHaving(node) {\n        this.append('having ');\n        this.visitNode(node.having);\n    }\n    visitInsertQuery(node) {\n        const rootQueryNode = this.nodeStack.find(QueryNode.is);\n        const isSubQuery = rootQueryNode !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append(node.replace ? 'replace' : 'insert');\n        if (node.ignore) {\n            this.append(' ignore');\n        }\n        if (node.top) {\n            this.append(' ');\n            this.visitNode(node.top);\n        }\n        if (node.into) {\n            this.append(' into ');\n            this.visitNode(node.into);\n        }\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.values) {\n            this.append(' ');\n            this.visitNode(node.values);\n        }\n        if (node.defaultValues) {\n            this.append(' ');\n            this.append('default values');\n        }\n        if (node.onConflict) {\n            this.append(' ');\n            this.visitNode(node.onConflict);\n        }\n        if (node.onDuplicateKey) {\n            this.append(' ');\n            this.visitNode(node.onDuplicateKey);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append(')');\n        }\n    }\n    visitValues(node) {\n        this.append('values ');\n        this.compileList(node.values);\n    }\n    visitDeleteQuery(node) {\n        const isSubQuery = this.nodeStack.find(QueryNode.is) !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('delete ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        this.visitNode(node.from);\n        if (node.using) {\n            this.append(' ');\n            this.visitNode(node.using);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery) {\n            this.append(')');\n        }\n    }\n    visitReturning(node) {\n        this.append('returning ');\n        this.compileList(node.selections);\n    }\n    visitAlias(node) {\n        this.visitNode(node.node);\n        this.append(' as ');\n        this.visitNode(node.alias);\n    }\n    visitReference(node) {\n        if (node.table) {\n            this.visitNode(node.table);\n            this.append('.');\n        }\n        this.visitNode(node.column);\n    }\n    visitSelectAll(_) {\n        this.append('*');\n    }\n    visitIdentifier(node) {\n        this.append(this.getLeftIdentifierWrapper());\n        this.compileUnwrappedIdentifier(node);\n        this.append(this.getRightIdentifierWrapper());\n    }\n    compileUnwrappedIdentifier(node) {\n        if (!isString(node.name)) {\n            throw new Error('a non-string identifier was passed to compileUnwrappedIdentifier.');\n        }\n        this.append(this.sanitizeIdentifier(node.name));\n    }\n    visitAnd(node) {\n        this.visitNode(node.left);\n        this.append(' and ');\n        this.visitNode(node.right);\n    }\n    visitOr(node) {\n        this.visitNode(node.left);\n        this.append(' or ');\n        this.visitNode(node.right);\n    }\n    visitValue(node) {\n        if (node.immediate) {\n            this.appendImmediateValue(node.value);\n        }\n        else {\n            this.appendValue(node.value);\n        }\n    }\n    visitValueList(node) {\n        this.append('(');\n        this.compileList(node.values);\n        this.append(')');\n    }\n    visitTuple(node) {\n        this.append('(');\n        this.compileList(node.values);\n        this.append(')');\n    }\n    visitPrimitiveValueList(node) {\n        this.append('(');\n        const { values } = node;\n        for (let i = 0; i < values.length; ++i) {\n            this.appendValue(values[i]);\n            if (i !== values.length - 1) {\n                this.append(', ');\n            }\n        }\n        this.append(')');\n    }\n    visitParens(node) {\n        this.append('(');\n        this.visitNode(node.node);\n        this.append(')');\n    }\n    visitJoin(node) {\n        this.append(JOIN_TYPE_SQL[node.joinType]);\n        this.append(' ');\n        this.visitNode(node.table);\n        if (node.on) {\n            this.append(' ');\n            this.visitNode(node.on);\n        }\n    }\n    visitOn(node) {\n        this.append('on ');\n        this.visitNode(node.on);\n    }\n    visitRaw(node) {\n        const { sqlFragments, parameters: params } = node;\n        for (let i = 0; i < sqlFragments.length; ++i) {\n            this.append(sqlFragments[i]);\n            if (params.length > i) {\n                this.visitNode(params[i]);\n            }\n        }\n    }\n    visitOperator(node) {\n        this.append(node.operator);\n    }\n    visitTable(node) {\n        this.visitNode(node.table);\n    }\n    visitSchemableIdentifier(node) {\n        if (node.schema) {\n            this.visitNode(node.schema);\n            this.append('.');\n        }\n        this.visitNode(node.identifier);\n    }\n    visitCreateTable(node) {\n        this.append('create ');\n        if (node.frontModifiers && node.frontModifiers.length > 0) {\n            this.compileList(node.frontModifiers, ' ');\n            this.append(' ');\n        }\n        if (node.temporary) {\n            this.append('temporary ');\n        }\n        this.append('table ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.table);\n        if (node.selectQuery) {\n            this.append(' as ');\n            this.visitNode(node.selectQuery);\n        }\n        else {\n            this.append(' (');\n            this.compileList([...node.columns, ...(node.constraints ?? [])]);\n            this.append(')');\n            if (node.onCommit) {\n                this.append(' on commit ');\n                this.append(node.onCommit);\n            }\n            if (node.endModifiers && node.endModifiers.length > 0) {\n                this.append(' ');\n                this.compileList(node.endModifiers, ' ');\n            }\n        }\n    }\n    visitColumnDefinition(node) {\n        this.visitNode(node.column);\n        this.append(' ');\n        this.visitNode(node.dataType);\n        if (node.unsigned) {\n            this.append(' unsigned');\n        }\n        if (node.frontModifiers && node.frontModifiers.length > 0) {\n            this.append(' ');\n            this.compileList(node.frontModifiers, ' ');\n        }\n        if (node.generated) {\n            this.append(' ');\n            this.visitNode(node.generated);\n        }\n        if (node.identity) {\n            this.append(' identity');\n        }\n        if (node.defaultTo) {\n            this.append(' ');\n            this.visitNode(node.defaultTo);\n        }\n        if (node.notNull) {\n            this.append(' not null');\n        }\n        if (node.unique) {\n            this.append(' unique');\n        }\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        if (node.primaryKey) {\n            this.append(' primary key');\n        }\n        if (node.autoIncrement) {\n            this.append(' ');\n            this.append(this.getAutoIncrement());\n        }\n        if (node.references) {\n            this.append(' ');\n            this.visitNode(node.references);\n        }\n        if (node.check) {\n            this.append(' ');\n            this.visitNode(node.check);\n        }\n        if (node.endModifiers && node.endModifiers.length > 0) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    getAutoIncrement() {\n        return 'auto_increment';\n    }\n    visitReferences(node) {\n        this.append('references ');\n        this.visitNode(node.table);\n        this.append(' (');\n        this.compileList(node.columns);\n        this.append(')');\n        if (node.onDelete) {\n            this.append(' on delete ');\n            this.append(node.onDelete);\n        }\n        if (node.onUpdate) {\n            this.append(' on update ');\n            this.append(node.onUpdate);\n        }\n    }\n    visitDropTable(node) {\n        this.append('drop table ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.table);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitDataType(node) {\n        this.append(node.dataType);\n    }\n    visitOrderBy(node) {\n        this.append('order by ');\n        this.compileList(node.items);\n    }\n    visitOrderByItem(node) {\n        this.visitNode(node.orderBy);\n        if (node.direction) {\n            this.append(' ');\n            this.visitNode(node.direction);\n        }\n    }\n    visitGroupBy(node) {\n        this.append('group by ');\n        this.compileList(node.items);\n    }\n    visitGroupByItem(node) {\n        this.visitNode(node.groupBy);\n    }\n    visitUpdateQuery(node) {\n        const rootQueryNode = this.nodeStack.find(QueryNode.is);\n        const isSubQuery = rootQueryNode !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('update ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        if (node.table) {\n            this.visitNode(node.table);\n            this.append(' ');\n        }\n        this.append('set ');\n        if (node.updates) {\n            this.compileList(node.updates);\n        }\n        if (node.from) {\n            this.append(' ');\n            this.visitNode(node.from);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append(')');\n        }\n    }\n    visitColumnUpdate(node) {\n        this.visitNode(node.column);\n        this.append(' = ');\n        this.visitNode(node.value);\n    }\n    visitLimit(node) {\n        this.append('limit ');\n        this.visitNode(node.limit);\n    }\n    visitOffset(node) {\n        this.append('offset ');\n        this.visitNode(node.offset);\n    }\n    visitOnConflict(node) {\n        this.append('on conflict');\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        else if (node.constraint) {\n            this.append(' on constraint ');\n            this.visitNode(node.constraint);\n        }\n        else if (node.indexExpression) {\n            this.append(' (');\n            this.visitNode(node.indexExpression);\n            this.append(')');\n        }\n        if (node.indexWhere) {\n            this.append(' ');\n            this.visitNode(node.indexWhere);\n        }\n        if (node.doNothing === true) {\n            this.append(' do nothing');\n        }\n        else if (node.updates) {\n            this.append(' do update set ');\n            this.compileList(node.updates);\n            if (node.updateWhere) {\n                this.append(' ');\n                this.visitNode(node.updateWhere);\n            }\n        }\n    }\n    visitOnDuplicateKey(node) {\n        this.append('on duplicate key update ');\n        this.compileList(node.updates);\n    }\n    visitCreateIndex(node) {\n        this.append('create ');\n        if (node.unique) {\n            this.append('unique ');\n        }\n        this.append('index ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.using) {\n            this.append(' using ');\n            this.visitNode(node.using);\n        }\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n    }\n    visitDropIndex(node) {\n        this.append('drop index ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitCreateSchema(node) {\n        this.append('create schema ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.schema);\n    }\n    visitDropSchema(node) {\n        this.append('drop schema ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.schema);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitPrimaryKeyConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('primary key (');\n        this.compileList(node.columns);\n        this.append(')');\n    }\n    visitUniqueConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('unique');\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        this.append(' (');\n        this.compileList(node.columns);\n        this.append(')');\n    }\n    visitCheckConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('check (');\n        this.visitNode(node.expression);\n        this.append(')');\n    }\n    visitForeignKeyConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('foreign key (');\n        this.compileList(node.columns);\n        this.append(') ');\n        this.visitNode(node.references);\n        if (node.onDelete) {\n            this.append(' on delete ');\n            this.append(node.onDelete);\n        }\n        if (node.onUpdate) {\n            this.append(' on update ');\n            this.append(node.onUpdate);\n        }\n    }\n    visitList(node) {\n        this.compileList(node.items);\n    }\n    visitWith(node) {\n        this.append('with ');\n        if (node.recursive) {\n            this.append('recursive ');\n        }\n        this.compileList(node.expressions);\n    }\n    visitCommonTableExpression(node) {\n        this.visitNode(node.name);\n        this.append(' as ');\n        if (isBoolean(node.materialized)) {\n            if (!node.materialized) {\n                this.append('not ');\n            }\n            this.append('materialized ');\n        }\n        this.visitNode(node.expression);\n    }\n    visitCommonTableExpressionName(node) {\n        this.visitNode(node.table);\n        if (node.columns) {\n            this.append('(');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n    }\n    visitAlterTable(node) {\n        this.append('alter table ');\n        this.visitNode(node.table);\n        this.append(' ');\n        if (node.renameTo) {\n            this.append('rename to ');\n            this.visitNode(node.renameTo);\n        }\n        if (node.setSchema) {\n            this.append('set schema ');\n            this.visitNode(node.setSchema);\n        }\n        if (node.addConstraint) {\n            this.visitNode(node.addConstraint);\n        }\n        if (node.dropConstraint) {\n            this.visitNode(node.dropConstraint);\n        }\n        if (node.columnAlterations) {\n            this.compileColumnAlterations(node.columnAlterations);\n        }\n        if (node.addIndex) {\n            this.visitNode(node.addIndex);\n        }\n        if (node.dropIndex) {\n            this.visitNode(node.dropIndex);\n        }\n    }\n    visitAddColumn(node) {\n        this.append('add column ');\n        this.visitNode(node.column);\n    }\n    visitRenameColumn(node) {\n        this.append('rename column ');\n        this.visitNode(node.column);\n        this.append(' to ');\n        this.visitNode(node.renameTo);\n    }\n    visitDropColumn(node) {\n        this.append('drop column ');\n        this.visitNode(node.column);\n    }\n    visitAlterColumn(node) {\n        this.append('alter column ');\n        this.visitNode(node.column);\n        this.append(' ');\n        if (node.dataType) {\n            if (this.announcesNewColumnDataType()) {\n                this.append('type ');\n            }\n            this.visitNode(node.dataType);\n            if (node.dataTypeExpression) {\n                this.append('using ');\n                this.visitNode(node.dataTypeExpression);\n            }\n        }\n        if (node.setDefault) {\n            this.append('set default ');\n            this.visitNode(node.setDefault);\n        }\n        if (node.dropDefault) {\n            this.append('drop default');\n        }\n        if (node.setNotNull) {\n            this.append('set not null');\n        }\n        if (node.dropNotNull) {\n            this.append('drop not null');\n        }\n    }\n    visitModifyColumn(node) {\n        this.append('modify column ');\n        this.visitNode(node.column);\n    }\n    visitAddConstraint(node) {\n        this.append('add ');\n        this.visitNode(node.constraint);\n    }\n    visitDropConstraint(node) {\n        this.append('drop constraint ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.constraintName);\n        if (node.modifier === 'cascade') {\n            this.append(' cascade');\n        }\n        else if (node.modifier === 'restrict') {\n            this.append(' restrict');\n        }\n    }\n    visitSetOperation(node) {\n        this.append(node.operator);\n        this.append(' ');\n        if (node.all) {\n            this.append('all ');\n        }\n        this.visitNode(node.expression);\n    }\n    visitCreateView(node) {\n        this.append('create ');\n        if (node.orReplace) {\n            this.append('or replace ');\n        }\n        if (node.materialized) {\n            this.append('materialized ');\n        }\n        if (node.temporary) {\n            this.append('temporary ');\n        }\n        this.append('view ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        this.append(' ');\n        if (node.columns) {\n            this.append('(');\n            this.compileList(node.columns);\n            this.append(') ');\n        }\n        if (node.as) {\n            this.append('as ');\n            this.visitNode(node.as);\n        }\n    }\n    visitDropView(node) {\n        this.append('drop ');\n        if (node.materialized) {\n            this.append('materialized ');\n        }\n        this.append('view ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitGenerated(node) {\n        this.append('generated ');\n        if (node.always) {\n            this.append('always ');\n        }\n        if (node.byDefault) {\n            this.append('by default ');\n        }\n        this.append('as ');\n        if (node.identity) {\n            this.append('identity');\n        }\n        if (node.expression) {\n            this.append('(');\n            this.visitNode(node.expression);\n            this.append(')');\n        }\n        if (node.stored) {\n            this.append(' stored');\n        }\n    }\n    visitDefaultValue(node) {\n        this.append('default ');\n        this.visitNode(node.defaultValue);\n    }\n    visitSelectModifier(node) {\n        if (node.rawModifier) {\n            this.visitNode(node.rawModifier);\n        }\n        else {\n            this.append(SELECT_MODIFIER_SQL[node.modifier]);\n        }\n        if (node.of) {\n            this.append(' of ');\n            this.compileList(node.of, ', ');\n        }\n    }\n    visitCreateType(node) {\n        this.append('create type ');\n        this.visitNode(node.name);\n        if (node.enum) {\n            this.append(' as enum ');\n            this.visitNode(node.enum);\n        }\n    }\n    visitDropType(node) {\n        this.append('drop type ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n    }\n    visitExplain(node) {\n        this.append('explain');\n        if (node.options || node.format) {\n            this.append(' ');\n            this.append(this.getLeftExplainOptionsWrapper());\n            if (node.options) {\n                this.visitNode(node.options);\n                if (node.format) {\n                    this.append(this.getExplainOptionsDelimiter());\n                }\n            }\n            if (node.format) {\n                this.append('format');\n                this.append(this.getExplainOptionAssignment());\n                this.append(node.format);\n            }\n            this.append(this.getRightExplainOptionsWrapper());\n        }\n    }\n    visitDefaultInsertValue(_) {\n        this.append('default');\n    }\n    visitAggregateFunction(node) {\n        this.append(node.func);\n        this.append('(');\n        if (node.distinct) {\n            this.append('distinct ');\n        }\n        this.compileList(node.aggregated);\n        this.append(')');\n        if (node.filter) {\n            this.append(' filter(');\n            this.visitNode(node.filter);\n            this.append(')');\n        }\n        if (node.over) {\n            this.append(' ');\n            this.visitNode(node.over);\n        }\n    }\n    visitOver(node) {\n        this.append('over(');\n        if (node.partitionBy) {\n            this.visitNode(node.partitionBy);\n            if (node.orderBy) {\n                this.append(' ');\n            }\n        }\n        if (node.orderBy) {\n            this.visitNode(node.orderBy);\n        }\n        this.append(')');\n    }\n    visitPartitionBy(node) {\n        this.append('partition by ');\n        this.compileList(node.items);\n    }\n    visitPartitionByItem(node) {\n        this.visitNode(node.partitionBy);\n    }\n    visitBinaryOperation(node) {\n        this.visitNode(node.leftOperand);\n        this.append(' ');\n        this.visitNode(node.operator);\n        this.append(' ');\n        this.visitNode(node.rightOperand);\n    }\n    visitUnaryOperation(node) {\n        this.visitNode(node.operator);\n        if (!this.isMinusOperator(node.operator)) {\n            this.append(' ');\n        }\n        this.visitNode(node.operand);\n    }\n    isMinusOperator(node) {\n        return OperatorNode.is(node) && node.operator === '-';\n    }\n    visitUsing(node) {\n        this.append('using ');\n        this.compileList(node.tables);\n    }\n    visitFunction(node) {\n        this.append(node.func);\n        this.append('(');\n        this.compileList(node.arguments);\n        this.append(')');\n    }\n    visitCase(node) {\n        this.append('case');\n        if (node.value) {\n            this.append(' ');\n            this.visitNode(node.value);\n        }\n        if (node.when) {\n            this.append(' ');\n            this.compileList(node.when, ' ');\n        }\n        if (node.else) {\n            this.append(' else ');\n            this.visitNode(node.else);\n        }\n        this.append(' end');\n        if (node.isStatement) {\n            this.append(' case');\n        }\n    }\n    visitWhen(node) {\n        this.append('when ');\n        this.visitNode(node.condition);\n        if (node.result) {\n            this.append(' then ');\n            this.visitNode(node.result);\n        }\n    }\n    visitJSONReference(node) {\n        this.visitNode(node.reference);\n        this.visitNode(node.traversal);\n    }\n    visitJSONPath(node) {\n        if (node.inOperator) {\n            this.visitNode(node.inOperator);\n        }\n        this.append(\"'$\");\n        for (const pathLeg of node.pathLegs) {\n            this.visitNode(pathLeg);\n        }\n        this.append(\"'\");\n    }\n    visitJSONPathLeg(node) {\n        const isArrayLocation = node.type === 'ArrayLocation';\n        this.append(isArrayLocation ? '[' : '.');\n        this.append(String(node.value));\n        if (isArrayLocation) {\n            this.append(']');\n        }\n    }\n    visitJSONOperatorChain(node) {\n        for (let i = 0, len = node.values.length; i < len; i++) {\n            if (i === len - 1) {\n                this.visitNode(node.operator);\n            }\n            else {\n                this.append('->');\n            }\n            this.visitNode(node.values[i]);\n        }\n    }\n    visitMergeQuery(node) {\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('merge ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        this.append('into ');\n        this.visitNode(node.into);\n        if (node.using) {\n            this.append(' ');\n            this.visitNode(node.using);\n        }\n        if (node.whens) {\n            this.append(' ');\n            this.compileList(node.whens);\n        }\n    }\n    visitMatched(node) {\n        if (node.not) {\n            this.append('not ');\n        }\n        this.append('matched');\n        if (node.bySource) {\n            this.append(' by source');\n        }\n    }\n    visitAddIndex(node) {\n        this.append('add ');\n        if (node.unique) {\n            this.append('unique ');\n        }\n        this.append('index ');\n        this.visitNode(node.name);\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.using) {\n            this.append(' using ');\n            this.visitNode(node.using);\n        }\n    }\n    visitCast(node) {\n        this.append('cast(');\n        this.visitNode(node.expression);\n        this.append(' as ');\n        this.visitNode(node.dataType);\n        this.append(')');\n    }\n    visitFetch(node) {\n        this.append('fetch next ');\n        this.visitNode(node.rowCount);\n        this.append(` rows ${node.modifier}`);\n    }\n    visitTop(node) {\n        this.append(`top(${node.expression})`);\n        if (node.modifiers) {\n            this.append(` ${node.modifiers}`);\n        }\n    }\n    append(str) {\n        this.#sql += str;\n    }\n    appendValue(parameter) {\n        this.addParameter(parameter);\n        this.append(this.getCurrentParameterPlaceholder());\n    }\n    getLeftIdentifierWrapper() {\n        return '\"';\n    }\n    getRightIdentifierWrapper() {\n        return '\"';\n    }\n    getCurrentParameterPlaceholder() {\n        return '$' + this.numParameters;\n    }\n    getLeftExplainOptionsWrapper() {\n        return '(';\n    }\n    getExplainOptionAssignment() {\n        return ' ';\n    }\n    getExplainOptionsDelimiter() {\n        return ', ';\n    }\n    getRightExplainOptionsWrapper() {\n        return ')';\n    }\n    sanitizeIdentifier(identifier) {\n        const leftWrap = this.getLeftIdentifierWrapper();\n        const rightWrap = this.getRightIdentifierWrapper();\n        let sanitized = '';\n        for (const c of identifier) {\n            sanitized += c;\n            if (c === leftWrap) {\n                sanitized += leftWrap;\n            }\n            else if (c === rightWrap) {\n                sanitized += rightWrap;\n            }\n        }\n        return sanitized;\n    }\n    addParameter(parameter) {\n        this.#parameters.push(parameter);\n    }\n    appendImmediateValue(value) {\n        if (isString(value)) {\n            this.append(`'${value}'`);\n        }\n        else if (isNumber(value) || isBoolean(value)) {\n            this.append(value.toString());\n        }\n        else if (isNull(value)) {\n            this.append('null');\n        }\n        else if (isDate(value)) {\n            this.appendImmediateValue(value.toISOString());\n        }\n        else if (isBigInt(value)) {\n            this.appendImmediateValue(value.toString());\n        }\n        else {\n            throw new Error(`invalid immediate value ${value}`);\n        }\n    }\n    sortSelectModifiers(arr) {\n        arr.sort((left, right) => left.modifier && right.modifier\n            ? SELECT_MODIFIER_PRIORITY[left.modifier] -\n                SELECT_MODIFIER_PRIORITY[right.modifier]\n            : 1);\n        return freeze(arr);\n    }\n    compileColumnAlterations(columnAlterations) {\n        this.compileList(columnAlterations);\n    }\n    /**\n     * controls whether the dialect adds a \"type\" keyword before a column's new data\n     * type in an ALTER TABLE statement.\n     */\n    announcesNewColumnDataType() {\n        return true;\n    }\n}\nconst SELECT_MODIFIER_SQL = freeze({\n    ForKeyShare: 'for key share',\n    ForNoKeyUpdate: 'for no key update',\n    ForUpdate: 'for update',\n    ForShare: 'for share',\n    NoWait: 'nowait',\n    SkipLocked: 'skip locked',\n    Distinct: 'distinct',\n});\nconst SELECT_MODIFIER_PRIORITY = freeze({\n    ForKeyShare: 1,\n    ForNoKeyUpdate: 1,\n    ForUpdate: 1,\n    ForShare: 1,\n    NoWait: 2,\n    SkipLocked: 2,\n    Distinct: 0,\n});\nconst JOIN_TYPE_SQL = freeze({\n    InnerJoin: 'inner join',\n    LeftJoin: 'left join',\n    RightJoin: 'right join',\n    FullJoin: 'full join',\n    LateralInnerJoin: 'inner join lateral',\n    LateralLeftJoin: 'left join lateral',\n    Using: 'using',\n});\n","/// <reference types=\"./sqlite-query-compiler.d.ts\" />\nimport { DefaultQueryCompiler } from '../../query-compiler/default-query-compiler.js';\nconst ID_WRAP_REGEX = /\"/g;\nexport class SqliteQueryCompiler extends DefaultQueryCompiler {\n    getCurrentParameterPlaceholder() {\n        return '?';\n    }\n    getLeftExplainOptionsWrapper() {\n        return '';\n    }\n    getRightExplainOptionsWrapper() {\n        return '';\n    }\n    getLeftIdentifierWrapper() {\n        return '\"';\n    }\n    getRightIdentifierWrapper() {\n        return '\"';\n    }\n    getAutoIncrement() {\n        return 'autoincrement';\n    }\n    sanitizeIdentifier(identifier) {\n        return identifier.replace(ID_WRAP_REGEX, '\"\"');\n    }\n    visitDefaultInsertValue(_) {\n        // sqlite doesn't support the `default` keyword in inserts.\n        this.append('null');\n    }\n}\n","import * as AST from \"@effect/schema/AST\";\nimport { make } from \"@effect/schema/Schema\";\nimport * as Arr from \"effect/Array\";\nimport * as Context from \"effect/Context\";\nimport * as Effect from \"effect/Effect\";\nimport { constVoid, flow, pipe } from \"effect/Function\";\nimport * as Layer from \"effect/Layer\";\nimport * as Number from \"effect/Number\";\nimport * as Option from \"effect/Option\";\nimport * as Predicate from \"effect/Predicate\";\nimport * as Record from \"effect/Record\";\nimport * as Kysely from \"kysely\";\nimport { Config, createRuntime, defaultConfig } from \"./Config.js\";\nimport { NanoIdGenerator } from \"./Crypto.js\";\nimport { DbFactory, deserializeQuery, emptyRows, queryResultFromRows, serializeQuery, } from \"./Db.js\";\nimport { applyPatches } from \"./Diff.js\";\nimport { makeUnexpectedError } from \"./Error.js\";\nimport { AppState, FlushSync } from \"./Platform.js\";\nimport { isSqlMutation, } from \"./Sqlite.js\";\nimport { makeStore } from \"./Store.js\";\nimport { initialSyncState } from \"./Sync.js\";\nexport class EvoluFactory extends Context.Tag(\"EvoluFactory\")() {\n}\nEvoluFactory.Common = Layer.effect(EvoluFactory, Effect.gen(function* () {\n    const flushSync = yield* Effect.map(Effect.serviceOption(FlushSync), Option.getOrElse(() => (callback) => callback()));\n    const context = Context.empty().pipe(Context.add(DbFactory, yield* DbFactory), Context.add(NanoIdGenerator, yield* NanoIdGenerator), Context.add(FlushSync, flushSync), Context.add(AppState, yield* AppState));\n    // For hot/live reloading and future Evolu dynamic import.\n    const instances = new Map();\n    return EvoluFactory.of({\n        createEvolu: (schema, { indexes, initialData, mnemonic, ...config } = {}) => {\n            const runtime = createRuntime(config);\n            const name = config?.name || defaultConfig.name;\n            const dbSchema = {\n                tables: schemaToTables(schema),\n                indexes: indexes || [],\n            };\n            let evolu = instances.get(name);\n            if (evolu == null) {\n                evolu = createEvolu(dbSchema, runtime, initialData, mnemonic).pipe(Effect.provide(context), runtime.runSync);\n                instances.set(name, evolu);\n            }\n            else {\n                evolu.ensureSchema(dbSchema);\n            }\n            return evolu;\n        },\n    });\n}));\nconst schemaToTables = (schema) => pipe(getPropertySignatures(schema), Record.toEntries, Arr.map(([name, schema]) => ({\n    name,\n    columns: Object.keys(getPropertySignatures(schema)),\n})));\n// TODO: Simplify.\n// https://discord.com/channels/795981131316985866/1218626687546294386/1218796529725476935\nconst getPropertySignatures = (schema) => {\n    const out = {};\n    const propertySignatures = AST.getPropertySignatures(schema.ast);\n    for (let i = 0; i < propertySignatures.length; i++) {\n        const propertySignature = propertySignatures[i];\n        out[propertySignature.name] = make(propertySignature.type);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return out;\n};\nconst createEvolu = (schema, runtime, initialData, mnemonic) => Effect.gen(function* () {\n    yield* Effect.logTrace(\"EvoluFactory createEvolu\");\n    const config = yield* Config;\n    const dbFactory = yield* DbFactory;\n    const appState = yield* AppState;\n    const nanoIdGenerator = yield* NanoIdGenerator;\n    const flushSync = yield* FlushSync;\n    const db = yield* dbFactory.createDb;\n    const errorStore = yield* makeStore(null);\n    const ownerStore = yield* makeStore(null);\n    const rowsStore = yield* makeStore(new Map());\n    const syncStateStore = yield* makeStore(initialSyncState);\n    const loadingPromises = new Map();\n    const subscribedQueries = new Map();\n    const handleAllErrors = (effect) => effect.pipe(Effect.catchAllDefect((error) => Effect.fail(makeUnexpectedError(error))), Effect.tapError(Effect.logError), Effect.tapError(errorStore.setState));\n    const runFork = flow(handleAllErrors, runtime.runFork);\n    const runSync = flow(handleAllErrors, runtime.runSync);\n    const runPromise = flow(handleAllErrors, runtime.runPromise);\n    const initialDataAsMutations = yield* Effect.provideService(initialDataToMutations(initialData), NanoIdGenerator, nanoIdGenerator);\n    const handleDbError = (error) => {\n        Effect.fail(error).pipe(runFork);\n    };\n    const handleSyncStateChange = (state) => {\n        Effect.logDebug([\"Evolu handleSyncStateChange\", { state }]).pipe(Effect.zipRight(syncStateStore.setState(state)), runFork);\n    };\n    const handleDbReceive = () => {\n        Effect.gen(function* () {\n            yield* Effect.logTrace(\"Evolu handleDbReceive\");\n            releaseUnsubscribedLoadingPromises();\n            const queries = [...subscribedQueries.keys()];\n            if (queries.length > 0) {\n                yield* Effect.flatMap(db.loadQueries(queries), handlePatches());\n            }\n        }).pipe(runFork);\n    };\n    const sync = ({ refreshQueries }) => () => {\n        Effect.flatMap(db.sync(refreshQueries ? [...subscribedQueries.keys()] : []), handlePatches()).pipe(runFork);\n    };\n    db.init(schema, initialDataAsMutations, handleDbError, handleSyncStateChange, handleDbReceive, mnemonic).pipe(Effect.tap(sync({ refreshQueries: false })), Effect.flatMap(ownerStore.setState), Effect.catchTag(\"NotSupportedPlatformError\", () => Effect.void), // no-op\n    runFork);\n    const appStateReset = yield* appState.init({\n        onRequestSync: sync({ refreshQueries: true }),\n        reloadUrl: config.reloadUrl,\n    });\n    const handlePatches = (options) => (patches) => Effect.logDebug([\"Evolu handlePatches\", { patches }]).pipe(Effect.zipRight(rowsStoreStateFromPatches(patches)), Effect.tap((nextState) => Effect.forEach(patches, ({ query }) => resolveLoadingPromises(query, nextState.get(query) || emptyRows()))), Effect.tap((nextState) => {\n        if (options?.flushSync) {\n            flushSync(() => {\n                rowsStore.setState(nextState).pipe(runSync);\n            });\n        }\n        else {\n            rowsStore.setState(nextState).pipe(runSync);\n        }\n    }));\n    const rowsStoreStateFromPatches = (patches) => Effect.sync(() => {\n        const rowsStoreState = rowsStore.getState();\n        if (patches.length === 0)\n            return rowsStoreState;\n        const queriesRows = Arr.map(patches, ({ query, patches }) => [\n            query,\n            applyPatches(patches, rowsStoreState.get(query) || emptyRows()),\n        ]);\n        return new Map([...rowsStoreState, ...queriesRows]);\n    });\n    const resolveLoadingPromises = (query, rows) => Effect.sync(() => {\n        const loadingPromise = loadingPromises.get(query);\n        if (!loadingPromise)\n            return;\n        const result = queryResultFromRows(rows);\n        if (loadingPromise.promise.status !== \"fulfilled\") {\n            loadingPromise.resolve(result);\n        }\n        else {\n            // A promise can't be fulfilled 2x, so we need a new one.\n            loadingPromise.promise = Promise.resolve(result);\n        }\n        /**\n         * \"For example, a data framework can set the status and value fields on\n         * a promise preemptively, before passing to React, so that React can\n         * unwrap it without waiting a microtask.\"\n         * https://github.com/acdlite/rfcs/blob/first-class-promises/text/0000-first-class-support-for-promises.md\n         */\n        Object.assign(loadingPromise.promise, {\n            status: \"fulfilled\",\n            value: result,\n        });\n        if (loadingPromise.releaseOnResolve) {\n            loadingPromises.delete(query);\n        }\n    });\n    /**\n     * We can't delete loading promises in `resolveLoadingPromises` because they\n     * must be cached, so repeated calls to `loadQuery` will always return the\n     * same promise until the data changes, and we also can't cache them forever\n     * because only subscribed queries are automatically updated (reactivity is\n     * expensive) hence this function must be called manually on any mutation.\n     */\n    const releaseUnsubscribedLoadingPromises = () => {\n        [...loadingPromises.entries()]\n            .filter(([query]) => !subscribedQueries.has(query))\n            .forEach(([query, loadingPromise]) => {\n            if (loadingPromise.promise.status === \"fulfilled\") {\n                loadingPromises.delete(query);\n            }\n            else {\n                loadingPromise.releaseOnResolve = true;\n            }\n        });\n    };\n    const mutate = (() => {\n        let queue = [];\n        return (table, { id, ...values }, onComplete) => {\n            Effect.logDebug([\"Evolu mutate\", { table, id, values }]).pipe(runSync);\n            const isInsert = id == null;\n            if (isInsert)\n                id = nanoIdGenerator.rowId.pipe(runSync);\n            queue = [...queue, [{ table, id, values, isInsert }, onComplete]];\n            if (queue.length === 1)\n                queueMicrotask(() => {\n                    const [mutations, onCompletes] = Arr.unzip(queue);\n                    queue = [];\n                    const onCompletesDef = onCompletes.filter(Predicate.isNotUndefined);\n                    releaseUnsubscribedLoadingPromises();\n                    db.mutate(mutations, [...subscribedQueries.keys()]).pipe(Effect.flatMap(handlePatches({ flushSync: onCompletesDef.length > 0 })), Effect.tap(() => {\n                        onCompletesDef.forEach((onComplete) => onComplete());\n                    }), runFork);\n                });\n            return { id };\n        };\n    })();\n    const evolu = {\n        subscribeError: errorStore.subscribe,\n        getError: errorStore.getState,\n        createQuery: (queryCallback, options) => pipe(queryCallback(kysely).compile(), (compiledQuery) => {\n            if (isSqlMutation(compiledQuery.sql))\n                throw new Error(\"SQL mutation (INSERT, UPDATE, DELETE, etc.) isn't allowed in the Evolu `createQuery` function. Kysely suggests it because there is no read-only Kysely yet, and removing such an API is not possible. For mutations, use Evolu mutation API.\");\n            const parameters = compiledQuery.parameters;\n            return {\n                sql: compiledQuery.sql,\n                parameters,\n                ...(options && { options }),\n            };\n        }, (query) => serializeQuery(query)),\n        loadQuery: (() => {\n            let queue = [];\n            return (query) => {\n                Effect.logDebug([\n                    \"Evolu loadQuery\",\n                    { query: deserializeQuery(query) },\n                ]).pipe(runSync);\n                let loadingPromise = loadingPromises.get(query);\n                if (!loadingPromise) {\n                    let resolve = constVoid;\n                    const promise = new Promise((_resolve) => {\n                        resolve = _resolve;\n                    });\n                    loadingPromise = { resolve, promise, releaseOnResolve: false };\n                    loadingPromises.set(query, loadingPromise);\n                    queue = [...queue, query];\n                    if (queue.length === 1) {\n                        queueMicrotask(() => {\n                            db.loadQueries(Arr.dedupe(queue)).pipe(Effect.flatMap(handlePatches()), runFork);\n                            queue = [];\n                        });\n                    }\n                }\n                return loadingPromise.promise;\n            };\n        })(),\n        loadQueries: (queries) => queries.map(evolu.loadQuery),\n        subscribeQuery: (query) => (listener) => {\n            subscribedQueries.set(query, Number.increment(subscribedQueries.get(query) ?? 0));\n            const unsubscribe = rowsStore.subscribe(listener);\n            return () => {\n                const count = subscribedQueries.get(query);\n                if (count != null && count > 1)\n                    subscribedQueries.set(query, Number.decrement(count));\n                else\n                    subscribedQueries.delete(query);\n                unsubscribe();\n            };\n        },\n        getQuery: (query) => queryResultFromRows(rowsStore.getState().get(query) || emptyRows()),\n        subscribeOwner: ownerStore.subscribe,\n        getOwner: ownerStore.getState,\n        subscribeSyncState: syncStateStore.subscribe,\n        getSyncState: syncStateStore.getState,\n        create: mutate,\n        update: mutate,\n        createOrUpdate: mutate,\n        resetOwner: (options) => Effect.gen(function* () {\n            yield* db.resetOwner();\n            if (options?.reload !== false)\n                yield* appStateReset.reset;\n        }).pipe(runPromise),\n        restoreOwner: (mnemonic, options) => Effect.gen(function* () {\n            yield* db.restoreOwner(schema, mnemonic);\n            if (options?.reload !== false)\n                yield* appStateReset.reset;\n        }).pipe(runPromise),\n        reloadApp: () => {\n            appStateReset.reset.pipe(runFork);\n        },\n        ensureSchema: (schema) => {\n            db.ensureSchema(schema).pipe(runFork);\n        },\n        exportDatabase: () => db.exportDatabase().pipe(runPromise),\n    };\n    return evolu;\n});\nconst initialDataToMutations = (initialData = constVoid) => Effect.map(NanoIdGenerator, (nanoIdGenerator) => {\n    const mutations = [];\n    const mutate = (table, { id, ...values }) => {\n        if (id == null)\n            id = nanoIdGenerator.rowId.pipe(Effect.runSync);\n        mutations.push({ isInsert: true, id, table: table, values });\n        return { id };\n    };\n    const evolu = {\n        create: mutate,\n        createOrUpdate: mutate,\n    };\n    initialData(evolu);\n    return mutations;\n});\n// https://kysely.dev/docs/recipes/splitting-query-building-and-execution\nconst kysely = new Kysely.Kysely({\n    dialect: {\n        createAdapter: () => new Kysely.SqliteAdapter(),\n        createDriver: () => new Kysely.DummyDriver(),\n        createIntrospector() {\n            throw \"Not implemeneted\";\n        },\n        createQueryCompiler: () => new Kysely.SqliteQueryCompiler(),\n    },\n});\nconst createIndex = kysely.schema.createIndex.bind(kysely.schema);\n/**\n * Create SQLite indexes.\n *\n * See https://www.evolu.dev/docs/indexes\n *\n * @example\n *   const indexes = createIndexes((create) => [\n *     create(\"indexTodoCreatedAt\").on(\"todo\").column(\"createdAt\"),\n *     create(\"indexTodoCategoryCreatedAt\")\n *       .on(\"todoCategory\")\n *       .column(\"createdAt\"),\n *   ]);\n */\nexport const createIndexes = (callback) => callback(createIndex).map((index) => ({\n    name: index.toOperationNode().name.name,\n    sql: index.compile().sql,\n}));\n/** Create a namespaced lock name. */\nexport const getLockName = (name) => Effect.map(Config, (config) => `evolu:${config.name}:${name}`);\n","import * as S from \"@effect/schema/Schema\";\nimport { maybeJson } from \"./Sqlite.js\";\n/** Branded Id Schema. To create Id Schema for a specific table, use {@link id}. */\nexport const Id = S.String.pipe(S.pattern(/^[\\w-]{21}$/), S.brand(\"Id\"));\n/**\n * A factory function to create {@link Id} Schema for a specific table.\n *\n * @example\n *   import * as S from \"@effect/schema/Schema\";\n *   import { id } from \"@evolu/react\";\n *\n *   const TodoId = id(\"Todo\");\n *   type TodoId = typeof TodoId.Type;\n */\nexport const id = (table) => Id.pipe(S.brand(table));\n/**\n * SQLite doesn't support the Date type, so Evolu uses SqliteDate instead. Use\n * the {@link cast} helper to cast SqliteDate from Date and back.\n * https://www.sqlite.org/quirks.html#no_separate_datetime_datatype\n */\nexport const SqliteDate = S.String.pipe(S.filter((s) => !isNaN(Date.parse(s))), S.brand(\"SqliteDate\"));\n/**\n * SQLite doesn't support the boolean type, so Evolu uses SqliteBoolean instead.\n * Use the {@link cast} helper to cast SqliteBoolean from boolean and back.\n * https://www.sqlite.org/quirks.html#no_separate_boolean_datatype\n */\nexport const SqliteBoolean = S.Number.pipe(S.int(), S.filter((s) => s === 0 || s === 1), S.brand(\"SqliteBoolean\"));\nexport function cast(value) {\n    if (typeof value === \"boolean\")\n        return (value === true ? 1 : 0);\n    if (typeof value === \"number\")\n        return value === 1;\n    if (value instanceof Date)\n        return value.toISOString();\n    return new Date(value);\n}\n/**\n * Create table schema.\n *\n * Supported types are null, string, number, Uint8Array, JSON Object, and JSON\n * Array. Use SqliteDate for dates and SqliteBoolean for booleans.\n *\n * Reserved columns are createdAt, updatedAt, isDeleted. Those columns are added\n * by default.\n *\n * @example\n *   const TodoId = id(\"Todo\");\n *   type TodoId = typeof TodoId.Type;\n *\n *   const TodoTable = table({\n *     id: TodoId,\n *     title: NonEmptyString1000,\n *     isCompleted: S.nullable(SqliteBoolean),\n *   });\n *   type TodoTable = typeof TodoTable.Type;\n */\nexport const table = (fields) => S.Struct(fields).pipe(S.extend(ReservedColumns));\nconst ReservedColumns = S.Struct({\n    createdAt: SqliteDate,\n    updatedAt: SqliteDate,\n    isDeleted: SqliteBoolean,\n});\n/**\n * Create database schema.\n *\n * Tables with a name prefixed with _ are local-only, which means they are not\n * synced. Local-only tables are useful for device-specific or temporal data.\n *\n * @example\n *   const Database = database({\n *     // A local-only table.\n *     _todo: TodoTable,\n *     todo: TodoTable,\n *     todoCategory: TodoCategoryTable,\n *   });\n *   type Database = typeof Database.Type;\n */\nexport const database = S.Struct;\n/**\n * String schema represents a string that is not stringified JSON. Using String\n * schema for strings stored in SQLite is crucial to ensure a stored string is\n * not automatically parsed to a JSON object or array when retrieved. Use String\n * schema for all string-based schemas.\n */\nexport const String = S.String.pipe(S.filter((s) => {\n    if (!maybeJson(s))\n        return true;\n    try {\n        JSON.parse(s);\n    }\n    catch (e) {\n        return true;\n    }\n    return false;\n}, { message: () => \"a string that is not stringified JSON\" }), S.brand(\"String\"));\n/**\n * A string with a maximum length of 1000 characters.\n *\n * @example\n *   import * as S from \"@effect/schema/Schema\";\n *   import { String1000 } from \"@evolu/react\";\n *\n *   S.decode(String1000)(value);\n */\nexport const String1000 = String.pipe(S.maxLength(1000), S.brand(\"String1000\"));\n/**\n * A nonempty string with a maximum length of 1000 characters.\n *\n * @example\n *   import * as S from \"@effect/schema/Schema\";\n *   import { NonEmptyString1000 } from \"@evolu/react\";\n *\n *   S.decode(NonEmptyString1000)(value);\n */\nexport const NonEmptyString1000 = String.pipe(S.minLength(1), S.maxLength(1000), S.brand(\"NonEmptyString1000\"));\n/**\n * A positive integer.\n *\n * @example\n *   import * as S from \"@effect/schema/Schema\";\n *   import { PositiveInt } from \"@evolu/react\";\n *\n *   S.decode(PositiveInt)(value);\n */\nexport const PositiveInt = S.Number.pipe(S.int(), S.positive(), S.brand(\"PositiveInt\"));\n","import * as Context from \"effect/Context\";\nexport const FlushSync = Context.GenericTag(\"FlushSync\");\nexport class AppState extends Context.Tag(\"AppState\")() {\n}\nexport class SyncLock extends Context.Tag(\"SyncLock\")() {\n}\nexport class SyncLockAlreadySyncingError {\n    constructor() {\n        this._tag = \"SyncLockAlreadySyncingError\";\n    }\n}\n","import * as Console from \"effect/Console\";\nimport * as Context from \"effect/Context\";\nimport * as Effect from \"effect/Effect\";\nimport * as Exit from \"effect/Exit\";\nimport * as Layer from \"effect/Layer\";\nimport * as Predicate from \"effect/Predicate\";\nexport const Sqlite = Context.GenericTag(\"Sqlite\");\nexport class SqliteFactory extends Context.Tag(\"SqliteFactory\")() {\n}\nSqliteFactory.Common = Layer.effect(SqliteFactory, Effect.map(SqliteFactory, (platformSqliteFactory) => ({\n    createSqlite: Effect.logTrace(\"SqliteFactory createSqlite\").pipe(Effect.zipRight(platformSqliteFactory.createSqlite), Effect.map((platformSqlite) => ({\n        ...platformSqlite,\n        exec: (query) => platformSqlite.exec(query).pipe(Effect.tap((result) => {\n            maybeParseJson(result.rows);\n        }), Effect.tap((result) => [\"begin\", \"rollback\", \"commit\"].includes(query.sql)\n            ? Effect.logDebug(`SQLiteCommon ${query.sql} transaction`)\n            : Effect.logDebug([\"SQLiteCommon exec\", query, result]))),\n        transaction: (mode) => (effect) => {\n            // Shared is for readonly queries.\n            if (mode === \"shared\")\n                return platformSqlite.transaction(mode)(effect);\n            return Effect.flatMap(Sqlite, (sqlite) => Effect.acquireUseRelease(sqlite.exec({ sql: \"begin\" }), () => effect, (_, exit) => Exit.isFailure(exit)\n                ? sqlite.exec({ sql: \"rollback\" })\n                : sqlite.exec({ sql: \"commit\" }))).pipe(platformSqlite.transaction(mode));\n        },\n    }))),\n})));\nexport const isJsonObjectOrArray = (value) => value !== null && typeof value === \"object\" && !Predicate.isUint8Array(value);\nexport const valuesToSqliteValues = (values) => values.map((value) => isJsonObjectOrArray(value) ? JSON.stringify(value) : value);\n/** This function mutates for better performance. */\nexport const maybeParseJson = (rows) => {\n    parseArray(rows);\n};\nconst parseArray = (a) => {\n    for (let i = 0; i < a.length; ++i)\n        a[i] = parse(a[i]);\n    return a;\n};\nconst parse = (o) => {\n    if (Predicate.isString(o))\n        return parseString(o);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    if (Array.isArray(o))\n        return parseArray(o);\n    if (typeof o === \"object\" && o !== null && !Predicate.isUint8Array(o))\n        return parseObject(o);\n    return o;\n};\nconst parseString = (s) => {\n    if (maybeJson(s))\n        try {\n            return parse(JSON.parse(s));\n        }\n        catch (err) {\n            // Nothing to do.\n        }\n    return s;\n};\nexport const maybeJson = (value) => value.match(/^[[{]/) != null;\nconst parseObject = (o) => {\n    for (const key in o)\n        o[key] = parse(o[key]);\n    return o;\n};\n/** This is good enough detection because SQL strings in Evolu are predictable. */\nconst isSqlMutationRegEx = new RegExp(`\\\\b(${[\n    \"alter\",\n    \"create\",\n    \"delete\",\n    \"drop\",\n    \"insert\",\n    \"replace\",\n    \"update\",\n].join(\"|\")})\\\\b`);\nexport const isSqlMutation = (sql) => isSqlMutationRegEx.test(sql);\nexport const maybeLogSqliteQueryExecutionTime = (query) => (effect) => {\n    if (!query.options?.logQueryExecutionTime)\n        return effect;\n    return Effect.Do.pipe(Effect.let(\"start\", () => performance.now()), Effect.bind(\"result\", () => effect), Effect.let(\"elapsed\", ({ start }) => performance.now() - start), Effect.tap(({ elapsed }) => Console.log(`QueryExecutionTime: ${elapsed}ms`, query)), Effect.map(({ result }) => result));\n};\nexport const drawSqliteQueryPlan = (rows) => rows\n    .map((row) => {\n    let parentId = row.parent;\n    let indent = 0;\n    do {\n        const parent = rows.find((r) => r.id === parentId);\n        if (!parent)\n            break;\n        parentId = parent.parent;\n        indent++;\n        // eslint-disable-next-line no-constant-condition\n    } while (true);\n    return `${\"  \".repeat(indent)}${row.detail}`;\n})\n    .join(\"\\n\");\n","import * as Effect from \"effect/Effect\";\nexport const makeStore = (initialState) => Effect.sync(() => {\n    const listeners = new Set();\n    let currentState = initialState;\n    const store = {\n        subscribe(listener) {\n            listeners.add(listener);\n            return () => {\n                listeners.delete(listener);\n            };\n        },\n        getState() {\n            return currentState;\n        },\n        setState: (state) => Effect.sync(() => {\n            if (state === currentState)\n                return;\n            currentState = state;\n            listeners.forEach((listener) => listener());\n        }),\n    };\n    return store;\n});\n","/**\n * @since 2.0.0\n */\nimport type * as Context from \"./Context.js\"\nimport type { Effect } from \"./Effect.js\"\nimport * as internal from \"./internal/console.js\"\nimport * as defaultConsole from \"./internal/defaultServices/console.js\"\nimport type * as Layer from \"./Layer.js\"\nimport type { Scope } from \"./Scope.js\"\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const TypeId: unique symbol = defaultConsole.TypeId\n\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface Console {\n  readonly [TypeId]: TypeId\n  assert(condition: boolean, ...args: ReadonlyArray<any>): Effect<void>\n  readonly clear: Effect<void>\n  count(label?: string): Effect<void>\n  countReset(label?: string): Effect<void>\n  debug(...args: ReadonlyArray<any>): Effect<void>\n  dir(item: any, options?: any): Effect<void>\n  dirxml(...args: ReadonlyArray<any>): Effect<void>\n  error(...args: ReadonlyArray<any>): Effect<void>\n  group(options?: {\n    readonly label?: string | undefined\n    readonly collapsed?: boolean | undefined\n  }): Effect<void>\n  readonly groupEnd: Effect<void>\n  info(...args: ReadonlyArray<any>): Effect<void>\n  log(...args: ReadonlyArray<any>): Effect<void>\n  table(tabularData: any, properties?: ReadonlyArray<string>): Effect<void>\n  time(label?: string): Effect<void>\n  timeEnd(label?: string): Effect<void>\n  timeLog(label?: string, ...args: ReadonlyArray<any>): Effect<void>\n  trace(...args: ReadonlyArray<any>): Effect<void>\n  warn(...args: ReadonlyArray<any>): Effect<void>\n  readonly unsafe: UnsafeConsole\n}\n\n/**\n * @since 2.0.0\n * @category model\n */\nexport interface UnsafeConsole {\n  assert(condition: boolean, ...args: ReadonlyArray<any>): void\n  clear(): void\n  count(label?: string): void\n  countReset(label?: string): void\n  debug(...args: ReadonlyArray<any>): void\n  dir(item: any, options?: any): void\n  dirxml(...args: ReadonlyArray<any>): void\n  error(...args: ReadonlyArray<any>): void\n  group(options?: {\n    readonly label?: string | undefined\n    readonly collapsed?: boolean | undefined\n  }): void\n  groupEnd(): void\n  info(...args: ReadonlyArray<any>): void\n  log(...args: ReadonlyArray<any>): void\n  table(tabularData: any, properties?: ReadonlyArray<string>): void\n  time(label?: string): void\n  timeEnd(label?: string): void\n  timeLog(label?: string, ...args: ReadonlyArray<any>): void\n  trace(...args: ReadonlyArray<any>): void\n  warn(...args: ReadonlyArray<any>): void\n}\n\n/**\n * @since 2.0.0\n * @category context\n */\nexport const Console: Context.Tag<Console, Console> = defaultConsole.consoleTag\n\n/**\n * @since 2.0.0\n * @category default services\n */\nexport const withConsole: {\n  <C extends Console>(console: C): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R, C extends Console>(effect: Effect<A, E, R>, console: C): Effect<A, E, R>\n} = internal.withConsole\n\n/**\n * @since 2.0.0\n * @category default services\n */\nexport const setConsole: <A extends Console>(console: A) => Layer.Layer<never> = internal.setConsole\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const consoleWith: <A, E, R>(f: (console: Console) => Effect<A, E, R>) => Effect<A, E, R> = internal.consoleWith\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const assert: (condition: boolean, ...args: ReadonlyArray<any>) => Effect<void> = internal.assert\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const clear: Effect<void> = internal.clear\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const count: (label?: string) => Effect<void> = internal.count\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const countReset: (label?: string) => Effect<void> = internal.countReset\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const debug: (...args: ReadonlyArray<any>) => Effect<void> = internal.debug\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const dir: (item: any, options?: any) => Effect<void> = internal.dir\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const dirxml: (...args: ReadonlyArray<any>) => Effect<void> = internal.dirxml\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const error: (...args: ReadonlyArray<any>) => Effect<void> = internal.error\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const group: (\n  options?: { label?: string | undefined; collapsed?: boolean | undefined } | undefined\n) => Effect<void, never, Scope> = internal.group\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const info: (...args: ReadonlyArray<any>) => Effect<void> = internal.info\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const log: (...args: ReadonlyArray<any>) => Effect<void> = internal.log\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const table: (tabularData: any, properties?: ReadonlyArray<string>) => Effect<void> = internal.table\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const time: (label?: string | undefined) => Effect<void, never, Scope> = internal.time\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const timeLog: (label?: string, ...args: ReadonlyArray<any>) => Effect<void> = internal.timeLog\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const trace: (...args: ReadonlyArray<any>) => Effect<void> = internal.trace\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const warn: (...args: ReadonlyArray<any>) => Effect<void> = internal.warn\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const withGroup: {\n  (options?: {\n    readonly label?: string | undefined\n    readonly collapsed?: boolean | undefined\n  }): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, options?: {\n    readonly label?: string | undefined\n    readonly collapsed?: boolean | undefined\n  }): Effect<A, E, R>\n} = internal.withGroup\n\n/**\n * @since 2.0.0\n * @category accessor\n */\nexport const withTime: {\n  (label?: string): <A, E, R>(self: Effect<A, E, R>) => Effect<A, E, R>\n  <A, E, R>(self: Effect<A, E, R>, label?: string): Effect<A, E, R>\n} = internal.withTime\n","/// <reference types=\"./dynamic-reference-builder.d.ts\" />\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { parseSimpleReferenceExpression } from '../parser/reference-parser.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport class DynamicReferenceBuilder {\n    #dynamicReference;\n    get dynamicReference() {\n        return this.#dynamicReference;\n    }\n    /**\n     * @private\n     *\n     * This needs to be here just so that the typings work. Without this\n     * the generated .d.ts file contains no reference to the type param R\n     * which causes this type to be equal to DynamicReferenceBuilder with\n     * any R.\n     */\n    get refType() {\n        return undefined;\n    }\n    constructor(reference) {\n        this.#dynamicReference = reference;\n    }\n    toOperationNode() {\n        return parseSimpleReferenceExpression(this.#dynamicReference);\n    }\n}\nexport function isDynamicReferenceBuilder(obj) {\n    return (isObject(obj) &&\n        isOperationNodeSource(obj) &&\n        isString(obj.dynamicReference));\n}\n","/// <reference types=\"./unary-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const UnaryOperationNode = freeze({\n    is(node) {\n        return node.kind === 'UnaryOperationNode';\n    },\n    create(operator, operand) {\n        return freeze({\n            kind: 'UnaryOperationNode',\n            operator,\n            operand,\n        });\n    },\n});\n","/// <reference types=\"./unary-operation-parser.d.ts\" />\nimport { OperatorNode } from '../operation-node/operator-node.js';\nimport { UnaryOperationNode } from '../operation-node/unary-operation-node.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nexport function parseExists(operand) {\n    return parseUnaryOperation('exists', operand);\n}\nexport function parseNotExists(operand) {\n    return parseUnaryOperation('not exists', operand);\n}\nexport function parseUnaryOperation(operator, operand) {\n    return UnaryOperationNode.create(OperatorNode.create(operator), parseReferenceExpression(operand));\n}\n","/// <reference types=\"./json-path-leg-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONPathLegNode = freeze({\n    is(node) {\n        return node.kind === 'JSONPathLegNode';\n    },\n    create(type, value) {\n        return freeze({\n            kind: 'JSONPathLegNode',\n            type,\n            value,\n        });\n    },\n});\n","/// <reference types=\"./json-path-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { JSONOperatorChainNode } from '../operation-node/json-operator-chain-node.js';\nimport { JSONPathLegNode, } from '../operation-node/json-path-leg-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nimport { JSONReferenceNode } from '../operation-node/json-reference-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nexport class JSONPathBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /**\n     * Access an element of a JSON array in a specific location.\n     *\n     * Since there's no guarantee an element exists in the given array location, the\n     * resulting type is always nullable. If you're sure the element exists, you\n     * should use {@link SelectQueryBuilder.$assertType} to narrow the type safely.\n     *\n     * See also {@link key} to access properties of JSON objects.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->').at(0).as('primary_nickname')\n     * )\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"nicknames\"->0 as \"primary_nickname\" from \"person\"\n     *```\n     *\n     * Combined with {@link key}:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('experience', '->').at(0).key('role').as('first_role')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"experience\"->0->'role' as \"first_role\" from \"person\"\n     * ```\n     *\n     * You can use `'last'` to access the last element of the array in MySQL:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->$').at('last').as('last_nickname')\n     * )\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * select `nicknames`->'$[last]' as `last_nickname` from `person`\n     * ```\n     *\n     * Or `'#-1'` in SQLite:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->>$').at('#-1').as('last_nickname')\n     * )\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * select \"nicknames\"->>'$[#-1]' as `last_nickname` from `person`\n     * ```\n     */\n    at(index) {\n        return this.#createBuilderWithPathLeg('ArrayLocation', index);\n    }\n    /**\n     * Access a property of a JSON object.\n     *\n     * If a field is optional, the resulting type will be nullable.\n     *\n     * See also {@link at} to access elements of JSON arrays.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('address', '->').key('city').as('city')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"address\"->'city' as \"city\" from \"person\"\n     * ```\n     *\n     * Going deeper:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('profile', '->$').key('website').key('url').as('website_url')\n     * )\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * select `profile`->'$.website.url' as `website_url` from `person`\n     * ```\n     *\n     * Combined with {@link at}:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('profile', '->').key('addresses').at(0).key('city').as('city')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"profile\"->'addresses'->0->'city' as \"city\" from \"person\"\n     * ```\n     */\n    key(key) {\n        return this.#createBuilderWithPathLeg('Member', key);\n    }\n    #createBuilderWithPathLeg(legType, value) {\n        if (JSONReferenceNode.is(this.#node)) {\n            return new TraversedJSONPathBuilder(JSONReferenceNode.cloneWithTraversal(this.#node, JSONPathNode.is(this.#node.traversal)\n                ? JSONPathNode.cloneWithLeg(this.#node.traversal, JSONPathLegNode.create(legType, value))\n                : JSONOperatorChainNode.cloneWithValue(this.#node.traversal, ValueNode.createImmediate(value))));\n        }\n        return new TraversedJSONPathBuilder(JSONPathNode.cloneWithLeg(this.#node, JSONPathLegNode.create(legType, value)));\n    }\n}\nexport class TraversedJSONPathBuilder extends JSONPathBuilder {\n    #node;\n    constructor(node) {\n        super(node);\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedJSONPathBuilder(this, alias);\n    }\n    /**\n     * Change the output type of the json path.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `JSONPathBuilder` with a new output type.\n     */\n    $castTo() {\n        return new JSONPathBuilder(this.#node);\n    }\n    $notNull() {\n        return new JSONPathBuilder(this.#node);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexport class AliasedJSONPathBuilder {\n    #jsonPath;\n    #alias;\n    constructor(jsonPath, alias) {\n        this.#jsonPath = jsonPath;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#jsonPath;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#jsonPath.toOperationNode(), isOperationNodeSource(this.#alias)\n            ? this.#alias.toOperationNode()\n            : IdentifierNode.create(this.#alias));\n    }\n}\n","/// <reference types=\"./tuple-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const TupleNode = freeze({\n    is(node) {\n        return node.kind === 'TupleNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'TupleNode',\n            values: freeze(values),\n        });\n    },\n});\n","/// <reference types=\"./cast-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const CastNode = freeze({\n    is(node) {\n        return node.kind === 'CastNode';\n    },\n    create(expression, dataType) {\n        return freeze({\n            kind: 'CastNode',\n            expression,\n            dataType,\n        });\n    },\n});\n","/// <reference types=\"./expression-builder.d.ts\" />\nimport { createSelectQueryBuilder, } from '../query-builder/select-query-builder.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { parseTableExpressionOrList, parseTable, } from '../parser/table-parser.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { createFunctionModule, } from '../query-builder/function-module.js';\nimport { parseJSONReference, parseReferenceExpression, parseStringReference, } from '../parser/reference-parser.js';\nimport { parseFilterList, parseFilterObject, parseValueBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { ExpressionWrapper } from './expression-wrapper.js';\nimport { OperatorNode, } from '../operation-node/operator-node.js';\nimport { parseUnaryOperation } from '../parser/unary-operation-parser.js';\nimport { parseSafeImmediateValue, parseValueExpression, } from '../parser/value-parser.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { CaseBuilder } from '../query-builder/case-builder.js';\nimport { CaseNode } from '../operation-node/case-node.js';\nimport { isReadonlyArray, isUndefined } from '../util/object-utils.js';\nimport { JSONPathBuilder } from '../query-builder/json-path-builder.js';\nimport { BinaryOperationNode } from '../operation-node/binary-operation-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { TupleNode } from '../operation-node/tuple-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { CastNode } from '../operation-node/cast-node.js';\nexport function createExpressionBuilder(executor = NOOP_QUERY_EXECUTOR) {\n    function binary(lhs, op, rhs) {\n        return new ExpressionWrapper(parseValueBinaryOperation(lhs, op, rhs));\n    }\n    function unary(op, expr) {\n        return new ExpressionWrapper(parseUnaryOperation(op, expr));\n    }\n    const eb = Object.assign(binary, {\n        fn: undefined,\n        eb: undefined,\n        selectFrom(table) {\n            return createSelectQueryBuilder({\n                queryId: createQueryId(),\n                executor,\n                queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(table)),\n            });\n        },\n        case(reference) {\n            return new CaseBuilder({\n                node: CaseNode.create(isUndefined(reference)\n                    ? undefined\n                    : parseReferenceExpression(reference)),\n            });\n        },\n        ref(reference, op) {\n            if (isUndefined(op)) {\n                return new ExpressionWrapper(parseStringReference(reference));\n            }\n            return new JSONPathBuilder(parseJSONReference(reference, op));\n        },\n        jsonPath() {\n            return new JSONPathBuilder(JSONPathNode.create());\n        },\n        table(table) {\n            return new ExpressionWrapper(parseTable(table));\n        },\n        val(value) {\n            return new ExpressionWrapper(parseValueExpression(value));\n        },\n        refTuple(...values) {\n            return new ExpressionWrapper(TupleNode.create(values.map(parseReferenceExpression)));\n        },\n        tuple(...values) {\n            return new ExpressionWrapper(TupleNode.create(values.map(parseValueExpression)));\n        },\n        lit(value) {\n            return new ExpressionWrapper(parseSafeImmediateValue(value));\n        },\n        unary,\n        not(expr) {\n            return unary('not', expr);\n        },\n        exists(expr) {\n            return unary('exists', expr);\n        },\n        neg(expr) {\n            return unary('-', expr);\n        },\n        between(expr, start, end) {\n            return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create('between'), AndNode.create(parseValueExpression(start), parseValueExpression(end))));\n        },\n        betweenSymmetric(expr, start, end) {\n            return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create('between symmetric'), AndNode.create(parseValueExpression(start), parseValueExpression(end))));\n        },\n        and(exprs) {\n            if (isReadonlyArray(exprs)) {\n                return new ExpressionWrapper(parseFilterList(exprs, 'and'));\n            }\n            return new ExpressionWrapper(parseFilterObject(exprs, 'and'));\n        },\n        or(exprs) {\n            if (isReadonlyArray(exprs)) {\n                return new ExpressionWrapper(parseFilterList(exprs, 'or'));\n            }\n            return new ExpressionWrapper(parseFilterObject(exprs, 'or'));\n        },\n        parens(...args) {\n            const node = parseValueBinaryOperationOrExpression(args);\n            if (ParensNode.is(node)) {\n                // No double wrapping.\n                return new ExpressionWrapper(node);\n            }\n            else {\n                return new ExpressionWrapper(ParensNode.create(node));\n            }\n        },\n        cast(expr, dataType) {\n            return new ExpressionWrapper(CastNode.create(parseReferenceExpression(expr), parseDataTypeExpression(dataType)));\n        },\n        withSchema(schema) {\n            return createExpressionBuilder(executor.withPluginAtFront(new WithSchemaPlugin(schema)));\n        },\n    });\n    eb.fn = createFunctionModule();\n    eb.eb = eb;\n    return eb;\n}\nexport function expressionBuilder(_) {\n    return createExpressionBuilder();\n}\n","/// <reference types=\"./expression-wrapper.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { OrNode } from '../operation-node/or-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nexport class ExpressionWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    or(...args) {\n        return new OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    and(...args) {\n        return new AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `ExpressionWrapper` with a new output type.\n     */\n    $castTo() {\n        return new ExpressionWrapper(this.#node);\n    }\n    /**\n     * Omit null from the expression's type.\n     *\n     * This function can be useful in cases where you know an expression can't be\n     * null, but Kysely is unable to infer it.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of `this` with a new output type.\n     */\n    $notNull() {\n        return new ExpressionWrapper(this.#node);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexport class AliasedExpressionWrapper {\n    #expr;\n    #alias;\n    constructor(expr, alias) {\n        this.#expr = expr;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#expr;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#expr.toOperationNode(), isOperationNodeSource(this.#alias)\n            ? this.#alias.toOperationNode()\n            : IdentifierNode.create(this.#alias));\n    }\n}\nexport class OrWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    or(...args) {\n        return new OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `OrWrapper` with a new output type.\n     */\n    $castTo() {\n        return new OrWrapper(this.#node);\n    }\n    toOperationNode() {\n        return ParensNode.create(this.#node);\n    }\n}\nexport class AndWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    and(...args) {\n        return new AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `AndWrapper` with a new output type.\n     */\n    $castTo() {\n        return new AndWrapper(this.#node);\n    }\n    toOperationNode() {\n        return ParensNode.create(this.#node);\n    }\n}\n","/// <reference types=\"./alias-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AliasNode = freeze({\n    is(node) {\n        return node.kind === 'AliasNode';\n    },\n    create(node, alias) {\n        return freeze({\n            kind: 'AliasNode',\n            node,\n            alias,\n        });\n    },\n});\n","/// <reference types=\"./and-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AndNode = freeze({\n    is(node) {\n        return node.kind === 'AndNode';\n    },\n    create(left, right) {\n        return freeze({\n            kind: 'AndNode',\n            left,\n            right,\n        });\n    },\n});\n","/// <reference types=\"./binary-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const BinaryOperationNode = freeze({\n    is(node) {\n        return node.kind === 'BinaryOperationNode';\n    },\n    create(leftOperand, operator, rightOperand) {\n        return freeze({\n            kind: 'BinaryOperationNode',\n            leftOperand,\n            operator,\n            rightOperand,\n        });\n    },\n});\n","/// <reference types=\"./case-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhenNode } from './when-node.js';\n/**\n * @internal\n */\nexport const CaseNode = freeze({\n    is(node) {\n        return node.kind === 'CaseNode';\n    },\n    create(value) {\n        return freeze({\n            kind: 'CaseNode',\n            value,\n        });\n    },\n    cloneWithWhen(caseNode, when) {\n        return freeze({\n            ...caseNode,\n            when: freeze(caseNode.when ? [...caseNode.when, when] : [when]),\n        });\n    },\n    cloneWithThen(caseNode, then) {\n        return freeze({\n            ...caseNode,\n            when: caseNode.when\n                ? freeze([\n                    ...caseNode.when.slice(0, -1),\n                    WhenNode.cloneWithResult(caseNode.when[caseNode.when.length - 1], then),\n                ])\n                : undefined,\n        });\n    },\n    cloneWith(caseNode, props) {\n        return freeze({\n            ...caseNode,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const ColumnNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'ColumnNode',\n            column: IdentifierNode.create(column),\n        });\n    },\n});\n","/// <reference types=\"./using-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const UsingNode = freeze({\n    is(node) {\n        return node.kind === 'UsingNode';\n    },\n    create(tables) {\n        return freeze({\n            kind: 'UsingNode',\n            tables: freeze(tables),\n        });\n    },\n    cloneWithTables(using, tables) {\n        return freeze({\n            ...using,\n            tables: freeze([...using.tables, ...tables]),\n        });\n    },\n});\n","/// <reference types=\"./delete-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\nimport { OrderByNode } from './order-by-node.js';\nimport { UsingNode } from './using-node.js';\n/**\n * @internal\n */\nexport const DeleteQueryNode = freeze({\n    is(node) {\n        return node.kind === 'DeleteQueryNode';\n    },\n    create(fromItems, withNode) {\n        return freeze({\n            kind: 'DeleteQueryNode',\n            from: FromNode.create(fromItems),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithOrderByItems(deleteNode, items) {\n        return freeze({\n            ...deleteNode,\n            orderBy: deleteNode.orderBy\n                ? OrderByNode.cloneWithItems(deleteNode.orderBy, items)\n                : OrderByNode.create(items),\n        });\n    },\n    cloneWithoutOrderBy(deleteNode) {\n        return freeze({\n            ...deleteNode,\n            orderBy: undefined,\n        });\n    },\n    cloneWithLimit(deleteNode, limit) {\n        return freeze({\n            ...deleteNode,\n            limit,\n        });\n    },\n    cloneWithoutLimit(deleteNode) {\n        return freeze({\n            ...deleteNode,\n            limit: undefined,\n        });\n    },\n    cloneWithUsing(deleteNode, tables) {\n        return freeze({\n            ...deleteNode,\n            using: deleteNode.using !== undefined\n                ? UsingNode.cloneWithTables(deleteNode.using, tables)\n                : UsingNode.create(tables),\n        });\n    },\n});\n","/// <reference types=\"./from-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const FromNode = freeze({\n    is(node) {\n        return node.kind === 'FromNode';\n    },\n    create(froms) {\n        return freeze({\n            kind: 'FromNode',\n            froms: freeze(froms),\n        });\n    },\n    cloneWithFroms(from, froms) {\n        return freeze({\n            ...from,\n            froms: freeze([...from.froms, ...froms]),\n        });\n    },\n});\n","/// <reference types=\"./identifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const IdentifierNode = freeze({\n    is(node) {\n        return node.kind === 'IdentifierNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'IdentifierNode',\n            name,\n        });\n    },\n});\n","/// <reference types=\"./insert-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const InsertQueryNode = freeze({\n    is(node) {\n        return node.kind === 'InsertQueryNode';\n    },\n    create(into, withNode, replace) {\n        return freeze({\n            kind: 'InsertQueryNode',\n            into,\n            ...(withNode && { with: withNode }),\n            replace,\n        });\n    },\n    createWithoutInto() {\n        return freeze({\n            kind: 'InsertQueryNode',\n        });\n    },\n    cloneWith(insertQuery, props) {\n        return freeze({\n            ...insertQuery,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./on-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const OnNode = freeze({\n    is(node) {\n        return node.kind === 'OnNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'OnNode',\n            on: filter,\n        });\n    },\n    cloneWithOperation(onNode, operator, operation) {\n        return freeze({\n            ...onNode,\n            on: operator === 'And'\n                ? AndNode.create(onNode.on, operation)\n                : OrNode.create(onNode.on, operation),\n        });\n    },\n});\n","/// <reference types=\"./join-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { OnNode } from './on-node.js';\n/**\n * @internal\n */\nexport const JoinNode = freeze({\n    is(node) {\n        return node.kind === 'JoinNode';\n    },\n    create(joinType, table) {\n        return freeze({\n            kind: 'JoinNode',\n            joinType,\n            table,\n            on: undefined,\n        });\n    },\n    createWithOn(joinType, table, on) {\n        return freeze({\n            kind: 'JoinNode',\n            joinType,\n            table,\n            on: OnNode.create(on),\n        });\n    },\n    cloneWithOn(joinNode, operation) {\n        return freeze({\n            ...joinNode,\n            on: joinNode.on\n                ? OnNode.cloneWithOperation(joinNode.on, 'And', operation)\n                : OnNode.create(operation),\n        });\n    },\n});\n","/// <reference types=\"./json-operator-chain-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONOperatorChainNode = freeze({\n    is(node) {\n        return node.kind === 'JSONOperatorChainNode';\n    },\n    create(operator) {\n        return freeze({\n            kind: 'JSONOperatorChainNode',\n            operator,\n            values: freeze([]),\n        });\n    },\n    cloneWithValue(node, value) {\n        return freeze({\n            ...node,\n            values: freeze([...node.values, value]),\n        });\n    },\n});\n","/// <reference types=\"./json-path-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONPathNode = freeze({\n    is(node) {\n        return node.kind === 'JSONPathNode';\n    },\n    create(inOperator) {\n        return freeze({\n            kind: 'JSONPathNode',\n            inOperator,\n            pathLegs: freeze([]),\n        });\n    },\n    cloneWithLeg(jsonPathNode, pathLeg) {\n        return freeze({\n            ...jsonPathNode,\n            pathLegs: freeze([...jsonPathNode.pathLegs, pathLeg]),\n        });\n    },\n});\n","/// <reference types=\"./json-reference-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONReferenceNode = freeze({\n    is(node) {\n        return node.kind === 'JSONReferenceNode';\n    },\n    create(reference, traversal) {\n        return freeze({\n            kind: 'JSONReferenceNode',\n            reference,\n            traversal,\n        });\n    },\n    cloneWithTraversal(node, traversal) {\n        return freeze({\n            ...node,\n            traversal,\n        });\n    },\n});\n","/// <reference types=\"./limit-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const LimitNode = freeze({\n    is(node) {\n        return node.kind === 'LimitNode';\n    },\n    create(limit) {\n        return freeze({\n            kind: 'LimitNode',\n            limit,\n        });\n    },\n});\n","/// <reference types=\"./merge-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhenNode } from './when-node.js';\n/**\n * @internal\n */\nexport const MergeQueryNode = freeze({\n    is(node) {\n        return node.kind === 'MergeQueryNode';\n    },\n    create(into, withNode) {\n        return freeze({\n            kind: 'MergeQueryNode',\n            into,\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithUsing(mergeNode, using) {\n        return freeze({\n            ...mergeNode,\n            using,\n        });\n    },\n    cloneWithWhen(mergeNode, when) {\n        return freeze({\n            ...mergeNode,\n            whens: mergeNode.whens\n                ? freeze([...mergeNode.whens, when])\n                : freeze([when]),\n        });\n    },\n    cloneWithThen(mergeNode, then) {\n        return freeze({\n            ...mergeNode,\n            whens: mergeNode.whens\n                ? freeze([\n                    ...mergeNode.whens.slice(0, -1),\n                    WhenNode.cloneWithResult(mergeNode.whens[mergeNode.whens.length - 1], then),\n                ])\n                : undefined,\n        });\n    },\n});\n","/// <reference types=\"./operation-node-source.d.ts\" />\nimport { isFunction, isObject } from '../util/object-utils.js';\nexport function isOperationNodeSource(obj) {\n    return isObject(obj) && isFunction(obj.toOperationNode);\n}\n","/// <reference types=\"./operation-node-transformer.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { requireAllProps } from '../util/require-all-props.js';\n/**\n * Transforms an operation node tree into another one.\n *\n * Kysely queries are expressed internally as a tree of objects (operation nodes).\n * `OperationNodeTransformer` takes such a tree as its input and returns a\n * transformed deep copy of it. By default the `OperationNodeTransformer`\n * does nothing. You need to override one or more methods to make it do\n * something.\n *\n * There's a method for each node type. For example if you'd like to convert\n * each identifier (table name, column name, alias etc.) from camelCase to\n * snake_case, you'd do something like this:\n *\n * ```ts\n * class CamelCaseTransformer extends OperationNodeTransformer {\n *   transformIdentifier(node: IdentifierNode): IdentifierNode {\n *     node = super.transformIdentifier(node),\n *\n *     return {\n *       ...node,\n *       name: snakeCase(node.name),\n *     }\n *   }\n * }\n *\n * const transformer = new CamelCaseTransformer()\n * const tree = transformer.transformNode(tree)\n * ```\n */\nexport class OperationNodeTransformer {\n    nodeStack = [];\n    #transformers = freeze({\n        AliasNode: this.transformAlias.bind(this),\n        ColumnNode: this.transformColumn.bind(this),\n        IdentifierNode: this.transformIdentifier.bind(this),\n        SchemableIdentifierNode: this.transformSchemableIdentifier.bind(this),\n        RawNode: this.transformRaw.bind(this),\n        ReferenceNode: this.transformReference.bind(this),\n        SelectQueryNode: this.transformSelectQuery.bind(this),\n        SelectionNode: this.transformSelection.bind(this),\n        TableNode: this.transformTable.bind(this),\n        FromNode: this.transformFrom.bind(this),\n        SelectAllNode: this.transformSelectAll.bind(this),\n        AndNode: this.transformAnd.bind(this),\n        OrNode: this.transformOr.bind(this),\n        ValueNode: this.transformValue.bind(this),\n        ValueListNode: this.transformValueList.bind(this),\n        PrimitiveValueListNode: this.transformPrimitiveValueList.bind(this),\n        ParensNode: this.transformParens.bind(this),\n        JoinNode: this.transformJoin.bind(this),\n        OperatorNode: this.transformOperator.bind(this),\n        WhereNode: this.transformWhere.bind(this),\n        InsertQueryNode: this.transformInsertQuery.bind(this),\n        DeleteQueryNode: this.transformDeleteQuery.bind(this),\n        ReturningNode: this.transformReturning.bind(this),\n        CreateTableNode: this.transformCreateTable.bind(this),\n        AddColumnNode: this.transformAddColumn.bind(this),\n        ColumnDefinitionNode: this.transformColumnDefinition.bind(this),\n        DropTableNode: this.transformDropTable.bind(this),\n        DataTypeNode: this.transformDataType.bind(this),\n        OrderByNode: this.transformOrderBy.bind(this),\n        OrderByItemNode: this.transformOrderByItem.bind(this),\n        GroupByNode: this.transformGroupBy.bind(this),\n        GroupByItemNode: this.transformGroupByItem.bind(this),\n        UpdateQueryNode: this.transformUpdateQuery.bind(this),\n        ColumnUpdateNode: this.transformColumnUpdate.bind(this),\n        LimitNode: this.transformLimit.bind(this),\n        OffsetNode: this.transformOffset.bind(this),\n        OnConflictNode: this.transformOnConflict.bind(this),\n        OnDuplicateKeyNode: this.transformOnDuplicateKey.bind(this),\n        CreateIndexNode: this.transformCreateIndex.bind(this),\n        DropIndexNode: this.transformDropIndex.bind(this),\n        ListNode: this.transformList.bind(this),\n        PrimaryKeyConstraintNode: this.transformPrimaryKeyConstraint.bind(this),\n        UniqueConstraintNode: this.transformUniqueConstraint.bind(this),\n        ReferencesNode: this.transformReferences.bind(this),\n        CheckConstraintNode: this.transformCheckConstraint.bind(this),\n        WithNode: this.transformWith.bind(this),\n        CommonTableExpressionNode: this.transformCommonTableExpression.bind(this),\n        CommonTableExpressionNameNode: this.transformCommonTableExpressionName.bind(this),\n        HavingNode: this.transformHaving.bind(this),\n        CreateSchemaNode: this.transformCreateSchema.bind(this),\n        DropSchemaNode: this.transformDropSchema.bind(this),\n        AlterTableNode: this.transformAlterTable.bind(this),\n        DropColumnNode: this.transformDropColumn.bind(this),\n        RenameColumnNode: this.transformRenameColumn.bind(this),\n        AlterColumnNode: this.transformAlterColumn.bind(this),\n        ModifyColumnNode: this.transformModifyColumn.bind(this),\n        AddConstraintNode: this.transformAddConstraint.bind(this),\n        DropConstraintNode: this.transformDropConstraint.bind(this),\n        ForeignKeyConstraintNode: this.transformForeignKeyConstraint.bind(this),\n        CreateViewNode: this.transformCreateView.bind(this),\n        DropViewNode: this.transformDropView.bind(this),\n        GeneratedNode: this.transformGenerated.bind(this),\n        DefaultValueNode: this.transformDefaultValue.bind(this),\n        OnNode: this.transformOn.bind(this),\n        ValuesNode: this.transformValues.bind(this),\n        SelectModifierNode: this.transformSelectModifier.bind(this),\n        CreateTypeNode: this.transformCreateType.bind(this),\n        DropTypeNode: this.transformDropType.bind(this),\n        ExplainNode: this.transformExplain.bind(this),\n        DefaultInsertValueNode: this.transformDefaultInsertValue.bind(this),\n        AggregateFunctionNode: this.transformAggregateFunction.bind(this),\n        OverNode: this.transformOver.bind(this),\n        PartitionByNode: this.transformPartitionBy.bind(this),\n        PartitionByItemNode: this.transformPartitionByItem.bind(this),\n        SetOperationNode: this.transformSetOperation.bind(this),\n        BinaryOperationNode: this.transformBinaryOperation.bind(this),\n        UnaryOperationNode: this.transformUnaryOperation.bind(this),\n        UsingNode: this.transformUsing.bind(this),\n        FunctionNode: this.transformFunction.bind(this),\n        CaseNode: this.transformCase.bind(this),\n        WhenNode: this.transformWhen.bind(this),\n        JSONReferenceNode: this.transformJSONReference.bind(this),\n        JSONPathNode: this.transformJSONPath.bind(this),\n        JSONPathLegNode: this.transformJSONPathLeg.bind(this),\n        JSONOperatorChainNode: this.transformJSONOperatorChain.bind(this),\n        TupleNode: this.transformTuple.bind(this),\n        MergeQueryNode: this.transformMergeQuery.bind(this),\n        MatchedNode: this.transformMatched.bind(this),\n        AddIndexNode: this.transformAddIndex.bind(this),\n        CastNode: this.transformCast.bind(this),\n        FetchNode: this.transformFetch.bind(this),\n        TopNode: this.transformTop.bind(this),\n    });\n    transformNode(node) {\n        if (!node) {\n            return node;\n        }\n        this.nodeStack.push(node);\n        const out = this.transformNodeImpl(node);\n        this.nodeStack.pop();\n        return freeze(out);\n    }\n    transformNodeImpl(node) {\n        return this.#transformers[node.kind](node);\n    }\n    transformNodeList(list) {\n        if (!list) {\n            return list;\n        }\n        return freeze(list.map((node) => this.transformNode(node)));\n    }\n    transformSelectQuery(node) {\n        return requireAllProps({\n            kind: 'SelectQueryNode',\n            from: this.transformNode(node.from),\n            selections: this.transformNodeList(node.selections),\n            distinctOn: this.transformNodeList(node.distinctOn),\n            joins: this.transformNodeList(node.joins),\n            groupBy: this.transformNode(node.groupBy),\n            orderBy: this.transformNode(node.orderBy),\n            where: this.transformNode(node.where),\n            frontModifiers: this.transformNodeList(node.frontModifiers),\n            endModifiers: this.transformNodeList(node.endModifiers),\n            limit: this.transformNode(node.limit),\n            offset: this.transformNode(node.offset),\n            with: this.transformNode(node.with),\n            having: this.transformNode(node.having),\n            explain: this.transformNode(node.explain),\n            setOperations: this.transformNodeList(node.setOperations),\n            fetch: this.transformNode(node.fetch),\n            top: this.transformNode(node.top),\n        });\n    }\n    transformSelection(node) {\n        return requireAllProps({\n            kind: 'SelectionNode',\n            selection: this.transformNode(node.selection),\n        });\n    }\n    transformColumn(node) {\n        return requireAllProps({\n            kind: 'ColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformAlias(node) {\n        return requireAllProps({\n            kind: 'AliasNode',\n            node: this.transformNode(node.node),\n            alias: this.transformNode(node.alias),\n        });\n    }\n    transformTable(node) {\n        return requireAllProps({\n            kind: 'TableNode',\n            table: this.transformNode(node.table),\n        });\n    }\n    transformFrom(node) {\n        return requireAllProps({\n            kind: 'FromNode',\n            froms: this.transformNodeList(node.froms),\n        });\n    }\n    transformReference(node) {\n        return requireAllProps({\n            kind: 'ReferenceNode',\n            column: this.transformNode(node.column),\n            table: this.transformNode(node.table),\n        });\n    }\n    transformAnd(node) {\n        return requireAllProps({\n            kind: 'AndNode',\n            left: this.transformNode(node.left),\n            right: this.transformNode(node.right),\n        });\n    }\n    transformOr(node) {\n        return requireAllProps({\n            kind: 'OrNode',\n            left: this.transformNode(node.left),\n            right: this.transformNode(node.right),\n        });\n    }\n    transformValueList(node) {\n        return requireAllProps({\n            kind: 'ValueListNode',\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformParens(node) {\n        return requireAllProps({\n            kind: 'ParensNode',\n            node: this.transformNode(node.node),\n        });\n    }\n    transformJoin(node) {\n        return requireAllProps({\n            kind: 'JoinNode',\n            joinType: node.joinType,\n            table: this.transformNode(node.table),\n            on: this.transformNode(node.on),\n        });\n    }\n    transformRaw(node) {\n        return requireAllProps({\n            kind: 'RawNode',\n            sqlFragments: freeze([...node.sqlFragments]),\n            parameters: this.transformNodeList(node.parameters),\n        });\n    }\n    transformWhere(node) {\n        return requireAllProps({\n            kind: 'WhereNode',\n            where: this.transformNode(node.where),\n        });\n    }\n    transformInsertQuery(node) {\n        return requireAllProps({\n            kind: 'InsertQueryNode',\n            into: this.transformNode(node.into),\n            columns: this.transformNodeList(node.columns),\n            values: this.transformNode(node.values),\n            returning: this.transformNode(node.returning),\n            onConflict: this.transformNode(node.onConflict),\n            onDuplicateKey: this.transformNode(node.onDuplicateKey),\n            with: this.transformNode(node.with),\n            ignore: node.ignore,\n            replace: node.replace,\n            explain: this.transformNode(node.explain),\n            defaultValues: node.defaultValues,\n            top: this.transformNode(node.top),\n        });\n    }\n    transformValues(node) {\n        return requireAllProps({\n            kind: 'ValuesNode',\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformDeleteQuery(node) {\n        return requireAllProps({\n            kind: 'DeleteQueryNode',\n            from: this.transformNode(node.from),\n            using: this.transformNode(node.using),\n            joins: this.transformNodeList(node.joins),\n            where: this.transformNode(node.where),\n            returning: this.transformNode(node.returning),\n            with: this.transformNode(node.with),\n            orderBy: this.transformNode(node.orderBy),\n            limit: this.transformNode(node.limit),\n            explain: this.transformNode(node.explain),\n            top: this.transformNode(node.top),\n        });\n    }\n    transformReturning(node) {\n        return requireAllProps({\n            kind: 'ReturningNode',\n            selections: this.transformNodeList(node.selections),\n        });\n    }\n    transformCreateTable(node) {\n        return requireAllProps({\n            kind: 'CreateTableNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n            constraints: this.transformNodeList(node.constraints),\n            temporary: node.temporary,\n            ifNotExists: node.ifNotExists,\n            onCommit: node.onCommit,\n            frontModifiers: this.transformNodeList(node.frontModifiers),\n            endModifiers: this.transformNodeList(node.endModifiers),\n            selectQuery: this.transformNode(node.selectQuery),\n        });\n    }\n    transformColumnDefinition(node) {\n        return requireAllProps({\n            kind: 'ColumnDefinitionNode',\n            column: this.transformNode(node.column),\n            dataType: this.transformNode(node.dataType),\n            references: this.transformNode(node.references),\n            primaryKey: node.primaryKey,\n            autoIncrement: node.autoIncrement,\n            unique: node.unique,\n            notNull: node.notNull,\n            unsigned: node.unsigned,\n            defaultTo: this.transformNode(node.defaultTo),\n            check: this.transformNode(node.check),\n            generated: this.transformNode(node.generated),\n            frontModifiers: this.transformNodeList(node.frontModifiers),\n            endModifiers: this.transformNodeList(node.endModifiers),\n            nullsNotDistinct: node.nullsNotDistinct,\n            identity: node.identity,\n        });\n    }\n    transformAddColumn(node) {\n        return requireAllProps({\n            kind: 'AddColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformDropTable(node) {\n        return requireAllProps({\n            kind: 'DropTableNode',\n            table: this.transformNode(node.table),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformOrderBy(node) {\n        return requireAllProps({\n            kind: 'OrderByNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformOrderByItem(node) {\n        return requireAllProps({\n            kind: 'OrderByItemNode',\n            orderBy: this.transformNode(node.orderBy),\n            direction: this.transformNode(node.direction),\n        });\n    }\n    transformGroupBy(node) {\n        return requireAllProps({\n            kind: 'GroupByNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformGroupByItem(node) {\n        return requireAllProps({\n            kind: 'GroupByItemNode',\n            groupBy: this.transformNode(node.groupBy),\n        });\n    }\n    transformUpdateQuery(node) {\n        return requireAllProps({\n            kind: 'UpdateQueryNode',\n            table: this.transformNode(node.table),\n            from: this.transformNode(node.from),\n            joins: this.transformNodeList(node.joins),\n            where: this.transformNode(node.where),\n            updates: this.transformNodeList(node.updates),\n            returning: this.transformNode(node.returning),\n            with: this.transformNode(node.with),\n            explain: this.transformNode(node.explain),\n            limit: this.transformNode(node.limit),\n            top: this.transformNode(node.top),\n        });\n    }\n    transformColumnUpdate(node) {\n        return requireAllProps({\n            kind: 'ColumnUpdateNode',\n            column: this.transformNode(node.column),\n            value: this.transformNode(node.value),\n        });\n    }\n    transformLimit(node) {\n        return requireAllProps({\n            kind: 'LimitNode',\n            limit: this.transformNode(node.limit),\n        });\n    }\n    transformOffset(node) {\n        return requireAllProps({\n            kind: 'OffsetNode',\n            offset: this.transformNode(node.offset),\n        });\n    }\n    transformOnConflict(node) {\n        return requireAllProps({\n            kind: 'OnConflictNode',\n            columns: this.transformNodeList(node.columns),\n            constraint: this.transformNode(node.constraint),\n            indexExpression: this.transformNode(node.indexExpression),\n            indexWhere: this.transformNode(node.indexWhere),\n            updates: this.transformNodeList(node.updates),\n            updateWhere: this.transformNode(node.updateWhere),\n            doNothing: node.doNothing,\n        });\n    }\n    transformOnDuplicateKey(node) {\n        return requireAllProps({\n            kind: 'OnDuplicateKeyNode',\n            updates: this.transformNodeList(node.updates),\n        });\n    }\n    transformCreateIndex(node) {\n        return requireAllProps({\n            kind: 'CreateIndexNode',\n            name: this.transformNode(node.name),\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n            unique: node.unique,\n            using: this.transformNode(node.using),\n            ifNotExists: node.ifNotExists,\n            where: this.transformNode(node.where),\n            nullsNotDistinct: node.nullsNotDistinct,\n        });\n    }\n    transformList(node) {\n        return requireAllProps({\n            kind: 'ListNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformDropIndex(node) {\n        return requireAllProps({\n            kind: 'DropIndexNode',\n            name: this.transformNode(node.name),\n            table: this.transformNode(node.table),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformPrimaryKeyConstraint(node) {\n        return requireAllProps({\n            kind: 'PrimaryKeyConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            name: this.transformNode(node.name),\n        });\n    }\n    transformUniqueConstraint(node) {\n        return requireAllProps({\n            kind: 'UniqueConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            name: this.transformNode(node.name),\n            nullsNotDistinct: node.nullsNotDistinct,\n        });\n    }\n    transformForeignKeyConstraint(node) {\n        return requireAllProps({\n            kind: 'ForeignKeyConstraintNode',\n            columns: this.transformNodeList(node.columns),\n            references: this.transformNode(node.references),\n            name: this.transformNode(node.name),\n            onDelete: node.onDelete,\n            onUpdate: node.onUpdate,\n        });\n    }\n    transformSetOperation(node) {\n        return requireAllProps({\n            kind: 'SetOperationNode',\n            operator: node.operator,\n            expression: this.transformNode(node.expression),\n            all: node.all,\n        });\n    }\n    transformReferences(node) {\n        return requireAllProps({\n            kind: 'ReferencesNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n            onDelete: node.onDelete,\n            onUpdate: node.onUpdate,\n        });\n    }\n    transformCheckConstraint(node) {\n        return requireAllProps({\n            kind: 'CheckConstraintNode',\n            expression: this.transformNode(node.expression),\n            name: this.transformNode(node.name),\n        });\n    }\n    transformWith(node) {\n        return requireAllProps({\n            kind: 'WithNode',\n            expressions: this.transformNodeList(node.expressions),\n            recursive: node.recursive,\n        });\n    }\n    transformCommonTableExpression(node) {\n        return requireAllProps({\n            kind: 'CommonTableExpressionNode',\n            name: this.transformNode(node.name),\n            materialized: node.materialized,\n            expression: this.transformNode(node.expression),\n        });\n    }\n    transformCommonTableExpressionName(node) {\n        return requireAllProps({\n            kind: 'CommonTableExpressionNameNode',\n            table: this.transformNode(node.table),\n            columns: this.transformNodeList(node.columns),\n        });\n    }\n    transformHaving(node) {\n        return requireAllProps({\n            kind: 'HavingNode',\n            having: this.transformNode(node.having),\n        });\n    }\n    transformCreateSchema(node) {\n        return requireAllProps({\n            kind: 'CreateSchemaNode',\n            schema: this.transformNode(node.schema),\n            ifNotExists: node.ifNotExists,\n        });\n    }\n    transformDropSchema(node) {\n        return requireAllProps({\n            kind: 'DropSchemaNode',\n            schema: this.transformNode(node.schema),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformAlterTable(node) {\n        return requireAllProps({\n            kind: 'AlterTableNode',\n            table: this.transformNode(node.table),\n            renameTo: this.transformNode(node.renameTo),\n            setSchema: this.transformNode(node.setSchema),\n            columnAlterations: this.transformNodeList(node.columnAlterations),\n            addConstraint: this.transformNode(node.addConstraint),\n            dropConstraint: this.transformNode(node.dropConstraint),\n            addIndex: this.transformNode(node.addIndex),\n            dropIndex: this.transformNode(node.dropIndex),\n        });\n    }\n    transformDropColumn(node) {\n        return requireAllProps({\n            kind: 'DropColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformRenameColumn(node) {\n        return requireAllProps({\n            kind: 'RenameColumnNode',\n            column: this.transformNode(node.column),\n            renameTo: this.transformNode(node.renameTo),\n        });\n    }\n    transformAlterColumn(node) {\n        return requireAllProps({\n            kind: 'AlterColumnNode',\n            column: this.transformNode(node.column),\n            dataType: this.transformNode(node.dataType),\n            dataTypeExpression: this.transformNode(node.dataTypeExpression),\n            setDefault: this.transformNode(node.setDefault),\n            dropDefault: node.dropDefault,\n            setNotNull: node.setNotNull,\n            dropNotNull: node.dropNotNull,\n        });\n    }\n    transformModifyColumn(node) {\n        return requireAllProps({\n            kind: 'ModifyColumnNode',\n            column: this.transformNode(node.column),\n        });\n    }\n    transformAddConstraint(node) {\n        return requireAllProps({\n            kind: 'AddConstraintNode',\n            constraint: this.transformNode(node.constraint),\n        });\n    }\n    transformDropConstraint(node) {\n        return requireAllProps({\n            kind: 'DropConstraintNode',\n            constraintName: this.transformNode(node.constraintName),\n            ifExists: node.ifExists,\n            modifier: node.modifier,\n        });\n    }\n    transformCreateView(node) {\n        return requireAllProps({\n            kind: 'CreateViewNode',\n            name: this.transformNode(node.name),\n            temporary: node.temporary,\n            orReplace: node.orReplace,\n            ifNotExists: node.ifNotExists,\n            materialized: node.materialized,\n            columns: this.transformNodeList(node.columns),\n            as: this.transformNode(node.as),\n        });\n    }\n    transformDropView(node) {\n        return requireAllProps({\n            kind: 'DropViewNode',\n            name: this.transformNode(node.name),\n            ifExists: node.ifExists,\n            materialized: node.materialized,\n            cascade: node.cascade,\n        });\n    }\n    transformGenerated(node) {\n        return requireAllProps({\n            kind: 'GeneratedNode',\n            byDefault: node.byDefault,\n            always: node.always,\n            identity: node.identity,\n            stored: node.stored,\n            expression: this.transformNode(node.expression),\n        });\n    }\n    transformDefaultValue(node) {\n        return requireAllProps({\n            kind: 'DefaultValueNode',\n            defaultValue: this.transformNode(node.defaultValue),\n        });\n    }\n    transformOn(node) {\n        return requireAllProps({\n            kind: 'OnNode',\n            on: this.transformNode(node.on),\n        });\n    }\n    transformSelectModifier(node) {\n        return requireAllProps({\n            kind: 'SelectModifierNode',\n            modifier: node.modifier,\n            rawModifier: this.transformNode(node.rawModifier),\n            of: this.transformNodeList(node.of),\n        });\n    }\n    transformCreateType(node) {\n        return requireAllProps({\n            kind: 'CreateTypeNode',\n            name: this.transformNode(node.name),\n            enum: this.transformNode(node.enum),\n        });\n    }\n    transformDropType(node) {\n        return requireAllProps({\n            kind: 'DropTypeNode',\n            name: this.transformNode(node.name),\n            ifExists: node.ifExists,\n        });\n    }\n    transformExplain(node) {\n        return requireAllProps({\n            kind: 'ExplainNode',\n            format: node.format,\n            options: this.transformNode(node.options),\n        });\n    }\n    transformSchemableIdentifier(node) {\n        return requireAllProps({\n            kind: 'SchemableIdentifierNode',\n            schema: this.transformNode(node.schema),\n            identifier: this.transformNode(node.identifier),\n        });\n    }\n    transformAggregateFunction(node) {\n        return requireAllProps({\n            kind: 'AggregateFunctionNode',\n            aggregated: this.transformNodeList(node.aggregated),\n            distinct: node.distinct,\n            filter: this.transformNode(node.filter),\n            func: node.func,\n            over: this.transformNode(node.over),\n        });\n    }\n    transformOver(node) {\n        return requireAllProps({\n            kind: 'OverNode',\n            orderBy: this.transformNode(node.orderBy),\n            partitionBy: this.transformNode(node.partitionBy),\n        });\n    }\n    transformPartitionBy(node) {\n        return requireAllProps({\n            kind: 'PartitionByNode',\n            items: this.transformNodeList(node.items),\n        });\n    }\n    transformPartitionByItem(node) {\n        return requireAllProps({\n            kind: 'PartitionByItemNode',\n            partitionBy: this.transformNode(node.partitionBy),\n        });\n    }\n    transformBinaryOperation(node) {\n        return requireAllProps({\n            kind: 'BinaryOperationNode',\n            leftOperand: this.transformNode(node.leftOperand),\n            operator: this.transformNode(node.operator),\n            rightOperand: this.transformNode(node.rightOperand),\n        });\n    }\n    transformUnaryOperation(node) {\n        return requireAllProps({\n            kind: 'UnaryOperationNode',\n            operator: this.transformNode(node.operator),\n            operand: this.transformNode(node.operand),\n        });\n    }\n    transformUsing(node) {\n        return requireAllProps({\n            kind: 'UsingNode',\n            tables: this.transformNodeList(node.tables),\n        });\n    }\n    transformFunction(node) {\n        return requireAllProps({\n            kind: 'FunctionNode',\n            func: node.func,\n            arguments: this.transformNodeList(node.arguments),\n        });\n    }\n    transformCase(node) {\n        return requireAllProps({\n            kind: 'CaseNode',\n            value: this.transformNode(node.value),\n            when: this.transformNodeList(node.when),\n            else: this.transformNode(node.else),\n            isStatement: node.isStatement,\n        });\n    }\n    transformWhen(node) {\n        return requireAllProps({\n            kind: 'WhenNode',\n            condition: this.transformNode(node.condition),\n            result: this.transformNode(node.result),\n        });\n    }\n    transformJSONReference(node) {\n        return requireAllProps({\n            kind: 'JSONReferenceNode',\n            reference: this.transformNode(node.reference),\n            traversal: this.transformNode(node.traversal),\n        });\n    }\n    transformJSONPath(node) {\n        return requireAllProps({\n            kind: 'JSONPathNode',\n            inOperator: this.transformNode(node.inOperator),\n            pathLegs: this.transformNodeList(node.pathLegs),\n        });\n    }\n    transformJSONPathLeg(node) {\n        return requireAllProps({\n            kind: 'JSONPathLegNode',\n            type: node.type,\n            value: node.value,\n        });\n    }\n    transformJSONOperatorChain(node) {\n        return requireAllProps({\n            kind: 'JSONOperatorChainNode',\n            operator: this.transformNode(node.operator),\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformTuple(node) {\n        return requireAllProps({\n            kind: 'TupleNode',\n            values: this.transformNodeList(node.values),\n        });\n    }\n    transformMergeQuery(node) {\n        return requireAllProps({\n            kind: 'MergeQueryNode',\n            into: this.transformNode(node.into),\n            using: this.transformNode(node.using),\n            whens: this.transformNodeList(node.whens),\n            with: this.transformNode(node.with),\n            top: this.transformNode(node.top),\n        });\n    }\n    transformMatched(node) {\n        return requireAllProps({\n            kind: 'MatchedNode',\n            not: node.not,\n            bySource: node.bySource,\n        });\n    }\n    transformAddIndex(node) {\n        return requireAllProps({\n            kind: 'AddIndexNode',\n            name: this.transformNode(node.name),\n            columns: this.transformNodeList(node.columns),\n            unique: node.unique,\n            using: this.transformNode(node.using),\n            ifNotExists: node.ifNotExists,\n        });\n    }\n    transformCast(node) {\n        return requireAllProps({\n            kind: 'CastNode',\n            expression: this.transformNode(node.expression),\n            dataType: this.transformNode(node.dataType),\n        });\n    }\n    transformFetch(node) {\n        return requireAllProps({\n            kind: 'FetchNode',\n            rowCount: this.transformNode(node.rowCount),\n            modifier: node.modifier,\n        });\n    }\n    transformTop(node) {\n        return requireAllProps({\n            kind: 'TopNode',\n            expression: node.expression,\n            modifiers: node.modifiers,\n        });\n    }\n    transformDataType(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformSelectAll(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformIdentifier(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformValue(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformPrimitiveValueList(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformOperator(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformDefaultInsertValue(node) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n}\n","/// <reference types=\"./operator-node.d.ts\" />\nimport { freeze, isString } from '../util/object-utils.js';\nexport const COMPARISON_OPERATORS = [\n    '=',\n    '==',\n    '!=',\n    '<>',\n    '>',\n    '>=',\n    '<',\n    '<=',\n    'in',\n    'not in',\n    'is',\n    'is not',\n    'like',\n    'not like',\n    'match',\n    'ilike',\n    'not ilike',\n    '@>',\n    '<@',\n    '&&',\n    '?',\n    '?&',\n    '!<',\n    '!>',\n    '<=>',\n    '!~',\n    '~',\n    '~*',\n    '!~*',\n    '@@',\n    '@@@',\n    '!!',\n    '<->',\n    'regexp',\n    'is distinct from',\n    'is not distinct from',\n];\nexport const ARITHMETIC_OPERATORS = [\n    '+',\n    '-',\n    '*',\n    '/',\n    '%',\n    '^',\n    '&',\n    '|',\n    '#',\n    '<<',\n    '>>',\n];\nexport const JSON_OPERATORS = ['->', '->>'];\nexport const BINARY_OPERATORS = [\n    ...COMPARISON_OPERATORS,\n    ...ARITHMETIC_OPERATORS,\n    '&&',\n    '||',\n];\nexport const UNARY_FILTER_OPERATORS = ['exists', 'not exists'];\nexport const UNARY_OPERATORS = ['not', '-', ...UNARY_FILTER_OPERATORS];\nexport const OPERATORS = [\n    ...BINARY_OPERATORS,\n    ...JSON_OPERATORS,\n    ...UNARY_OPERATORS,\n    'between',\n    'between symmetric',\n];\n/**\n * @internal\n */\nexport const OperatorNode = freeze({\n    is(node) {\n        return node.kind === 'OperatorNode';\n    },\n    create(operator) {\n        return freeze({\n            kind: 'OperatorNode',\n            operator,\n        });\n    },\n});\nexport function isOperator(op) {\n    return isString(op) && OPERATORS.includes(op);\n}\nexport function isBinaryOperator(op) {\n    return isString(op) && BINARY_OPERATORS.includes(op);\n}\nexport function isComparisonOperator(op) {\n    return isString(op) && COMPARISON_OPERATORS.includes(op);\n}\nexport function isArithmeticOperator(op) {\n    return isString(op) && ARITHMETIC_OPERATORS.includes(op);\n}\nexport function isJSONOperator(op) {\n    return isString(op) && JSON_OPERATORS.includes(op);\n}\n","/// <reference types=\"./or-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrNode = freeze({\n    is(node) {\n        return node.kind === 'OrNode';\n    },\n    create(left, right) {\n        return freeze({\n            kind: 'OrNode',\n            left,\n            right,\n        });\n    },\n});\n","/// <reference types=\"./order-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrderByNode = freeze({\n    is(node) {\n        return node.kind === 'OrderByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'OrderByNode',\n            items: freeze([...items]),\n        });\n    },\n    cloneWithItems(orderBy, items) {\n        return freeze({\n            ...orderBy,\n            items: freeze([...orderBy.items, ...items]),\n        });\n    },\n});\n","/// <reference types=\"./parens-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ParensNode = freeze({\n    is(node) {\n        return node.kind === 'ParensNode';\n    },\n    create(node) {\n        return freeze({\n            kind: 'ParensNode',\n            node,\n        });\n    },\n});\n","/// <reference types=\"./primitive-value-list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PrimitiveValueListNode = freeze({\n    is(node) {\n        return node.kind === 'PrimitiveValueListNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'PrimitiveValueListNode',\n            values: freeze([...values]),\n        });\n    },\n});\n","/// <reference types=\"./returning-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ReturningNode = freeze({\n    is(node) {\n        return node.kind === 'ReturningNode';\n    },\n    create(selections) {\n        return freeze({\n            kind: 'ReturningNode',\n            selections: freeze(selections),\n        });\n    },\n    cloneWithSelections(returning, selections) {\n        return freeze({\n            ...returning,\n            selections: returning.selections\n                ? freeze([...returning.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n});\n","/// <reference types=\"./explain-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ExplainNode = freeze({\n    is(node) {\n        return node.kind === 'ExplainNode';\n    },\n    create(format, options) {\n        return freeze({\n            kind: 'ExplainNode',\n            format,\n            options,\n        });\n    },\n});\n","/// <reference types=\"./query-node.d.ts\" />\nimport { InsertQueryNode } from './insert-query-node.js';\nimport { SelectQueryNode } from './select-query-node.js';\nimport { UpdateQueryNode } from './update-query-node.js';\nimport { DeleteQueryNode } from './delete-query-node.js';\nimport { WhereNode } from './where-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { ReturningNode } from './returning-node.js';\nimport { ExplainNode } from './explain-node.js';\nimport { MergeQueryNode } from './merge-query-node.js';\n/**\n * @internal\n */\nexport const QueryNode = freeze({\n    is(node) {\n        return (SelectQueryNode.is(node) ||\n            InsertQueryNode.is(node) ||\n            UpdateQueryNode.is(node) ||\n            DeleteQueryNode.is(node) ||\n            MergeQueryNode.is(node));\n    },\n    cloneWithWhere(node, operation) {\n        return freeze({\n            ...node,\n            where: node.where\n                ? WhereNode.cloneWithOperation(node.where, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithJoin(node, join) {\n        return freeze({\n            ...node,\n            joins: node.joins ? freeze([...node.joins, join]) : freeze([join]),\n        });\n    },\n    cloneWithReturning(node, selections) {\n        return freeze({\n            ...node,\n            returning: node.returning\n                ? ReturningNode.cloneWithSelections(node.returning, selections)\n                : ReturningNode.create(selections),\n        });\n    },\n    cloneWithoutReturning(node) {\n        return freeze({\n            ...node,\n            returning: undefined,\n        });\n    },\n    cloneWithoutWhere(node) {\n        return freeze({\n            ...node,\n            where: undefined,\n        });\n    },\n    cloneWithExplain(node, format, options) {\n        return freeze({\n            ...node,\n            explain: ExplainNode.create(format, options?.toOperationNode()),\n        });\n    },\n    cloneWithTop(node, top) {\n        return freeze({\n            ...node,\n            top,\n        });\n    },\n});\n","/// <reference types=\"./raw-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const RawNode = freeze({\n    is(node) {\n        return node.kind === 'RawNode';\n    },\n    create(sqlFragments, parameters) {\n        return freeze({\n            kind: 'RawNode',\n            sqlFragments: freeze(sqlFragments),\n            parameters: freeze(parameters),\n        });\n    },\n    createWithSql(sql) {\n        return RawNode.create([sql], []);\n    },\n    createWithChild(child) {\n        return RawNode.create(['', ''], [child]);\n    },\n    createWithChildren(children) {\n        return RawNode.create(new Array(children.length + 1).fill(''), children);\n    },\n});\n","/// <reference types=\"./reference-node.d.ts\" />\nimport { SelectAllNode } from './select-all-node.js';\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ReferenceNode = freeze({\n    is(node) {\n        return node.kind === 'ReferenceNode';\n    },\n    create(column, table) {\n        return freeze({\n            kind: 'ReferenceNode',\n            table,\n            column,\n        });\n    },\n    createSelectAll(table) {\n        return freeze({\n            kind: 'ReferenceNode',\n            table,\n            column: SelectAllNode.create(),\n        });\n    },\n});\n","/// <reference types=\"./schemable-identifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const SchemableIdentifierNode = freeze({\n    is(node) {\n        return node.kind === 'SchemableIdentifierNode';\n    },\n    create(identifier) {\n        return freeze({\n            kind: 'SchemableIdentifierNode',\n            identifier: IdentifierNode.create(identifier),\n        });\n    },\n    createWithSchema(schema, identifier) {\n        return freeze({\n            kind: 'SchemableIdentifierNode',\n            schema: IdentifierNode.create(schema),\n            identifier: IdentifierNode.create(identifier),\n        });\n    },\n});\n","/// <reference types=\"./select-all-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SelectAllNode = freeze({\n    is(node) {\n        return node.kind === 'SelectAllNode';\n    },\n    create() {\n        return freeze({\n            kind: 'SelectAllNode',\n        });\n    },\n});\n","/// <reference types=\"./group-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GroupByNode = freeze({\n    is(node) {\n        return node.kind === 'GroupByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'GroupByNode',\n            items: freeze(items),\n        });\n    },\n    cloneWithItems(groupBy, items) {\n        return freeze({\n            ...groupBy,\n            items: freeze([...groupBy.items, ...items]),\n        });\n    },\n});\n","/// <reference types=\"./having-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const HavingNode = freeze({\n    is(node) {\n        return node.kind === 'HavingNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'HavingNode',\n            having: filter,\n        });\n    },\n    cloneWithOperation(havingNode, operator, operation) {\n        return freeze({\n            ...havingNode,\n            having: operator === 'And'\n                ? AndNode.create(havingNode.having, operation)\n                : OrNode.create(havingNode.having, operation),\n        });\n    },\n});\n","/// <reference types=\"./select-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\nimport { GroupByNode } from './group-by-node.js';\nimport { HavingNode } from './having-node.js';\nimport { OrderByNode } from './order-by-node.js';\n/**\n * @internal\n */\nexport const SelectQueryNode = freeze({\n    is(node) {\n        return node.kind === 'SelectQueryNode';\n    },\n    create(withNode) {\n        return freeze({\n            kind: 'SelectQueryNode',\n            ...(withNode && { with: withNode }),\n        });\n    },\n    createFrom(fromItems, withNode) {\n        return freeze({\n            kind: 'SelectQueryNode',\n            from: FromNode.create(fromItems),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithSelections(select, selections) {\n        return freeze({\n            ...select,\n            selections: select.selections\n                ? freeze([...select.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n    cloneWithDistinctOn(select, expressions) {\n        return freeze({\n            ...select,\n            distinctOn: select.distinctOn\n                ? freeze([...select.distinctOn, ...expressions])\n                : freeze(expressions),\n        });\n    },\n    cloneWithFrontModifier(select, modifier) {\n        return freeze({\n            ...select,\n            frontModifiers: select.frontModifiers\n                ? freeze([...select.frontModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWithEndModifier(select, modifier) {\n        return freeze({\n            ...select,\n            endModifiers: select.endModifiers\n                ? freeze([...select.endModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWithOrderByItems(selectNode, items) {\n        return freeze({\n            ...selectNode,\n            orderBy: selectNode.orderBy\n                ? OrderByNode.cloneWithItems(selectNode.orderBy, items)\n                : OrderByNode.create(items),\n        });\n    },\n    cloneWithGroupByItems(selectNode, items) {\n        return freeze({\n            ...selectNode,\n            groupBy: selectNode.groupBy\n                ? GroupByNode.cloneWithItems(selectNode.groupBy, items)\n                : GroupByNode.create(items),\n        });\n    },\n    cloneWithLimit(selectNode, limit) {\n        return freeze({\n            ...selectNode,\n            limit,\n        });\n    },\n    cloneWithOffset(selectNode, offset) {\n        return freeze({\n            ...selectNode,\n            offset,\n        });\n    },\n    cloneWithFetch(selectNode, fetch) {\n        return freeze({\n            ...selectNode,\n            fetch,\n        });\n    },\n    cloneWithHaving(selectNode, operation) {\n        return freeze({\n            ...selectNode,\n            having: selectNode.having\n                ? HavingNode.cloneWithOperation(selectNode.having, 'And', operation)\n                : HavingNode.create(operation),\n        });\n    },\n    cloneWithSetOperations(selectNode, setOperations) {\n        return freeze({\n            ...selectNode,\n            setOperations: selectNode.setOperations\n                ? freeze([...selectNode.setOperations, ...setOperations])\n                : freeze([...setOperations]),\n        });\n    },\n    cloneWithoutSelections(select) {\n        return freeze({\n            ...select,\n            selections: [],\n        });\n    },\n    cloneWithoutLimit(select) {\n        return freeze({\n            ...select,\n            limit: undefined,\n        });\n    },\n    cloneWithoutOffset(select) {\n        return freeze({\n            ...select,\n            offset: undefined,\n        });\n    },\n    cloneWithoutOrderBy(select) {\n        return freeze({\n            ...select,\n            orderBy: undefined,\n        });\n    },\n});\n","/// <reference types=\"./set-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SetOperationNode = freeze({\n    is(node) {\n        return node.kind === 'SetOperationNode';\n    },\n    create(operator, expression, all) {\n        return freeze({\n            kind: 'SetOperationNode',\n            operator,\n            expression,\n            all,\n        });\n    },\n});\n","/// <reference types=\"./table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const TableNode = freeze({\n    is(node) {\n        return node.kind === 'TableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'TableNode',\n            table: SchemableIdentifierNode.create(table),\n        });\n    },\n    createWithSchema(schema, table) {\n        return freeze({\n            kind: 'TableNode',\n            table: SchemableIdentifierNode.createWithSchema(schema, table),\n        });\n    },\n});\n","/// <reference types=\"./update-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\n/**\n * @internal\n */\nexport const UpdateQueryNode = freeze({\n    is(node) {\n        return node.kind === 'UpdateQueryNode';\n    },\n    create(table, withNode) {\n        return freeze({\n            kind: 'UpdateQueryNode',\n            table,\n            ...(withNode && { with: withNode }),\n        });\n    },\n    createWithoutTable() {\n        return freeze({\n            kind: 'UpdateQueryNode',\n        });\n    },\n    cloneWithFromItems(updateQuery, fromItems) {\n        return freeze({\n            ...updateQuery,\n            from: updateQuery.from\n                ? FromNode.cloneWithFroms(updateQuery.from, fromItems)\n                : FromNode.create(fromItems),\n        });\n    },\n    cloneWithUpdates(updateQuery, updates) {\n        return freeze({\n            ...updateQuery,\n            updates: updateQuery.updates\n                ? freeze([...updateQuery.updates, ...updates])\n                : updates,\n        });\n    },\n    cloneWithLimit(updateQuery, limit) {\n        return freeze({\n            ...updateQuery,\n            limit,\n        });\n    },\n});\n","/// <reference types=\"./value-list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValueListNode = freeze({\n    is(node) {\n        return node.kind === 'ValueListNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'ValueListNode',\n            values: freeze(values),\n        });\n    },\n});\n","/// <reference types=\"./value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValueNode = freeze({\n    is(node) {\n        return node.kind === 'ValueNode';\n    },\n    create(value) {\n        return freeze({\n            kind: 'ValueNode',\n            value,\n        });\n    },\n    createImmediate(value) {\n        return freeze({\n            kind: 'ValueNode',\n            value,\n            immediate: true,\n        });\n    },\n});\n","/// <reference types=\"./when-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const WhenNode = freeze({\n    is(node) {\n        return node.kind === 'WhenNode';\n    },\n    create(condition) {\n        return freeze({\n            kind: 'WhenNode',\n            condition,\n        });\n    },\n    cloneWithResult(whenNode, result) {\n        return freeze({\n            ...whenNode,\n            result,\n        });\n    },\n});\n","/// <reference types=\"./where-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const WhereNode = freeze({\n    is(node) {\n        return node.kind === 'WhereNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'WhereNode',\n            where: filter,\n        });\n    },\n    cloneWithOperation(whereNode, operator, operation) {\n        return freeze({\n            ...whereNode,\n            where: operator === 'And'\n                ? AndNode.create(whereNode.where, operation)\n                : OrNode.create(whereNode.where, operation),\n        });\n    },\n});\n","/// <reference types=\"./binary-operation-parser.d.ts\" />\nimport { BinaryOperationNode } from '../operation-node/binary-operation-node.js';\nimport { isBoolean, isNull, isString, isUndefined, } from '../util/object-utils.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { OperatorNode, OPERATORS, } from '../operation-node/operator-node.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nimport { parseValueExpression, parseValueExpressionOrList, } from './value-parser.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { OrNode } from '../operation-node/or-node.js';\nexport function parseValueBinaryOperationOrExpression(args) {\n    if (args.length === 3) {\n        return parseValueBinaryOperation(args[0], args[1], args[2]);\n    }\n    else if (args.length === 1) {\n        return parseValueExpression(args[0]);\n    }\n    throw new Error(`invalid arguments: ${JSON.stringify(args)}`);\n}\nexport function parseValueBinaryOperation(left, operator, right) {\n    if (isIsOperator(operator) && needsIsOperator(right)) {\n        return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), ValueNode.createImmediate(right));\n    }\n    return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseValueExpressionOrList(right));\n}\nexport function parseReferentialBinaryOperation(left, operator, right) {\n    return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseReferenceExpression(right));\n}\nexport function parseFilterObject(obj, combinator) {\n    return parseFilterList(Object.entries(obj)\n        .filter(([, v]) => !isUndefined(v))\n        .map(([k, v]) => parseValueBinaryOperation(k, needsIsOperator(v) ? 'is' : '=', v)), combinator);\n}\nexport function parseFilterList(list, combinator, withParens = true) {\n    const combine = combinator === 'and' ? AndNode.create : OrNode.create;\n    if (list.length === 0) {\n        return BinaryOperationNode.create(ValueNode.createImmediate(1), OperatorNode.create('='), ValueNode.createImmediate(combinator === 'and' ? 1 : 0));\n    }\n    let node = toOperationNode(list[0]);\n    for (let i = 1; i < list.length; ++i) {\n        node = combine(node, toOperationNode(list[i]));\n    }\n    if (list.length > 1 && withParens) {\n        return ParensNode.create(node);\n    }\n    return node;\n}\nfunction isIsOperator(operator) {\n    return operator === 'is' || operator === 'is not';\n}\nfunction needsIsOperator(value) {\n    return isNull(value) || isBoolean(value);\n}\nfunction parseOperator(operator) {\n    if (isString(operator) && OPERATORS.includes(operator)) {\n        return OperatorNode.create(operator);\n    }\n    if (isOperationNodeSource(operator)) {\n        return operator.toOperationNode();\n    }\n    throw new Error(`invalid operator ${JSON.stringify(operator)}`);\n}\nfunction toOperationNode(nodeOrSource) {\n    return isOperationNodeSource(nodeOrSource)\n        ? nodeOrSource.toOperationNode()\n        : nodeOrSource;\n}\n","/// <reference types=\"./data-type-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nconst SIMPLE_COLUMN_DATA_TYPES = [\n    'varchar',\n    'char',\n    'text',\n    'integer',\n    'int2',\n    'int4',\n    'int8',\n    'smallint',\n    'bigint',\n    'boolean',\n    'real',\n    'double precision',\n    'float4',\n    'float8',\n    'decimal',\n    'numeric',\n    'binary',\n    'bytea',\n    'date',\n    'datetime',\n    'time',\n    'timetz',\n    'timestamp',\n    'timestamptz',\n    'serial',\n    'bigserial',\n    'uuid',\n    'json',\n    'jsonb',\n    'blob',\n];\nconst COLUMN_DATA_TYPE_REGEX = [\n    /^varchar\\(\\d+\\)$/,\n    /^char\\(\\d+\\)$/,\n    /^decimal\\(\\d+, \\d+\\)$/,\n    /^numeric\\(\\d+, \\d+\\)$/,\n    /^binary\\(\\d+\\)$/,\n    /^datetime\\(\\d+\\)$/,\n    /^time\\(\\d+\\)$/,\n    /^timez\\(\\d+\\)$/,\n    /^timestamp\\(\\d+\\)$/,\n    /^timestamptz\\(\\d+\\)$/,\n];\n/**\n * @internal\n */\nexport const DataTypeNode = freeze({\n    is(node) {\n        return node.kind === 'DataTypeNode';\n    },\n    create(dataType) {\n        return freeze({\n            kind: 'DataTypeNode',\n            dataType,\n        });\n    },\n});\nexport function isColumnDataType(dataType) {\n    if (SIMPLE_COLUMN_DATA_TYPES.includes(dataType)) {\n        return true;\n    }\n    if (COLUMN_DATA_TYPE_REGEX.some((r) => r.test(dataType))) {\n        return true;\n    }\n    return false;\n}\n","/// <reference types=\"./data-type-parser.d.ts\" />\nimport { DataTypeNode, isColumnDataType, } from '../operation-node/data-type-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nexport function parseDataTypeExpression(dataType) {\n    if (isOperationNodeSource(dataType)) {\n        return dataType.toOperationNode();\n    }\n    if (isColumnDataType(dataType)) {\n        return DataTypeNode.create(dataType);\n    }\n    throw new Error(`invalid column data type ${JSON.stringify(dataType)}`);\n}\n","/// <reference types=\"./expression-parser.d.ts\" />\nimport { isAliasedExpression, isExpression, } from '../expression/expression.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nexport function parseExpression(exp) {\n    if (isOperationNodeSource(exp)) {\n        return exp.toOperationNode();\n    }\n    else if (isFunction(exp)) {\n        return exp(expressionBuilder()).toOperationNode();\n    }\n    throw new Error(`invalid expression: ${JSON.stringify(exp)}`);\n}\nexport function parseAliasedExpression(exp) {\n    if (isOperationNodeSource(exp)) {\n        return exp.toOperationNode();\n    }\n    else if (isFunction(exp)) {\n        return exp(expressionBuilder()).toOperationNode();\n    }\n    throw new Error(`invalid aliased expression: ${JSON.stringify(exp)}`);\n}\nexport function isExpressionOrFactory(obj) {\n    return isExpression(obj) || isAliasedExpression(obj) || isFunction(obj);\n}\n","/// <reference types=\"./expression.d.ts\" />\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport function isExpression(obj) {\n    return isObject(obj) && 'expressionType' in obj && isOperationNodeSource(obj);\n}\nexport function isAliasedExpression(obj) {\n    return (isObject(obj) &&\n        'expression' in obj &&\n        isString(obj.alias) &&\n        isOperationNodeSource(obj));\n}\n","/// <reference types=\"./join-parser.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { parseTableExpression, } from './table-parser.js';\nimport { parseReferentialBinaryOperation } from './binary-operation-parser.js';\nimport { createJoinBuilder } from './parse-utils.js';\nexport function parseJoin(joinType, args) {\n    if (args.length === 3) {\n        return parseSingleOnJoin(joinType, args[0], args[1], args[2]);\n    }\n    else if (args.length === 2) {\n        return parseCallbackJoin(joinType, args[0], args[1]);\n    }\n    else {\n        throw new Error('not implemented');\n    }\n}\nfunction parseCallbackJoin(joinType, from, callback) {\n    return callback(createJoinBuilder(joinType, from)).toOperationNode();\n}\nfunction parseSingleOnJoin(joinType, from, lhsColumn, rhsColumn) {\n    return JoinNode.createWithOn(joinType, parseTableExpression(from), parseReferentialBinaryOperation(lhsColumn, '=', rhsColumn));\n}\n","/// <reference types=\"./order-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrderByItemNode = freeze({\n    is(node) {\n        return node.kind === 'OrderByItemNode';\n    },\n    create(orderBy, direction) {\n        return freeze({\n            kind: 'OrderByItemNode',\n            orderBy,\n            direction,\n        });\n    },\n});\n","/// <reference types=\"./order-by-parser.d.ts\" />\nimport { isDynamicReferenceBuilder } from '../dynamic/dynamic-reference-builder.js';\nimport { OrderByItemNode } from '../operation-node/order-by-item-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { isExpressionOrFactory, parseExpression } from './expression-parser.js';\nimport { parseStringReference } from './reference-parser.js';\nexport function isOrderByDirection(thing) {\n    return thing === 'asc' || thing === 'desc';\n}\nexport function parseOrderBy(args) {\n    if (args.length === 2) {\n        return [parseOrderByItem(args[0], args[1])];\n    }\n    if (args.length === 1) {\n        const [orderBy] = args;\n        if (Array.isArray(orderBy)) {\n            return orderBy.map((item) => parseOrderByItem(item));\n        }\n        return [parseOrderByItem(orderBy)];\n    }\n    throw new Error(`Invalid number of arguments at order by! expected 1-2, received ${args.length}`);\n}\nexport function parseOrderByItem(ref, direction) {\n    const parsedRef = parseOrderByExpression(ref);\n    if (OrderByItemNode.is(parsedRef)) {\n        if (direction) {\n            throw new Error('Cannot specify direction twice!');\n        }\n        return parsedRef;\n    }\n    return OrderByItemNode.create(parsedRef, parseOrderByDirectionExpression(direction));\n}\nfunction parseOrderByExpression(expr) {\n    if (isExpressionOrFactory(expr)) {\n        return parseExpression(expr);\n    }\n    if (isDynamicReferenceBuilder(expr)) {\n        return expr.toOperationNode();\n    }\n    const [ref, direction] = expr.split(' ');\n    if (direction) {\n        if (!isOrderByDirection(direction)) {\n            throw new Error(`Invalid order by direction: ${direction}`);\n        }\n        return OrderByItemNode.create(parseStringReference(ref), parseOrderByDirectionExpression(direction));\n    }\n    return parseStringReference(expr);\n}\nfunction parseOrderByDirectionExpression(expr) {\n    if (!expr) {\n        return undefined;\n    }\n    if (expr === 'asc' || expr === 'desc') {\n        return RawNode.createWithSql(expr);\n    }\n    return expr.toOperationNode();\n}\n","/// <reference types=\"./partition-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PartitionByNode = freeze({\n    is(node) {\n        return node.kind === 'PartitionByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'PartitionByNode',\n            items: freeze(items),\n        });\n    },\n    cloneWithItems(partitionBy, items) {\n        return freeze({\n            ...partitionBy,\n            items: freeze([...partitionBy.items, ...items]),\n        });\n    },\n});\n","/// <reference types=\"./over-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { OrderByNode } from './order-by-node.js';\nimport { PartitionByNode } from './partition-by-node.js';\n/**\n * @internal\n */\nexport const OverNode = freeze({\n    is(node) {\n        return node.kind === 'OverNode';\n    },\n    create() {\n        return freeze({\n            kind: 'OverNode',\n        });\n    },\n    cloneWithOrderByItems(overNode, items) {\n        return freeze({\n            ...overNode,\n            orderBy: overNode.orderBy\n                ? OrderByNode.cloneWithItems(overNode.orderBy, items)\n                : OrderByNode.create(items),\n        });\n    },\n    cloneWithPartitionByItems(overNode, items) {\n        return freeze({\n            ...overNode,\n            partitionBy: overNode.partitionBy\n                ? PartitionByNode.cloneWithItems(overNode.partitionBy, items)\n                : PartitionByNode.create(items),\n        });\n    },\n});\n","/// <reference types=\"./join-builder.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class JoinBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    on(...args) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Just like {@link WhereInterface.whereRef} but adds an item to the join's\n     * `on` clause instead.\n     *\n     * See {@link WhereInterface.whereRef} for documentation and examples.\n     */\n    onRef(lhs, op, rhs) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    /**\n     * Adds `on true`.\n     */\n    onTrue() {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, RawNode.createWithSql('true')),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.joinNode;\n    }\n}\npreventAwait(JoinBuilder, \"don't await JoinBuilder instances. They are never executed directly and are always just a part of a query.\");\n","/// <reference types=\"./partition-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PartitionByItemNode = freeze({\n    is(node) {\n        return node.kind === 'PartitionByItemNode';\n    },\n    create(partitionBy) {\n        return freeze({\n            kind: 'PartitionByItemNode',\n            partitionBy,\n        });\n    },\n});\n","/// <reference types=\"./partition-by-parser.d.ts\" />\nimport { PartitionByItemNode } from '../operation-node/partition-by-item-node.js';\nimport { parseReferenceExpressionOrList, } from './reference-parser.js';\nexport function parsePartitionBy(partitionBy) {\n    return parseReferenceExpressionOrList(partitionBy).map(PartitionByItemNode.create);\n}\n","/// <reference types=\"./over-builder.d.ts\" />\nimport { OverNode } from '../operation-node/over-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { parsePartitionBy, } from '../parser/partition-by-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class OverBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds an order by clause item inside the over function.\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over(\n     *       ob => ob.orderBy('first_name', 'asc').orderBy('last_name', 'asc')\n     *     ).as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over(order by \"first_name\" asc, \"last_name\" asc) as \"average_age\"\n     * from \"person\"\n     * ```\n     */\n    orderBy(orderBy, direction) {\n        return new OverBuilder({\n            overNode: OverNode.cloneWithOrderByItems(this.#props.overNode, parseOrderBy([orderBy, direction])),\n        });\n    }\n    partitionBy(partitionBy) {\n        return new OverBuilder({\n            overNode: OverNode.cloneWithPartitionByItems(this.#props.overNode, parsePartitionBy(partitionBy)),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.overNode;\n    }\n}\npreventAwait(OverBuilder, \"don't await OverBuilder instances. They are never executed directly and are always just a part of a query.\");\n","/// <reference types=\"./parse-utils.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { OverNode } from '../operation-node/over-node.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { JoinBuilder } from '../query-builder/join-builder.js';\nimport { OverBuilder } from '../query-builder/over-builder.js';\nimport { createSelectQueryBuilder as newSelectQueryBuilder, } from '../query-builder/select-query-builder.js';\nimport { QueryCreator } from '../query-creator.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { parseTableExpression, parseTableExpressionOrList, } from './table-parser.js';\nexport function createSelectQueryBuilder() {\n    return newSelectQueryBuilder({\n        queryId: createQueryId(),\n        executor: NOOP_QUERY_EXECUTOR,\n        queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList([])),\n    });\n}\nexport function createQueryCreator() {\n    return new QueryCreator({\n        executor: NOOP_QUERY_EXECUTOR,\n    });\n}\nexport function createJoinBuilder(joinType, table) {\n    return new JoinBuilder({\n        joinNode: JoinNode.create(joinType, parseTableExpression(table)),\n    });\n}\nexport function createOverBuilder() {\n    return new OverBuilder({\n        overNode: OverNode.create(),\n    });\n}\n","/// <reference types=\"./reference-parser.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ReferenceNode } from '../operation-node/reference-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { parseExpression, isExpressionOrFactory, } from './expression-parser.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOrderByDirection, parseOrderBy, } from './order-by-parser.js';\nimport { OperatorNode, isJSONOperator, } from '../operation-node/operator-node.js';\nimport { JSONReferenceNode } from '../operation-node/json-reference-node.js';\nimport { JSONOperatorChainNode } from '../operation-node/json-operator-chain-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nexport function parseSimpleReferenceExpression(exp) {\n    if (isString(exp)) {\n        return parseStringReference(exp);\n    }\n    return exp.toOperationNode();\n}\nexport function parseReferenceExpressionOrList(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg.map((it) => parseReferenceExpression(it));\n    }\n    else {\n        return [parseReferenceExpression(arg)];\n    }\n}\nexport function parseReferenceExpression(exp) {\n    if (isExpressionOrFactory(exp)) {\n        return parseExpression(exp);\n    }\n    return parseSimpleReferenceExpression(exp);\n}\nexport function parseJSONReference(ref, op) {\n    const referenceNode = parseStringReference(ref);\n    if (isJSONOperator(op)) {\n        return JSONReferenceNode.create(referenceNode, JSONOperatorChainNode.create(OperatorNode.create(op)));\n    }\n    const opWithoutLastChar = op.slice(0, -1);\n    if (isJSONOperator(opWithoutLastChar)) {\n        return JSONReferenceNode.create(referenceNode, JSONPathNode.create(OperatorNode.create(opWithoutLastChar)));\n    }\n    throw new Error(`Invalid JSON operator: ${op}`);\n}\nexport function parseStringReference(ref) {\n    const COLUMN_SEPARATOR = '.';\n    if (!ref.includes(COLUMN_SEPARATOR)) {\n        return ReferenceNode.create(ColumnNode.create(ref));\n    }\n    const parts = ref.split(COLUMN_SEPARATOR).map(trim);\n    if (parts.length === 3) {\n        return parseStringReferenceWithTableAndSchema(parts);\n    }\n    if (parts.length === 2) {\n        return parseStringReferenceWithTable(parts);\n    }\n    throw new Error(`invalid column reference ${ref}`);\n}\nexport function parseAliasedStringReference(ref) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (ref.includes(ALIAS_SEPARATOR)) {\n        const [columnRef, alias] = ref.split(ALIAS_SEPARATOR).map(trim);\n        return AliasNode.create(parseStringReference(columnRef), IdentifierNode.create(alias));\n    }\n    else {\n        return parseStringReference(ref);\n    }\n}\nexport function parseColumnName(column) {\n    return ColumnNode.create(column);\n}\nexport function parseOrderedColumnName(column) {\n    const ORDER_SEPARATOR = ' ';\n    if (column.includes(ORDER_SEPARATOR)) {\n        const [columnName, order] = column.split(ORDER_SEPARATOR).map(trim);\n        if (!isOrderByDirection(order)) {\n            throw new Error(`invalid order direction \"${order}\" next to \"${columnName}\"`);\n        }\n        return parseOrderBy([columnName, order])[0];\n    }\n    else {\n        return parseColumnName(column);\n    }\n}\nfunction parseStringReferenceWithTableAndSchema(parts) {\n    const [schema, table, column] = parts;\n    return ReferenceNode.create(ColumnNode.create(column), TableNode.createWithSchema(schema, table));\n}\nfunction parseStringReferenceWithTable(parts) {\n    const [table, column] = parts;\n    return ReferenceNode.create(ColumnNode.create(column), TableNode.create(table));\n}\nfunction trim(str) {\n    return str.trim();\n}\n","/// <reference types=\"./selection-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ReferenceNode } from './reference-node.js';\nimport { SelectAllNode } from './select-all-node.js';\n/**\n * @internal\n */\nexport const SelectionNode = freeze({\n    is(node) {\n        return node.kind === 'SelectionNode';\n    },\n    create(selection) {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: selection,\n        });\n    },\n    createSelectAll() {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: SelectAllNode.create(),\n        });\n    },\n    createSelectAllFromTable(table) {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: ReferenceNode.createSelectAll(table),\n        });\n    },\n});\n","/// <reference types=\"./select-parser.d.ts\" />\nimport { isFunction, isReadonlyArray, isString } from '../util/object-utils.js';\nimport { SelectionNode } from '../operation-node/selection-node.js';\nimport { parseAliasedStringReference } from './reference-parser.js';\nimport { isDynamicReferenceBuilder, } from '../dynamic/dynamic-reference-builder.js';\nimport { parseAliasedExpression, } from './expression-parser.js';\nimport { parseTable } from './table-parser.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nexport function parseSelectArg(selection) {\n    if (isFunction(selection)) {\n        return parseSelectArg(selection(expressionBuilder()));\n    }\n    else if (isReadonlyArray(selection)) {\n        return selection.map((it) => parseSelectExpression(it));\n    }\n    else {\n        return [parseSelectExpression(selection)];\n    }\n}\nfunction parseSelectExpression(selection) {\n    if (isString(selection)) {\n        return SelectionNode.create(parseAliasedStringReference(selection));\n    }\n    else if (isDynamicReferenceBuilder(selection)) {\n        return SelectionNode.create(selection.toOperationNode());\n    }\n    else {\n        return SelectionNode.create(parseAliasedExpression(selection));\n    }\n}\nexport function parseSelectAll(table) {\n    if (!table) {\n        return [SelectionNode.createSelectAll()];\n    }\n    else if (Array.isArray(table)) {\n        return table.map(parseSelectAllArg);\n    }\n    else {\n        return [parseSelectAllArg(table)];\n    }\n}\nfunction parseSelectAllArg(table) {\n    if (isString(table)) {\n        return SelectionNode.createSelectAllFromTable(parseTable(table));\n    }\n    throw new Error(`invalid value selectAll expression: ${JSON.stringify(table)}`);\n}\n","/// <reference types=\"./table-parser.d.ts\" />\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { parseAliasedExpression, } from './expression-parser.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nexport function parseTableExpressionOrList(table) {\n    if (isReadonlyArray(table)) {\n        return table.map((it) => parseTableExpression(it));\n    }\n    else {\n        return [parseTableExpression(table)];\n    }\n}\nexport function parseTableExpression(table) {\n    if (isString(table)) {\n        return parseAliasedTable(table);\n    }\n    else {\n        return parseAliasedExpression(table);\n    }\n}\nexport function parseAliasedTable(from) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (from.includes(ALIAS_SEPARATOR)) {\n        const [table, alias] = from.split(ALIAS_SEPARATOR).map(trim);\n        return AliasNode.create(parseTable(table), IdentifierNode.create(alias));\n    }\n    else {\n        return parseTable(from);\n    }\n}\nexport function parseTable(from) {\n    const SCHEMA_SEPARATOR = '.';\n    if (from.includes(SCHEMA_SEPARATOR)) {\n        const [schema, table] = from.split(SCHEMA_SEPARATOR).map(trim);\n        return TableNode.createWithSchema(schema, table);\n    }\n    else {\n        return TableNode.create(from);\n    }\n}\nfunction trim(str) {\n    return str.trim();\n}\n","/// <reference types=\"./top-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const TopNode = freeze({\n    is(node) {\n        return node.kind === 'TopNode';\n    },\n    create(expression, modifiers) {\n        return freeze({\n            kind: 'TopNode',\n            expression,\n            modifiers,\n        });\n    },\n});\n","/// <reference types=\"./top-parser.d.ts\" />\nimport { TopNode } from '../operation-node/top-node.js';\nimport { isBigInt, isNumber, isUndefined } from '../util/object-utils.js';\nexport function parseTop(expression, modifiers) {\n    if (!isNumber(expression) && !isBigInt(expression)) {\n        throw new Error(`Invalid top expression: ${expression}`);\n    }\n    if (!isUndefined(modifiers) && !isTopModifiers(modifiers)) {\n        throw new Error(`Invalid top modifiers: ${modifiers}`);\n    }\n    return TopNode.create(expression, modifiers);\n}\nfunction isTopModifiers(modifiers) {\n    return (modifiers === 'percent' ||\n        modifiers === 'with ties' ||\n        modifiers === 'percent with ties');\n}\n","/// <reference types=\"./value-parser.d.ts\" />\nimport { PrimitiveValueListNode } from '../operation-node/primitive-value-list-node.js';\nimport { ValueListNode } from '../operation-node/value-list-node.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { isBoolean, isNull, isNumber, isReadonlyArray, } from '../util/object-utils.js';\nimport { parseExpression, isExpressionOrFactory, } from './expression-parser.js';\nexport function parseValueExpressionOrList(arg) {\n    if (isReadonlyArray(arg)) {\n        return parseValueExpressionList(arg);\n    }\n    return parseValueExpression(arg);\n}\nexport function parseValueExpression(exp) {\n    if (isExpressionOrFactory(exp)) {\n        return parseExpression(exp);\n    }\n    return ValueNode.create(exp);\n}\nexport function isSafeImmediateValue(value) {\n    return isNumber(value) || isBoolean(value) || isNull(value);\n}\nexport function parseSafeImmediateValue(value) {\n    if (!isSafeImmediateValue(value)) {\n        throw new Error(`unsafe immediate value ${JSON.stringify(value)}`);\n    }\n    return ValueNode.createImmediate(value);\n}\nfunction parseValueExpressionList(arg) {\n    if (arg.some(isExpressionOrFactory)) {\n        return ValueListNode.create(arg.map((it) => parseValueExpression(it)));\n    }\n    return PrimitiveValueListNode.create(arg);\n}\n","/// <reference types=\"./with-schema-transformer.d.ts\" />\nimport { AliasNode } from '../../operation-node/alias-node.js';\nimport { IdentifierNode } from '../../operation-node/identifier-node.js';\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\nimport { SchemableIdentifierNode } from '../../operation-node/schemable-identifier-node.js';\nimport { TableNode } from '../../operation-node/table-node.js';\nimport { freeze } from '../../util/object-utils.js';\n// This object exist only so that we get a type error when a new RootOperationNode\n// is added. If you get a type error here, make sure to add the new root node and\n// handle it correctly in the transformer.\n//\n// DO NOT REFACTOR THIS EVEN IF IT SEEMS USELESS TO YOU!\nconst ROOT_OPERATION_NODES = freeze({\n    AlterTableNode: true,\n    CreateIndexNode: true,\n    CreateSchemaNode: true,\n    CreateTableNode: true,\n    CreateTypeNode: true,\n    CreateViewNode: true,\n    DeleteQueryNode: true,\n    DropIndexNode: true,\n    DropSchemaNode: true,\n    DropTableNode: true,\n    DropTypeNode: true,\n    DropViewNode: true,\n    InsertQueryNode: true,\n    RawNode: true,\n    SelectQueryNode: true,\n    UpdateQueryNode: true,\n    MergeQueryNode: true,\n});\nexport class WithSchemaTransformer extends OperationNodeTransformer {\n    #schema;\n    #schemableIds = new Set();\n    #ctes = new Set();\n    constructor(schema) {\n        super();\n        this.#schema = schema;\n    }\n    transformNodeImpl(node) {\n        if (!this.#isRootOperationNode(node)) {\n            return super.transformNodeImpl(node);\n        }\n        const ctes = this.#collectCTEs(node);\n        for (const cte of ctes) {\n            this.#ctes.add(cte);\n        }\n        const tables = this.#collectSchemableIds(node);\n        for (const table of tables) {\n            this.#schemableIds.add(table);\n        }\n        const transformed = super.transformNodeImpl(node);\n        for (const table of tables) {\n            this.#schemableIds.delete(table);\n        }\n        for (const cte of ctes) {\n            this.#ctes.delete(cte);\n        }\n        return transformed;\n    }\n    transformSchemableIdentifier(node) {\n        const transformed = super.transformSchemableIdentifier(node);\n        if (transformed.schema || !this.#schemableIds.has(node.identifier.name)) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            schema: IdentifierNode.create(this.#schema),\n        };\n    }\n    transformReferences(node) {\n        const transformed = super.transformReferences(node);\n        if (transformed.table.table.schema) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            table: TableNode.createWithSchema(this.#schema, transformed.table.table.identifier.name),\n        };\n    }\n    #isRootOperationNode(node) {\n        return node.kind in ROOT_OPERATION_NODES;\n    }\n    #collectSchemableIds(node) {\n        const schemableIds = new Set();\n        if ('name' in node && node.name && SchemableIdentifierNode.is(node.name)) {\n            this.#collectSchemableId(node.name, schemableIds);\n        }\n        if ('from' in node && node.from) {\n            for (const from of node.from.froms) {\n                this.#collectSchemableIdsFromTableExpr(from, schemableIds);\n            }\n        }\n        if ('into' in node && node.into) {\n            this.#collectSchemableIdsFromTableExpr(node.into, schemableIds);\n        }\n        if ('table' in node && node.table) {\n            this.#collectSchemableIdsFromTableExpr(node.table, schemableIds);\n        }\n        if ('joins' in node && node.joins) {\n            for (const join of node.joins) {\n                this.#collectSchemableIdsFromTableExpr(join.table, schemableIds);\n            }\n        }\n        if ('using' in node && node.using) {\n            this.#collectSchemableIdsFromTableExpr(node.using, schemableIds);\n        }\n        return schemableIds;\n    }\n    #collectCTEs(node) {\n        const ctes = new Set();\n        if ('with' in node && node.with) {\n            this.#collectCTEIds(node.with, ctes);\n        }\n        return ctes;\n    }\n    #collectSchemableIdsFromTableExpr(node, schemableIds) {\n        const table = TableNode.is(node)\n            ? node\n            : AliasNode.is(node) && TableNode.is(node.node)\n                ? node.node\n                : null;\n        if (table) {\n            this.#collectSchemableId(table.table, schemableIds);\n        }\n    }\n    #collectSchemableId(node, schemableIds) {\n        const id = node.identifier.name;\n        if (!this.#schemableIds.has(id) && !this.#ctes.has(id)) {\n            schemableIds.add(id);\n        }\n    }\n    #collectCTEIds(node, ctes) {\n        for (const expr of node.expressions) {\n            const cteId = expr.name.table.table.identifier.name;\n            if (!this.#ctes.has(cteId)) {\n                ctes.add(cteId);\n            }\n        }\n    }\n}\n","/// <reference types=\"./with-schema-plugin.d.ts\" />\nimport { WithSchemaTransformer } from './with-schema-transformer.js';\nexport class WithSchemaPlugin {\n    #transformer;\n    constructor(schema) {\n        this.#transformer = new WithSchemaTransformer(schema);\n    }\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node);\n    }\n    async transformResult(args) {\n        return args.result;\n    }\n}\n","/// <reference types=\"./case-builder.d.ts\" />\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nimport { freeze } from '../util/object-utils.js';\nimport { CaseNode } from '../operation-node/case-node.js';\nimport { WhenNode } from '../operation-node/when-node.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { isSafeImmediateValue, parseSafeImmediateValue, parseValueExpression, } from '../parser/value-parser.js';\nexport class CaseBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    when(...args) {\n        return new CaseThenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithWhen(this.#props.node, WhenNode.create(parseValueBinaryOperationOrExpression(args))),\n        });\n    }\n}\nexport class CaseThenBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    then(valueExpression) {\n        return new CaseWhenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithThen(this.#props.node, isSafeImmediateValue(valueExpression)\n                ? parseSafeImmediateValue(valueExpression)\n                : parseValueExpression(valueExpression)),\n        });\n    }\n}\nexport class CaseWhenBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    when(...args) {\n        return new CaseThenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithWhen(this.#props.node, WhenNode.create(parseValueBinaryOperationOrExpression(args))),\n        });\n    }\n    else(valueExpression) {\n        return new CaseEndBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWith(this.#props.node, {\n                else: isSafeImmediateValue(valueExpression)\n                    ? parseSafeImmediateValue(valueExpression)\n                    : parseValueExpression(valueExpression),\n            }),\n        });\n    }\n    end() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: false }));\n    }\n    endCase() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: true }));\n    }\n}\nexport class CaseEndBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    end() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: false }));\n    }\n    endCase() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: true }));\n    }\n}\n","/// <reference types=\"./aggregate-function-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhereNode } from './where-node.js';\n/**\n * @internal\n */\nexport const AggregateFunctionNode = freeze({\n    is(node) {\n        return node.kind === 'AggregateFunctionNode';\n    },\n    create(aggregateFunction, aggregated = []) {\n        return freeze({\n            kind: 'AggregateFunctionNode',\n            func: aggregateFunction,\n            aggregated,\n        });\n    },\n    cloneWithDistinct(aggregateFunctionNode) {\n        return freeze({\n            ...aggregateFunctionNode,\n            distinct: true,\n        });\n    },\n    cloneWithFilter(aggregateFunctionNode, filter) {\n        return freeze({\n            ...aggregateFunctionNode,\n            filter: aggregateFunctionNode.filter\n                ? WhereNode.cloneWithOperation(aggregateFunctionNode.filter, 'And', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithOrFilter(aggregateFunctionNode, filter) {\n        return freeze({\n            ...aggregateFunctionNode,\n            filter: aggregateFunctionNode.filter\n                ? WhereNode.cloneWithOperation(aggregateFunctionNode.filter, 'Or', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithOver(aggregateFunctionNode, over) {\n        return freeze({\n            ...aggregateFunctionNode,\n            over,\n        });\n    },\n});\n","/// <reference types=\"./function-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const FunctionNode = freeze({\n    is(node) {\n        return node.kind === 'FunctionNode';\n    },\n    create(func, args) {\n        return freeze({\n            kind: 'FunctionNode',\n            func,\n            arguments: args,\n        });\n    },\n});\n","/// <reference types=\"./aggregate-function-builder.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AggregateFunctionNode } from '../operation-node/aggregate-function-node.js';\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { createOverBuilder } from '../parser/parse-utils.js';\nimport { parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nexport class AggregateFunctionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    /**\n     * Returns an aliased version of the function.\n     *\n     * In addition to slapping `as \"the_alias\"` to the end of the SQL,\n     * this method also provides strict typing:\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.count<number>('id').as('person_count')\n     *   )\n     *   .executeTakeFirstOrThrow()\n     *\n     * // `person_count: number` field exists in the result type.\n     * console.log(result.person_count)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select count(\"id\") as \"person_count\"\n     * from \"person\"\n     * ```\n     */\n    as(alias) {\n        return new AliasedAggregateFunctionBuilder(this, alias);\n    }\n    /**\n     * Adds a `distinct` clause inside the function.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select((eb) =>\n     *     eb.fn.count<number>('first_name').distinct().as('first_name_count')\n     *   )\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select count(distinct \"first_name\") as \"first_name_count\"\n     * from \"person\"\n     * ```\n     */\n    distinct() {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithDistinct(this.#props.aggregateFunctionNode),\n        });\n    }\n    filterWhere(...args) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Adds a `filter` clause with a nested `where` clause after the function, where\n     * both sides of the operator are references to columns.\n     *\n     * Similar to {@link WhereInterface}'s `whereRef` method.\n     *\n     * ### Examples\n     *\n     * Count people with same first and last names versus general public:\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select((eb) => [\n     *     eb.fn\n     *       .count<number>('id')\n     *       .filterWhereRef('first_name', '=', 'last_name')\n     *       .as('repeat_name_count'),\n     *     eb.fn.count<number>('id').as('total_count'),\n     *   ])\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select\n     *   count(\"id\") filter(where \"first_name\" = \"last_name\") as \"repeat_name_count\",\n     *   count(\"id\") as \"total_count\"\n     * from \"person\"\n     * ```\n     */\n    filterWhereRef(lhs, op, rhs) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    /**\n     * Adds an `over` clause (window functions) after the function.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over().as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over() as \"average_age\"\n     * from \"person\"\n     * ```\n     *\n     * Also supports passing a callback that returns an over builder,\n     * allowing to add partition by and sort by clauses inside over.\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over(\n     *       ob => ob.partitionBy('last_name').orderBy('first_name', 'asc')\n     *     ).as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over(partition by \"last_name\" order by \"first_name\" asc) as \"average_age\"\n     * from \"person\"\n     * ```\n     */\n    over(over) {\n        const builder = createOverBuilder();\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithOver(this.#props.aggregateFunctionNode, (over ? over(builder) : builder).toOperationNode()),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Casts the expression to the given type.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `AggregateFunctionBuilder` with a new output type.\n     */\n    $castTo() {\n        return new AggregateFunctionBuilder(this.#props);\n    }\n    /**\n     * Omit null from the expression's type.\n     *\n     * This function can be useful in cases where you know an expression can't be\n     * null, but Kysely is unable to infer it.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of `this` with a new output type.\n     */\n    $notNull() {\n        return new AggregateFunctionBuilder(this.#props);\n    }\n    toOperationNode() {\n        return this.#props.aggregateFunctionNode;\n    }\n}\npreventAwait(AggregateFunctionBuilder, \"don't await AggregateFunctionBuilder instances. They are never executed directly and are always just a part of a query.\");\n/**\n * {@link AggregateFunctionBuilder} with an alias. The result of calling {@link AggregateFunctionBuilder.as}.\n */\nexport class AliasedAggregateFunctionBuilder {\n    #aggregateFunctionBuilder;\n    #alias;\n    constructor(aggregateFunctionBuilder, alias) {\n        this.#aggregateFunctionBuilder = aggregateFunctionBuilder;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#aggregateFunctionBuilder;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#aggregateFunctionBuilder.toOperationNode(), IdentifierNode.create(this.#alias));\n    }\n}\n","/// <reference types=\"./function-module.d.ts\" />\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nimport { AggregateFunctionNode } from '../operation-node/aggregate-function-node.js';\nimport { FunctionNode } from '../operation-node/function-node.js';\nimport { parseReferenceExpressionOrList, } from '../parser/reference-parser.js';\nimport { parseSelectAll } from '../parser/select-parser.js';\nimport { AggregateFunctionBuilder } from './aggregate-function-builder.js';\nimport { isString } from '../util/object-utils.js';\nimport { parseTable } from '../parser/table-parser.js';\nexport function createFunctionModule() {\n    const fn = (name, args) => {\n        return new ExpressionWrapper(FunctionNode.create(name, parseReferenceExpressionOrList(args ?? [])));\n    };\n    const agg = (name, args) => {\n        return new AggregateFunctionBuilder({\n            aggregateFunctionNode: AggregateFunctionNode.create(name, args ? parseReferenceExpressionOrList(args) : undefined),\n        });\n    };\n    return Object.assign(fn, {\n        agg,\n        avg(column) {\n            return agg('avg', [column]);\n        },\n        coalesce(...values) {\n            return fn('coalesce', values);\n        },\n        count(column) {\n            return agg('count', [column]);\n        },\n        countAll(table) {\n            return new AggregateFunctionBuilder({\n                aggregateFunctionNode: AggregateFunctionNode.create('count', parseSelectAll(table)),\n            });\n        },\n        max(column) {\n            return agg('max', [column]);\n        },\n        min(column) {\n            return agg('min', [column]);\n        },\n        sum(column) {\n            return agg('sum', [column]);\n        },\n        any(column) {\n            return fn('any', [column]);\n        },\n        jsonAgg(table) {\n            return new AggregateFunctionBuilder({\n                aggregateFunctionNode: AggregateFunctionNode.create('json_agg', [\n                    isString(table) ? parseTable(table) : table.toOperationNode(),\n                ]),\n            });\n        },\n        toJson(table) {\n            return new ExpressionWrapper(FunctionNode.create('to_json', [\n                isString(table) ? parseTable(table) : table.toOperationNode(),\n            ]));\n        },\n    });\n}\n","/// <reference types=\"./no-result-error.d.ts\" />\nexport class NoResultError extends Error {\n    /**\n     * The operation node tree of the query that was executed.\n     */\n    node;\n    constructor(node) {\n        super('no result');\n        this.node = node;\n    }\n}\nexport function isNoResultErrorConstructor(fn) {\n    return Object.prototype.hasOwnProperty.call(fn, 'prototype');\n}\n","/// <reference types=\"./select-modifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SelectModifierNode = freeze({\n    is(node) {\n        return node.kind === 'SelectModifierNode';\n    },\n    create(modifier, of) {\n        return freeze({\n            kind: 'SelectModifierNode',\n            modifier,\n            of,\n        });\n    },\n    createWithExpression(modifier) {\n        return freeze({\n            kind: 'SelectModifierNode',\n            rawModifier: modifier,\n        });\n    },\n});\n","/// <reference types=\"./offset-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OffsetNode = freeze({\n    is(node) {\n        return node.kind === 'OffsetNode';\n    },\n    create(offset) {\n        return freeze({\n            kind: 'OffsetNode',\n            offset,\n        });\n    },\n});\n","/// <reference types=\"./group-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GroupByItemNode = freeze({\n    is(node) {\n        return node.kind === 'GroupByItemNode';\n    },\n    create(groupBy) {\n        return freeze({\n            kind: 'GroupByItemNode',\n            groupBy,\n        });\n    },\n});\n","/// <reference types=\"./group-by-parser.d.ts\" />\nimport { GroupByItemNode } from '../operation-node/group-by-item-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { parseReferenceExpressionOrList, } from './reference-parser.js';\nexport function parseGroupBy(groupBy) {\n    groupBy = isFunction(groupBy) ? groupBy(expressionBuilder()) : groupBy;\n    return parseReferenceExpressionOrList(groupBy).map(GroupByItemNode.create);\n}\n","/// <reference types=\"./set-operation-parser.d.ts\" />\nimport { createExpressionBuilder, } from '../expression/expression-builder.js';\nimport { SetOperationNode, } from '../operation-node/set-operation-node.js';\nimport { isFunction, isReadonlyArray } from '../util/object-utils.js';\nimport { parseExpression } from './expression-parser.js';\nexport function parseSetOperations(operator, expression, all) {\n    if (isFunction(expression)) {\n        expression = expression(createExpressionBuilder());\n    }\n    if (!isReadonlyArray(expression)) {\n        expression = [expression];\n    }\n    return expression.map((expr) => SetOperationNode.create(operator, parseExpression(expr), all));\n}\n","/// <reference types=\"./fetch-node.d.ts\" />\nimport { ValueNode } from './value-node.js';\n/**\n * @internal\n */\nexport const FetchNode = {\n    is(node) {\n        return node.kind === 'FetchNode';\n    },\n    create(rowCount, modifier) {\n        return {\n            kind: 'FetchNode',\n            rowCount: ValueNode.create(rowCount),\n            modifier,\n        };\n    },\n};\n","/// <reference types=\"./fetch-parser.d.ts\" />\nimport { FetchNode } from '../operation-node/fetch-node.js';\nimport { isBigInt, isNumber } from '../util/object-utils.js';\nexport function parseFetch(rowCount, modifier) {\n    if (!isNumber(rowCount) && !isBigInt(rowCount)) {\n        throw new Error(`Invalid fetch row count: ${rowCount}`);\n    }\n    if (!isFetchModifier(modifier)) {\n        throw new Error(`Invalid fetch modifier: ${modifier}`);\n    }\n    return FetchNode.create(rowCount, modifier);\n}\nfunction isFetchModifier(value) {\n    return value === 'only' || value === 'with ties';\n}\n","/// <reference types=\"./select-query-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { SelectModifierNode } from '../operation-node/select-modifier-node.js';\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { parseReferenceExpressionOrList, } from '../parser/reference-parser.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { OffsetNode } from '../operation-node/offset-node.js';\nimport { asArray, freeze } from '../util/object-utils.js';\nimport { parseGroupBy } from '../parser/group-by-parser.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { parseSetOperations, } from '../parser/set-operation-parser.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nimport { parseValueExpression, } from '../parser/value-parser.js';\nimport { parseFetch } from '../parser/fetch-parser.js';\nimport { parseTop } from '../parser/top-parser.js';\nclass SelectQueryBuilderImpl {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    get expressionType() {\n        return undefined;\n    }\n    get isSelectQueryBuilder() {\n        return true;\n    }\n    where(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    having(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    havingRef(lhs, op, rhs) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    select(selection) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    distinctOn(selection) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithDistinctOn(this.#props.queryNode, parseReferenceExpressionOrList(selection)),\n        });\n    }\n    modifyFront(modifier) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, SelectModifierNode.createWithExpression(modifier.toOperationNode())),\n        });\n    }\n    modifyEnd(modifier) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.createWithExpression(modifier.toOperationNode())),\n        });\n    }\n    distinct() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, SelectModifierNode.create('Distinct')),\n        });\n    }\n    forUpdate(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForUpdate', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    forShare(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForShare', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    forKeyShare(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForKeyShare', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    forNoKeyUpdate(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForNoKeyUpdate', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    skipLocked() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('SkipLocked')),\n        });\n    }\n    noWait() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('NoWait')),\n        });\n    }\n    selectAll(table) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    innerJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('FullJoin', args)),\n        });\n    }\n    innerJoinLateral(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LateralInnerJoin', args)),\n        });\n    }\n    leftJoinLateral(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LateralLeftJoin', args)),\n        });\n    }\n    orderBy(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy(args)),\n        });\n    }\n    groupBy(groupBy) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithGroupByItems(this.#props.queryNode, parseGroupBy(groupBy)),\n        });\n    }\n    limit(limit) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit))),\n        });\n    }\n    offset(offset) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithOffset(this.#props.queryNode, OffsetNode.create(parseValueExpression(offset))),\n        });\n    }\n    fetch(rowCount, modifier = 'only') {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithFetch(this.#props.queryNode, parseFetch(rowCount, modifier)),\n        });\n    }\n    top(expression, modifiers) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    union(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('union', expression, false)),\n        });\n    }\n    unionAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('union', expression, true)),\n        });\n    }\n    intersect(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('intersect', expression, false)),\n        });\n    }\n    intersectAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('intersect', expression, true)),\n        });\n    }\n    except(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('except', expression, false)),\n        });\n    }\n    exceptAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('except', expression, true)),\n        });\n    }\n    as(alias) {\n        return new AliasedSelectQueryBuilderImpl(this, alias);\n    }\n    clearSelect() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutSelections(this.#props.queryNode),\n        });\n    }\n    clearWhere() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    clearLimit() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutLimit(this.#props.queryNode),\n        });\n    }\n    clearOffset() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutOffset(this.#props.queryNode),\n        });\n    }\n    clearOrderBy() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutOrderBy(this.#props.queryNode),\n        });\n    }\n    $call(func) {\n        return func(this);\n    }\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n        });\n    }\n    $castTo() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $narrowType() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $assertType() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $asTuple() {\n        return new ExpressionWrapper(this.toOperationNode());\n    }\n    withPlugin(plugin) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        return result.rows;\n    }\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\npreventAwait(SelectQueryBuilderImpl, \"don't await SelectQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\nexport function createSelectQueryBuilder(props) {\n    return new SelectQueryBuilderImpl(props);\n}\n/**\n * {@link SelectQueryBuilder} with an alias. The result of calling {@link SelectQueryBuilder.as}.\n */\nclass AliasedSelectQueryBuilderImpl {\n    #queryBuilder;\n    #alias;\n    constructor(queryBuilder, alias) {\n        this.#queryBuilder = queryBuilder;\n        this.#alias = alias;\n    }\n    get expression() {\n        return this.#queryBuilder;\n    }\n    get alias() {\n        return this.#alias;\n    }\n    get isAliasedSelectQueryBuilder() {\n        return true;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#queryBuilder.toOperationNode(), IdentifierNode.create(this.#alias));\n    }\n}\npreventAwait(AliasedSelectQueryBuilderImpl, \"don't await AliasedSelectQueryBuilder instances directly. AliasedSelectQueryBuilder should never be executed directly since it's always a part of another query.\");\n","/// <reference types=\"./values-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValuesNode = freeze({\n    is(node) {\n        return node.kind === 'ValuesNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'ValuesNode',\n            values: freeze(values),\n        });\n    },\n});\n","/// <reference types=\"./default-insert-value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DefaultInsertValueNode = freeze({\n    is(node) {\n        return node.kind === 'DefaultInsertValueNode';\n    },\n    create() {\n        return freeze({\n            kind: 'DefaultInsertValueNode',\n        });\n    },\n});\n","/// <reference types=\"./insert-values-parser.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { PrimitiveValueListNode } from '../operation-node/primitive-value-list-node.js';\nimport { ValueListNode } from '../operation-node/value-list-node.js';\nimport { freeze, isFunction, isReadonlyArray, isUndefined, } from '../util/object-utils.js';\nimport { parseValueExpression } from './value-parser.js';\nimport { ValuesNode } from '../operation-node/values-node.js';\nimport { isExpressionOrFactory } from './expression-parser.js';\nimport { DefaultInsertValueNode } from '../operation-node/default-insert-value-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nexport function parseInsertExpression(arg) {\n    const objectOrList = isFunction(arg) ? arg(expressionBuilder()) : arg;\n    const list = isReadonlyArray(objectOrList)\n        ? objectOrList\n        : freeze([objectOrList]);\n    return parseInsertColumnsAndValues(list);\n}\nfunction parseInsertColumnsAndValues(rows) {\n    const columns = parseColumnNamesAndIndexes(rows);\n    return [\n        freeze([...columns.keys()].map(ColumnNode.create)),\n        ValuesNode.create(rows.map((row) => parseRowValues(row, columns))),\n    ];\n}\nfunction parseColumnNamesAndIndexes(rows) {\n    const columns = new Map();\n    for (const row of rows) {\n        const cols = Object.keys(row);\n        for (const col of cols) {\n            if (!columns.has(col) && row[col] !== undefined) {\n                columns.set(col, columns.size);\n            }\n        }\n    }\n    return columns;\n}\nfunction parseRowValues(row, columns) {\n    const rowColumns = Object.keys(row);\n    const rowValues = Array.from({\n        length: columns.size,\n    });\n    let hasUndefinedOrComplexColumns = false;\n    for (const col of rowColumns) {\n        const columnIdx = columns.get(col);\n        if (isUndefined(columnIdx)) {\n            continue;\n        }\n        const value = row[col];\n        if (isUndefined(value) || isExpressionOrFactory(value)) {\n            hasUndefinedOrComplexColumns = true;\n        }\n        rowValues[columnIdx] = value;\n    }\n    const hasMissingColumns = rowColumns.length < columns.size;\n    if (hasMissingColumns || hasUndefinedOrComplexColumns) {\n        const defaultValue = DefaultInsertValueNode.create();\n        return ValueListNode.create(rowValues.map((it) => isUndefined(it) ? defaultValue : parseValueExpression(it)));\n    }\n    return PrimitiveValueListNode.create(rowValues);\n}\n","/// <reference types=\"./column-update-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ColumnUpdateNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnUpdateNode';\n    },\n    create(column, value) {\n        return freeze({\n            kind: 'ColumnUpdateNode',\n            column,\n            value,\n        });\n    },\n});\n","/// <reference types=\"./update-set-parser.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ColumnUpdateNode } from '../operation-node/column-update-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { parseValueExpression } from './value-parser.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nexport function parseUpdate(...args) {\n    if (args.length === 2) {\n        return [\n            ColumnUpdateNode.create(parseReferenceExpression(args[0]), parseValueExpression(args[1])),\n        ];\n    }\n    return parseUpdateObjectExpression(args[0]);\n}\nexport function parseUpdateObjectExpression(update) {\n    const updateObj = isFunction(update) ? update(expressionBuilder()) : update;\n    return Object.entries(updateObj)\n        .filter(([_, value]) => value !== undefined)\n        .map(([key, value]) => {\n        return ColumnUpdateNode.create(ColumnNode.create(key), parseValueExpression(value));\n    });\n}\n","/// <reference types=\"./on-duplicate-key-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OnDuplicateKeyNode = freeze({\n    is(node) {\n        return node.kind === 'OnDuplicateKeyNode';\n    },\n    create(updates) {\n        return freeze({\n            kind: 'OnDuplicateKeyNode',\n            updates,\n        });\n    },\n});\n","/// <reference types=\"./insert-result.d.ts\" />\n/**\n * The result of an insert query.\n *\n * If the table has an auto incrementing primary key {@link insertId} will hold\n * the generated id on dialects that support it. For example PostgreSQL doesn't\n * return the id by default and {@link insertId} is undefined. On PostgreSQL you\n * need to use {@link ReturningInterface.returning} or {@link ReturningInterface.returningAll}\n * to get out the inserted id.\n *\n * {@link numInsertedOrUpdatedRows} holds the number of (actually) inserted rows.\n * On MySQL, updated rows are counted twice when using `on duplicate key update`.\n *\n * ### Examples\n *\n * ```ts\n * const result = await db\n *   .insertInto('person')\n *   .values(person)\n *   .executeTakeFirst()\n *\n * console.log(result.insertId)\n * ```\n */\nexport class InsertResult {\n    /**\n     * The auto incrementing primary key of the inserted row.\n     *\n     * This property can be undefined when the query contains an `on conflict`\n     * clause that makes the query succeed even when nothing gets inserted.\n     *\n     * This property is always undefined on dialects like PostgreSQL that\n     * don't return the inserted id by default. On those dialects you need\n     * to use the {@link ReturningInterface.returning | returning} method.\n     */\n    insertId;\n    /**\n     * Affected rows count.\n     */\n    numInsertedOrUpdatedRows;\n    constructor(insertId, numInsertedOrUpdatedRows) {\n        this.insertId = insertId;\n        this.numInsertedOrUpdatedRows = numInsertedOrUpdatedRows;\n    }\n}\n","/// <reference types=\"./on-conflict-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhereNode } from './where-node.js';\n/**\n * @internal\n */\nexport const OnConflictNode = freeze({\n    is(node) {\n        return node.kind === 'OnConflictNode';\n    },\n    create() {\n        return freeze({\n            kind: 'OnConflictNode',\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithIndexWhere(node, operation) {\n        return freeze({\n            ...node,\n            indexWhere: node.indexWhere\n                ? WhereNode.cloneWithOperation(node.indexWhere, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithIndexOrWhere(node, operation) {\n        return freeze({\n            ...node,\n            indexWhere: node.indexWhere\n                ? WhereNode.cloneWithOperation(node.indexWhere, 'Or', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithUpdateWhere(node, operation) {\n        return freeze({\n            ...node,\n            updateWhere: node.updateWhere\n                ? WhereNode.cloneWithOperation(node.updateWhere, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithUpdateOrWhere(node, operation) {\n        return freeze({\n            ...node,\n            updateWhere: node.updateWhere\n                ? WhereNode.cloneWithOperation(node.updateWhere, 'Or', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithoutIndexWhere(node) {\n        return freeze({\n            ...node,\n            indexWhere: undefined,\n        });\n    },\n    cloneWithoutUpdateWhere(node) {\n        return freeze({\n            ...node,\n            updateWhere: undefined,\n        });\n    },\n});\n","/// <reference types=\"./on-conflict-builder.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { OnConflictNode } from '../operation-node/on-conflict-node.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { parseUpdateObjectExpression, } from '../parser/update-set-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nexport class OnConflictBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Specify a single column as the conflict target.\n     *\n     * Also see the {@link columns}, {@link constraint} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    column(column) {\n        const columnNode = ColumnNode.create(column);\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                columns: this.#props.onConflictNode.columns\n                    ? freeze([...this.#props.onConflictNode.columns, columnNode])\n                    : freeze([columnNode]),\n            }),\n        });\n    }\n    /**\n     * Specify a list of columns as the conflict target.\n     *\n     * Also see the {@link column}, {@link constraint} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    columns(columns) {\n        const columnNodes = columns.map(ColumnNode.create);\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                columns: this.#props.onConflictNode.columns\n                    ? freeze([...this.#props.onConflictNode.columns, ...columnNodes])\n                    : freeze(columnNodes),\n            }),\n        });\n    }\n    /**\n     * Specify a specific constraint by name as the conflict target.\n     *\n     * Also see the {@link column}, {@link columns} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    constraint(constraintName) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                constraint: IdentifierNode.create(constraintName),\n            }),\n        });\n    }\n    /**\n     * Specify an expression as the conflict target.\n     *\n     * This can be used if the unique index is an expression index.\n     *\n     * Also see the {@link column}, {@link columns} and {@link constraint}\n     * methods for alternative ways to specify the conflict target.\n     */\n    expression(expression) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                indexExpression: expression.toOperationNode(),\n            }),\n        });\n    }\n    where(...args) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithoutIndexWhere(this.#props.onConflictNode),\n        });\n    }\n    /**\n     * Adds the \"do nothing\" conflict action.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values({ first_name, pic })\n     *   .onConflict((oc) => oc\n     *     .column('pic')\n     *     .doNothing()\n     *   )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"pic\")\n     * values ($1, $2)\n     * on conflict (\"pic\") do nothing\n     * ```\n     */\n    doNothing() {\n        return new OnConflictDoNothingBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                doNothing: true,\n            }),\n        });\n    }\n    /**\n     * Adds the \"do update set\" conflict action.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values({ first_name, pic })\n     *   .onConflict((oc) => oc\n     *     .column('pic')\n     *     .doUpdateSet({ first_name })\n     *   )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"pic\")\n     * values ($1, $2)\n     * on conflict (\"pic\")\n     * do update set \"first_name\" = $3\n     * ```\n     *\n     * In the next example we use the `ref` method to reference\n     * columns of the virtual table `excluded` in a type-safe way\n     * to create an upsert operation:\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .values(person)\n     *   .onConflict((oc) => oc\n     *     .column('id')\n     *     .doUpdateSet((eb) => ({\n     *       first_name: eb.ref('excluded.first_name'),\n     *       last_name: eb.ref('excluded.last_name')\n     *     }))\n     *   )\n     * ```\n     */\n    doUpdateSet(update) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                updates: parseUpdateObjectExpression(update),\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n}\npreventAwait(OnConflictBuilder, \"don't await OnConflictBuilder instances.\");\nexport class OnConflictDoNothingBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.onConflictNode;\n    }\n}\npreventAwait(OnConflictDoNothingBuilder, \"don't await OnConflictDoNothingBuilder instances.\");\nexport class OnConflictUpdateBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Specify a where condition for the update operation.\n     *\n     * See {@link WhereInterface.whereRef} for more info.\n     */\n    whereRef(lhs, op, rhs) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithoutUpdateWhere(this.#props.onConflictNode),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.onConflictNode;\n    }\n}\npreventAwait(OnConflictUpdateBuilder, \"don't await OnConflictUpdateBuilder instances.\");\n","/// <reference types=\"./insert-query-builder.d.ts\" />\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { parseInsertExpression, } from '../parser/insert-values-parser.js';\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { parseUpdateObjectExpression, } from '../parser/update-set-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { OnDuplicateKeyNode } from '../operation-node/on-duplicate-key-node.js';\nimport { InsertResult } from './insert-result.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { parseExpression, } from '../parser/expression-parser.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { OnConflictBuilder, } from './on-conflict-builder.js';\nimport { OnConflictNode } from '../operation-node/on-conflict-node.js';\nimport { parseTop } from '../parser/top-parser.js';\nexport class InsertQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Sets the values to insert for an {@link Kysely.insertInto | insert} query.\n     *\n     * This method takes an object whose keys are column names and values are\n     * values to insert. In addition to the column's type, the values can be\n     * raw {@link sql} snippets or select queries.\n     *\n     * You must provide all fields you haven't explicitly marked as nullable\n     * or optional using {@link Generated} or {@link ColumnType}.\n     *\n     * The return value of an `insert` query is an instance of {@link InsertResult}. The\n     * {@link InsertResult.insertId | insertId} field holds the auto incremented primary\n     * key if the database returned one.\n     *\n     * On PostgreSQL and some other dialects, you need to call `returning` to get\n     * something out of the query.\n     *\n     * Also see the {@link expression} method for inserting the result of a select\n     * query or any other expression.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"insert\", \"Single row\", 10) -->\n     *\n     * Insert a single row:\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston',\n     *     age: 40\n     *   })\n     *   .executeTakeFirst()\n     *\n     * // `insertId` is only available on dialects that\n     * // automatically return the id of the inserted row\n     * // such as MySQL and SQLite. On PostgreSQL, for example,\n     * // you need to add a `returning` clause to the query to\n     * // get anything out. See the \"returning data\" example.\n     * console.log(result.insertId)\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * insert into `person` (`first_name`, `last_name`, `age`) values (?, ?, ?)\n     * ```\n     *\n     * <!-- siteExample(\"insert\", \"Multiple rows\", 20) -->\n     *\n     * On dialects that support it (for example PostgreSQL) you can insert multiple\n     * rows by providing an array. Note that the return value is once again very\n     * dialect-specific. Some databases may only return the id of the *last* inserted\n     * row and some return nothing at all unless you call `returning`.\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values([{\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston',\n     *     age: 40,\n     *   }, {\n     *     first_name: 'Arnold',\n     *     last_name: 'Schwarzenegger',\n     *     age: 70,\n     *   }])\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"age\") values (($1, $2, $3), ($4, $5, $6))\n     * ```\n     *\n     * <!-- siteExample(\"insert\", \"Returning data\", 30) -->\n     *\n     * On supported dialects like PostgreSQL you need to chain `returning` to the query to get\n     * the inserted row's columns (or any other expression) as the return value. `returning`\n     * works just like `select`. Refer to `select` method's examples and documentation for\n     * more info.\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston',\n     *     age: 40,\n     *   })\n     *   .returning(['id', 'first_name as name'])\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"age\") values ($1, $2, $3) returning \"id\", \"first_name\" as \"name\"\n     * ```\n     *\n     * <!-- siteExample(\"insert\", \"Complex values\", 40) -->\n     *\n     * In addition to primitives, the values can also be arbitrary expressions.\n     * You can build the expressions by using a callback and calling the methods\n     * on the expression builder passed to it:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * const ani = \"Ani\"\n     * const ston = \"ston\"\n     *\n     * const result = await db\n     *   .insertInto('person')\n     *   .values(({ ref, selectFrom, fn }) => ({\n     *     first_name: 'Jennifer',\n     *     last_name: sql`concat(${ani}, ${ston})`,\n     *     middle_name: ref('first_name'),\n     *     age: selectFrom('person')\n     *       .select(fn.avg<number>('age')\n     *       .as('avg_age')),\n     *   }))\n     *   .executeTakeFirst()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\n     *   \"first_name\",\n     *   \"last_name\",\n     *   \"middle_name\",\n     *   \"age\"\n     * )\n     * values (\n     *   $1,\n     *   concat($2, $3),\n     *   \"first_name\",\n     *   (select avg(\"age\") as \"avg_age\" from \"person\")\n     * )\n     * ```\n     *\n     * You can also use the callback version of subqueries or raw expressions:\n     *\n     * ```ts\n     * db.with('jennifer', (db) => db\n     *   .selectFrom('person')\n     *   .where('first_name', '=', 'Jennifer')\n     *   .select(['id', 'first_name', 'gender'])\n     *   .limit(1)\n     * ).insertInto('pet').values((eb) => ({\n     *   owner_id: eb.selectFrom('jennifer').select('id'),\n     *   name: eb.selectFrom('jennifer').select('first_name'),\n     *   species: 'cat',\n     * }))\n     * ```\n     */\n    values(insert) {\n        const [columns, values] = parseInsertExpression(insert);\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                columns,\n                values,\n            }),\n        });\n    }\n    /**\n     * Sets the columns to insert.\n     *\n     * The {@link values} method sets both the columns and the values and this method\n     * is not needed. But if you are using the {@link expression} method, you can use\n     * this method to set the columns to insert.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .columns(['first_name'])\n     *   .expression((eb) => eb.selectFrom('pet').select('pet.name'))\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\")\n     * select \"pet\".\"name\" from \"pet\"\n     * ```\n     */\n    columns(columns) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                columns: freeze(columns.map(ColumnNode.create)),\n            }),\n        });\n    }\n    /**\n     * Insert an arbitrary expression. For example the result of a select query.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"insert\", \"Insert subquery\", 50) -->\n     *\n     * You can create an `INSERT INTO SELECT FROM` query using the `expression` method:\n     *\n     * ```ts\n     * const result = await db.insertInto('person')\n     *   .columns(['first_name', 'last_name', 'age'])\n     *   .expression((eb) => eb\n     *     .selectFrom('pet')\n     *     .select((eb) => [\n     *       'pet.name',\n     *       eb.val('Petson').as('last_name'),\n     *       eb.lit(7).as('age'),\n     *     ])\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"age\")\n     * select \"pet\".\"name\", $1 as \"last_name\", 7 as \"age from \"pet\"\n     * ```\n     */\n    expression(expression) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                values: parseExpression(expression),\n            }),\n        });\n    }\n    /**\n     * Creates an `insert into \"person\" default values` query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .defaultValues()\n     *   .execute()\n     * ```\n     */\n    defaultValues() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                defaultValues: true,\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert ignore into` query.\n     *\n     * If you use the ignore modifier, ignorable errors that occur while executing the\n     * insert statement are ignored. For example, without ignore, a row that duplicates\n     * an existing unique index or primary key value in the table causes a duplicate-key\n     * error and the statement is aborted. With ignore, the row is discarded and no error\n     * occurs.\n     *\n     * This is only supported on some dialects like MySQL. On most dialects you should\n     * use the {@link onConflict} method.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .ignore()\n     *   .values(values)\n     *   .execute()\n     * ```\n     */\n    ignore() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                ignore: true,\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert top into` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Insert the first 5 rows:\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .top(5)\n     *   .columns(['first_name', 'gender'])\n     *   .expression(\n     *     (eb) => eb.selectFrom('pet').select(['name', sql.lit('other').as('gender')])\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * insert top(5) into \"person\" (\"first_name\", \"gender\") select \"name\", 'other' as \"gender\" from \"pet\"\n     * ```\n     *\n     * Insert the first 50 percent of rows:\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .top(50, 'percent')\n     *   .columns(['first_name', 'gender'])\n     *   .expression(\n     *     (eb) => eb.selectFrom('pet').select(['name', sql.lit('other').as('gender')])\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * insert top(50) percent into \"person\" (\"first_name\", \"gender\") select \"name\", 'other' as \"gender\" from \"pet\"\n     * ```\n     */\n    top(expression, modifiers) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    /**\n     * Adds an `on conflict` clause to the query.\n     *\n     * `on conflict` is only supported by some dialects like PostgreSQL and SQLite. On MySQL\n     * you can use {@link ignore} and {@link onDuplicateKeyUpdate} to achieve similar results.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\")\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can provide the name of the constraint instead of a column name:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .constraint('pet_name_key')\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict on constraint \"pet_name_key\"\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can also specify an expression as the conflict target in case\n     * the unique index is an expression index:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .expression(sql`lower(name)`)\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (lower(name))\n     * do update set \"species\" = $3\n     * ```\n     *\n     * You can add a filter for the update statement like this:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doUpdateSet({ species: 'hamster' })\n     *     .where('excluded.name', '!=', 'Catto'')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\")\n     * do update set \"species\" = $3\n     * where \"excluded\".\"name\" != $4\n     * ```\n     *\n     * You can create an `on conflict do nothing` clauses like this:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doNothing()\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\")\n     * values ($1, $2)\n     * on conflict (\"name\") do nothing\n     * ```\n     *\n     * You can refer to the columns of the virtual `excluded` table\n     * in a type-safe way using a callback and the `ref` method of\n     * `ExpressionBuilder`:\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .values(person)\n     *   .onConflict(oc => oc\n     *     .column('id')\n     *     .doUpdateSet({\n     *       first_name: (eb) => eb.ref('excluded.first_name'),\n     *       last_name: (eb) => eb.ref('excluded.last_name')\n     *     })\n     *   )\n     * ```\n     */\n    onConflict(callback) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                onConflict: callback(new OnConflictBuilder({\n                    onConflictNode: OnConflictNode.create(),\n                })).toOperationNode(),\n            }),\n        });\n    }\n    /**\n     * Adds `on duplicate key update` to the query.\n     *\n     * If you specify `on duplicate key update`, and a row is inserted that would cause\n     * a duplicate value in a unique index or primary key, an update of the old row occurs.\n     *\n     * This is only implemented by some dialects like MySQL. On most dialects you should\n     * use {@link onConflict} instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values(values)\n     *   .onDuplicateKeyUpdate({ species: 'hamster' })\n     * ```\n     */\n    onDuplicateKeyUpdate(update) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                onDuplicateKey: OnDuplicateKeyNode.create(parseUpdateObjectExpression(update)),\n            }),\n        });\n    }\n    returning(selection) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll()),\n        });\n    }\n    /**\n     * Clears all `returning` clauses from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.insertInto('person')\n     *   .values({ first_name: 'James', last_name: 'Smith', age: 42 })\n     *   .returning(['first_name'])\n     *   .clearReturning()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"James\", \"Smith\", 42)\n     * ```\n     */\n    clearReturning() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.updateTable('person')\n     *   .set(values)\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function insertPerson(values: InsertablePerson, returnLastName: boolean) {\n     *   return await db\n     *     .insertInto('person')\n     *     .values(values)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `insertPerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new InsertQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `InsertQueryBuilder` with a new output type.\n     */\n    $castTo() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query based on {@link values} input\n     * when using {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * const person = await db.insertInto('person')\n     *   .values({ ...inputPerson, nullable_column: 'hell yeah!' })\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (nullable_column) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * const person = await db.insertInto('person')\n     *   .values({ ...inputPerson, nullable_column: 'hell yeah!' })\n     *   .returningAll()\n     *   .$narrowType<{ nullable_column: string }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make typescript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for typescript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help typescript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .with('new_person', (qb) => qb\n     *     .insertInto('person')\n     *     .values(person)\n     *     .returning('id')\n     *     .$assertType<{ id: string }>()\n     *   )\n     *   .with('new_pet', (qb) => qb\n     *     .insertInto('pet')\n     *     .values((eb) => ({ owner_id: eb.selectFrom('new_person').select('id'), ...pet }))\n     *     .returning(['name as pet_name', 'species'])\n     *     .$assertType<{ pet_name: string, species: Species }>()\n     *   )\n     *   .selectFrom(['new_person', 'new_pet'])\n     *   .selectAll()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    $assertType() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this InsertQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const query = compiledQuery.query;\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        if (this.#props.executor.adapter.supportsReturning && query.returning) {\n            return result.rows;\n        }\n        return [\n            new InsertResult(result.insertId, \n            // TODO: remove numUpdatedOrDeletedRows.\n            result.numAffectedRows ?? result.numUpdatedOrDeletedRows),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\npreventAwait(InsertQueryBuilder, \"don't await InsertQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n","/// <reference types=\"./delete-result.d.ts\" />\nexport class DeleteResult {\n    numDeletedRows;\n    constructor(numDeletedRows) {\n        this.numDeletedRows = numDeletedRows;\n    }\n}\n","/// <reference types=\"./delete-query-builder.d.ts\" />\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseTableExpressionOrList, } from '../parser/table-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { DeleteResult } from './delete-result.js';\nimport { DeleteQueryNode } from '../operation-node/delete-query-node.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { parseValueExpression, } from '../parser/value-parser.js';\nimport { parseTop } from '../parser/top-parser.js';\nexport class DeleteQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    /**\n     * Changes a `delete from` query into a `delete top from` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Delete the first 5 rows:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('person')\n     *   .top(5)\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * delete top(5) from \"person\" where \"age\" > @1\n     * ```\n     *\n     * Delete the first 50% of rows:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('person')\n     *   .top(50, 'percent')\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * delete top(50) percent from \"person\" where \"age\" > @1\n     * ```\n     */\n    top(expression, modifiers) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    using(tables) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithUsing(this.#props.queryNode, parseTableExpressionOrList(tables)),\n        });\n    }\n    innerJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('FullJoin', args)),\n        });\n    }\n    returning(selection) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll(table) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    /**\n     * Clears all `returning` clauses from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.deleteFrom('pet')\n     *   .returningAll()\n     *   .where('name', '=', 'Max')\n     *   .clearReturning()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * delete from \"pet\" where \"name\" = \"Max\"\n     * ```\n     */\n    clearReturning() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode),\n        });\n    }\n    /**\n     * Clears the `limit` clause from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.deleteFrom('pet')\n     *   .returningAll()\n     *   .where('name', '=', 'Max')\n     *   .limit(5)\n     *   .clearLimit()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * delete from \"pet\" where \"name\" = \"Max\" returning *\n     * ```\n     */\n    clearLimit() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithoutLimit(this.#props.queryNode),\n        });\n    }\n    /**\n     * Clears the `order by` clause from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.deleteFrom('pet')\n     *   .returningAll()\n     *   .where('name', '=', 'Max')\n     *   .orderBy('id')\n     *   .clearOrderBy()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * delete from \"pet\" where \"name\" = \"Max\" returning *\n     * ```\n     */\n    clearOrderBy() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithoutOrderBy(this.#props.queryNode),\n        });\n    }\n    /**\n     * Adds an `order by` clause to the query.\n     *\n     * `orderBy` calls are additive. To order by multiple columns, call `orderBy`\n     * multiple times.\n     *\n     * The first argument is the expression to order by and the second is the\n     * order (`asc` or `desc`).\n     *\n     * An `order by` clause in a delete query is only supported by some dialects\n     * like MySQL.\n     *\n     * See {@link SelectQueryBuilder.orderBy} for more examples.\n     *\n     * ### Examples\n     *\n     * Delete 5 oldest items in a table:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('pet')\n     *   .orderBy('created_at')\n     *   .limit(5)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * delete from `pet`\n     * order by `created_at`\n     * limit ?\n     * ```\n     */\n    orderBy(orderBy, direction) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy([orderBy, direction])),\n        });\n    }\n    /**\n     * Adds a limit clause to the query.\n     *\n     * A limit clause in a delete query is only supported by some dialects\n     * like MySQL.\n     *\n     * ### Examples\n     *\n     * Delete 5 oldest items in a table:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('pet')\n     *   .orderBy('created_at')\n     *   .limit(5)\n     *   .execute()\n     * ```\n     */\n    limit(limit) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit))),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.deleteFrom('person')\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function deletePerson(id: number, returnLastName: boolean) {\n     *   return await db\n     *     .deleteFrom('person')\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `deletePerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new DeleteQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `DeleteQueryBuilder` with a new output type.\n     */\n    $castTo() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query when using {@link where} and {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * const person = await db.deleteFrom('person')\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (person.nullable_column) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * const person = await db.deleteFrom('person')\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .$narrowType<{ nullable_column: string }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make typescript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for typescript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help typescript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .with('deleted_person', (qb) => qb\n     *     .deleteFrom('person')\n     *     .where('id', '=', person.id)\n     *     .returning('first_name')\n     *     .$assertType<{ first_name: string }>()\n     *   )\n     *   .with('deleted_pet', (qb) => qb\n     *     .deleteFrom('pet')\n     *     .where('owner_id', '=', person.id)\n     *     .returning(['name as pet_name', 'species'])\n     *     .$assertType<{ pet_name: string, species: Species }>()\n     *   )\n     *   .selectFrom(['deleted_person', 'deleted_pet'])\n     *   .selectAll()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    $assertType() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this DeleteQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const query = compiledQuery.query;\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        if (this.#props.executor.adapter.supportsReturning && query.returning) {\n            return result.rows;\n        }\n        return [\n            new DeleteResult(\n            // TODO: remove numUpdatedOrDeletedRows.\n            result.numAffectedRows ?? result.numUpdatedOrDeletedRows ?? BigInt(0)),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\npreventAwait(DeleteQueryBuilder, \"don't await DeleteQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n","/// <reference types=\"./update-result.d.ts\" />\nexport class UpdateResult {\n    numUpdatedRows;\n    numChangedRows;\n    constructor(numUpdatedRows, numChangedRows) {\n        this.numUpdatedRows = numUpdatedRows;\n        this.numChangedRows = numChangedRows;\n    }\n}\n","/// <reference types=\"./update-query-builder.d.ts\" />\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseTableExpressionOrList, } from '../parser/table-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { UpdateQueryNode } from '../operation-node/update-query-node.js';\nimport { parseUpdate, } from '../parser/update-set-parser.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nimport { UpdateResult } from './update-result.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { parseValueExpression, } from '../parser/value-parser.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { parseTop } from '../parser/top-parser.js';\nexport class UpdateQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    /**\n     * Changes an `update` query into a `update top` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Update the first row:\n     *\n     * ```ts\n     * await db.updateTable('person')\n     *   .top(1)\n     *   .set({ first_name: 'Foo' })\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * update top(1) \"person\" set \"first_name\" = @1 where \"age\" > @2\n     * ```\n     *\n     * Update the 50% first rows:\n     *\n     * ```ts\n     * await db.updateTable('person')\n     *   .top(50, 'percent')\n     *   .set({ first_name: 'Foo' })\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * update top(50) percent \"person\" set \"first_name\" = @1 where \"age\" > @2\n     * ```\n     */\n    top(expression, modifiers) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    from(from) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithFromItems(this.#props.queryNode, parseTableExpressionOrList(from)),\n        });\n    }\n    innerJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('InnerJoin', args)),\n        });\n    }\n    leftJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('LeftJoin', args)),\n        });\n    }\n    rightJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('RightJoin', args)),\n        });\n    }\n    fullJoin(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin('FullJoin', args)),\n        });\n    }\n    /**\n     * Adds a limit clause to the update query for supported databases, such as MySQL.\n     *\n     * ### Examples\n     *\n     * Update the first 2 rows in the 'person' table:\n     *\n     * ```ts\n     * return await db\n     *   .updateTable('person')\n     *   .set({ first_name: 'Foo' })\n     *   .limit(2);\n     * ```\n     *\n     * The generated SQL (MySQL):\n     * ```sql\n     * update `person` set `first_name` = 'Foo' limit 2\n     * ```\n     */\n    limit(limit) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit))),\n        });\n    }\n    set(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithUpdates(this.#props.queryNode, parseUpdate(...args)),\n        });\n    }\n    returning(selection) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll()),\n        });\n    }\n    /**\n     * Clears all `returning` clauses from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.updateTable('person')\n     *   .returningAll()\n     *   .set({ age: 39 })\n     *   .where('first_name', '=', 'John')\n     *   .clearReturning()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * update \"person\" set \"age\" = 39 where \"first_name\" = \"John\"\n     * ```\n     */\n    clearReturning() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.updateTable('person')\n     *   .set(values)\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function updatePerson(id: number, updates: UpdateablePerson, returnLastName: boolean) {\n     *   return await db\n     *     .updateTable('person')\n     *     .set(updates)\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `updatePerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new UpdateQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `UpdateQueryBuilder` with a new output type.\n     */\n    $castTo() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query based on {@link set} input\n     * when using {@link where} and/or {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * const person = await db.updateTable('person')\n     *   .set({ deletedAt: now })\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (person.nullable_column) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * const person = await db.updateTable('person')\n     *   .set({ deletedAt: now })\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .$narrowType<{ deletedAt: Date; nullable_column: string }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make typescript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for typescript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help typescript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .with('updated_person', (qb) => qb\n     *     .updateTable('person')\n     *     .set(person)\n     *     .where('id', '=', person.id)\n     *     .returning('first_name')\n     *     .$assertType<{ first_name: string }>()\n     *   )\n     *   .with('updated_pet', (qb) => qb\n     *     .updateTable('pet')\n     *     .set(pet)\n     *     .where('owner_id', '=', person.id)\n     *     .returning(['name as pet_name', 'species'])\n     *     .$assertType<{ pet_name: string, species: Species }>()\n     *   )\n     *   .selectFrom(['updated_person', 'updated_pet'])\n     *   .selectAll()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    $assertType() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this UpdateQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const query = compiledQuery.query;\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        if (this.#props.executor.adapter.supportsReturning && query.returning) {\n            return result.rows;\n        }\n        return [\n            new UpdateResult(\n            // TODO: remove numUpdatedOrDeletedRows.\n            // TODO: https://github.com/kysely-org/kysely/pull/431#discussion_r1172330899\n            result.numAffectedRows ?? result.numUpdatedOrDeletedRows ?? BigInt(0), result.numChangedRows),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\npreventAwait(UpdateQueryBuilder, \"don't await UpdateQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.\");\n","/// <reference types=\"./common-table-expression-name-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { TableNode } from './table-node.js';\n/**\n * @internal\n */\nexport const CommonTableExpressionNameNode = freeze({\n    is(node) {\n        return node.kind === 'CommonTableExpressionNameNode';\n    },\n    create(tableName, columnNames) {\n        return freeze({\n            kind: 'CommonTableExpressionNameNode',\n            table: TableNode.create(tableName),\n            columns: columnNames\n                ? freeze(columnNames.map(ColumnNode.create))\n                : undefined,\n        });\n    },\n});\n","/// <reference types=\"./common-table-expression-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const CommonTableExpressionNode = freeze({\n    is(node) {\n        return node.kind === 'CommonTableExpressionNode';\n    },\n    create(name, expression) {\n        return freeze({\n            kind: 'CommonTableExpressionNode',\n            name,\n            expression,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./cte-builder.d.ts\" />\nimport { CommonTableExpressionNode } from '../operation-node/common-table-expression-node.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { freeze } from '../util/object-utils.js';\nexport class CTEBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Makes the common table expression materialized.\n     */\n    materialized() {\n        return new CTEBuilder({\n            ...this.#props,\n            node: CommonTableExpressionNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    /**\n     * Makes the common table expression not materialized.\n     */\n    notMaterialized() {\n        return new CTEBuilder({\n            ...this.#props,\n            node: CommonTableExpressionNode.cloneWith(this.#props.node, {\n                materialized: false,\n            }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.node;\n    }\n}\npreventAwait(CTEBuilder, \"don't await CTEBuilder instances. They are never executed directly and are always just a part of a query.\");\n","/// <reference types=\"./with-parser.d.ts\" />\nimport { CommonTableExpressionNameNode } from '../operation-node/common-table-expression-name-node.js';\nimport { createQueryCreator } from './parse-utils.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { CTEBuilder } from '../query-builder/cte-builder.js';\nimport { CommonTableExpressionNode } from '../operation-node/common-table-expression-node.js';\nexport function parseCommonTableExpression(nameOrBuilderCallback, expression) {\n    const expressionNode = expression(createQueryCreator()).toOperationNode();\n    if (isFunction(nameOrBuilderCallback)) {\n        return nameOrBuilderCallback(cteBuilderFactory(expressionNode)).toOperationNode();\n    }\n    return CommonTableExpressionNode.create(parseCommonTableExpressionName(nameOrBuilderCallback), expressionNode);\n}\nfunction cteBuilderFactory(expressionNode) {\n    return (name) => {\n        return new CTEBuilder({\n            node: CommonTableExpressionNode.create(parseCommonTableExpressionName(name), expressionNode),\n        });\n    };\n}\nfunction parseCommonTableExpressionName(name) {\n    if (name.includes('(')) {\n        const parts = name.split(/[\\(\\)]/);\n        const table = parts[0];\n        const columns = parts[1].split(',').map((it) => it.trim());\n        return CommonTableExpressionNameNode.create(table, columns);\n    }\n    else {\n        return CommonTableExpressionNameNode.create(name);\n    }\n}\n","/// <reference types=\"./with-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const WithNode = freeze({\n    is(node) {\n        return node.kind === 'WithNode';\n    },\n    create(expression, params) {\n        return freeze({\n            kind: 'WithNode',\n            expressions: freeze([expression]),\n            ...params,\n        });\n    },\n    cloneWithExpression(withNode, expression) {\n        return freeze({\n            ...withNode,\n            expressions: freeze([...withNode.expressions, expression]),\n        });\n    },\n});\n","/// <reference types=\"./matched-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const MatchedNode = freeze({\n    is(node) {\n        return node.kind === 'MatchedNode';\n    },\n    create(not, bySource = false) {\n        return freeze({\n            kind: 'MatchedNode',\n            not,\n            bySource,\n        });\n    },\n});\n","/// <reference types=\"./merge-parser.d.ts\" />\nimport { MatchedNode } from '../operation-node/matched-node.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { WhenNode } from '../operation-node/when-node.js';\nimport { isString } from '../util/object-utils.js';\nimport { parseFilterList, parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from './binary-operation-parser.js';\nexport function parseMergeWhen(type, args, refRight) {\n    return WhenNode.create(parseFilterList([\n        MatchedNode.create(!type.isMatched, type.bySource),\n        ...(args && args.length > 0\n            ? [\n                args.length === 3 && refRight\n                    ? parseReferentialBinaryOperation(args[0], args[1], args[2])\n                    : parseValueBinaryOperationOrExpression(args),\n            ]\n            : []),\n    ], 'and', false));\n}\nexport function parseMergeThen(result) {\n    if (isString(result)) {\n        return RawNode.create([result], []);\n    }\n    if (isOperationNodeSource(result)) {\n        return result.toOperationNode();\n    }\n    return result;\n}\n","/// <reference types=\"./merge-result.d.ts\" />\nexport class MergeResult {\n    numChangedRows;\n    constructor(numChangedRows) {\n        this.numChangedRows = numChangedRows;\n    }\n}\n","/// <reference types=\"./merge-query-builder.d.ts\" />\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { MergeQueryNode } from '../operation-node/merge-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { UpdateQueryNode } from '../operation-node/update-query-node.js';\nimport { parseInsertExpression, } from '../parser/insert-values-parser.js';\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseMergeThen, parseMergeWhen } from '../parser/merge-parser.js';\nimport { parseTop } from '../parser/top-parser.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { freeze } from '../util/object-utils.js';\nimport { preventAwait } from '../util/prevent-await.js';\nimport { MergeResult } from './merge-result.js';\nimport { NoResultError, isNoResultErrorConstructor, } from './no-result-error.js';\nimport { UpdateQueryBuilder } from './update-query-builder.js';\nexport class MergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Changes a `merge into` query to an `merge top into` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Affect 5 matched rows at most:\n     *\n     * ```ts\n     * await db.mergeInto('person')\n     *   .top(5)\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * merge top(5) into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     *\n     * Affect 50% of matched rows:\n     *\n     * ```ts\n     * await db.mergeInto('person')\n     *   .top(50, 'percent')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * merge top(50) percent into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     */\n    top(expression, modifiers) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    using(...args) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithUsing(this.#props.queryNode, parseJoin('Using', args)),\n        });\n    }\n}\npreventAwait(MergeQueryBuilder, \"don't await MergeQueryBuilder instances directly. To execute the query you need to call `execute` when available.\");\nexport class WheneableMergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * See {@link MergeQueryBuilder.top}.\n     */\n    top(expression, modifiers) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    /**\n     * Adds a simple `when matched` clause to the query.\n     *\n     * For a `when matched` clause with an `and` condition, see {@link whenMatchedAnd}.\n     *\n     * For a simple `when not matched` clause, see {@link whenNotMatched}.\n     *\n     * For a `when not matched` clause with an `and` condition, see {@link whenNotMatchedAnd}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     */\n    whenMatched() {\n        return this.#whenMatched([]);\n    }\n    whenMatchedAnd(...args) {\n        return this.#whenMatched(args);\n    }\n    /**\n     * Adds the `when matched` clause to the query with an `and` condition. But unlike\n     * {@link whenMatchedAnd}, this method accepts a column reference as the 3rd argument.\n     *\n     * This method is similar to {@link SelectQueryBuilder.whereRef}, so see the documentation\n     * for that method for more examples.\n     */\n    whenMatchedAndRef(lhs, op, rhs) {\n        return this.#whenMatched([lhs, op, rhs], true);\n    }\n    #whenMatched(args, refRight) {\n        return new MatchedThenableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithWhen(this.#props.queryNode, parseMergeWhen({ isMatched: true }, args, refRight)),\n        });\n    }\n    /**\n     * Adds a simple `when not matched` clause to the query.\n     *\n     * For a `when not matched` clause with an `and` condition, see {@link whenNotMatchedAnd}.\n     *\n     * For a simple `when matched` clause, see {@link whenMatched}.\n     *\n     * For a `when matched` clause with an `and` condition, see {@link whenMatchedAnd}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenNotMatched()\n     *   .thenInsertValues({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when not matched then\n     *   insert (\"first_name\", \"last_name\") values ($1, $2)\n     * ```\n     */\n    whenNotMatched() {\n        return this.#whenNotMatched([]);\n    }\n    whenNotMatchedAnd(...args) {\n        return this.#whenNotMatched(args);\n    }\n    /**\n     * Adds the `when not matched` clause to the query with an `and` condition. But unlike\n     * {@link whenNotMatchedAnd}, this method accepts a column reference as the 3rd argument.\n     *\n     * Unlike {@link whenMatchedAndRef}, you cannot reference columns from the target table.\n     *\n     * This method is similar to {@link SelectQueryBuilder.whereRef}, so see the documentation\n     * for that method for more examples.\n     */\n    whenNotMatchedAndRef(lhs, op, rhs) {\n        return this.#whenNotMatched([lhs, op, rhs], true);\n    }\n    /**\n     * Adds a simple `when not matched by source` clause to the query.\n     *\n     * Supported in MS SQL Server.\n     *\n     * Similar to {@link whenNotMatched}, but returns a {@link MatchedThenableMergeQueryBuilder}.\n     */\n    whenNotMatchedBySource() {\n        return this.#whenNotMatched([], false, true);\n    }\n    whenNotMatchedBySourceAnd(...args) {\n        return this.#whenNotMatched(args, false, true);\n    }\n    /**\n     * Adds the `when not matched by source` clause to the query with an `and` condition.\n     *\n     * Similar to {@link whenNotMatchedAndRef}, but you can reference columns from\n     * the target table, and not from source table and returns a {@link MatchedThenableMergeQueryBuilder}.\n     */\n    whenNotMatchedBySourceAndRef(lhs, op, rhs) {\n        return this.#whenNotMatched([lhs, op, rhs], true, true);\n    }\n    #whenNotMatched(args, refRight = false, bySource = false) {\n        const props = {\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithWhen(this.#props.queryNode, parseMergeWhen({ isMatched: false, bySource }, args, refRight)),\n        };\n        const Builder = bySource\n            ? MatchedThenableMergeQueryBuilder\n            : NotMatchedThenableMergeQueryBuilder;\n        return new Builder(props);\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * db.updateTable('person')\n     *   .set(values)\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function updatePerson(id: number, updates: UpdateablePerson, returnLastName: boolean) {\n     *   return await db\n     *     .updateTable('person')\n     *     .set(updates)\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `updatePerson` function is:\n     *\n     * ```ts\n     * {\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        return [new MergeResult(result.numAffectedRows)];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n}\npreventAwait(WheneableMergeQueryBuilder, \"don't await WheneableMergeQueryBuilder instances directly. To execute the query you need to call `execute`.\");\nexport class MatchedThenableMergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Performs the `delete` action.\n     *\n     * To perform the `do nothing` action, see {@link thenDoNothing}.\n     *\n     * To perform the `update` action, see {@link thenUpdate} or {@link thenUpdateSet}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     */\n    thenDelete() {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen('delete')),\n        });\n    }\n    /**\n     * Performs the `do nothing` action.\n     *\n     * This is supported in PostgreSQL.\n     *\n     * To perform the `delete` action, see {@link thenDelete}.\n     *\n     * To perform the `update` action, see {@link thenUpdate} or {@link thenUpdateSet}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDoNothing()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   do nothing\n     * ```\n     */\n    thenDoNothing() {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen('do nothing')),\n        });\n    }\n    /**\n     * Perform an `update` operation with a full-fledged {@link UpdateQueryBuilder}.\n     * This is handy when multiple `set` invocations are needed.\n     *\n     * For a shorthand version of this method, see {@link thenUpdateSet}.\n     *\n     * To perform the `delete` action, see {@link thenDelete}.\n     *\n     * To perform the `do nothing` action, see {@link thenDoNothing}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenUpdate((ub) => ub\n     *     .set(sql`metadata['has_pets']`, 'Y')\n     *     .set({\n     *       updated_at: Date.now(),\n     *     })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   update set metadata['has_pets'] = $1, \"updated_at\" = $2\n     * ```\n     */\n    thenUpdate(set) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen(set(new UpdateQueryBuilder({\n                queryId: this.#props.queryId,\n                executor: NOOP_QUERY_EXECUTOR,\n                queryNode: UpdateQueryNode.createWithoutTable(),\n            })))),\n        });\n    }\n    thenUpdateSet(...args) {\n        // @ts-ignore not sure how to type this so it won't complain about set(...args).\n        return this.thenUpdate((ub) => ub.set(...args));\n    }\n}\npreventAwait(MatchedThenableMergeQueryBuilder, \"don't await MatchedThenableMergeQueryBuilder instances directly. To execute the query you need to call `execute` when available.\");\nexport class NotMatchedThenableMergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Performs the `do nothing` action.\n     *\n     * This is supported in PostgreSQL.\n     *\n     * To perform the `insert` action, see {@link thenInsertValues}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenNotMatched()\n     *   .thenDoNothing()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when not matched then\n     *   do nothing\n     * ```\n     */\n    thenDoNothing() {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen('do nothing')),\n        });\n    }\n    thenInsertValues(insert) {\n        const [columns, values] = parseInsertExpression(insert);\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen(InsertQueryNode.cloneWith(InsertQueryNode.createWithoutInto(), {\n                columns,\n                values,\n            }))),\n        });\n    }\n}\npreventAwait(NotMatchedThenableMergeQueryBuilder, \"don't await NotMatchedThenableMergeQueryBuilder instances directly. To execute the query you need to call `execute` when available.\");\n","/// <reference types=\"./query-creator.d.ts\" />\nimport { createSelectQueryBuilder, } from './query-builder/select-query-builder.js';\nimport { InsertQueryBuilder } from './query-builder/insert-query-builder.js';\nimport { DeleteQueryBuilder } from './query-builder/delete-query-builder.js';\nimport { UpdateQueryBuilder } from './query-builder/update-query-builder.js';\nimport { DeleteQueryNode } from './operation-node/delete-query-node.js';\nimport { InsertQueryNode } from './operation-node/insert-query-node.js';\nimport { SelectQueryNode } from './operation-node/select-query-node.js';\nimport { UpdateQueryNode } from './operation-node/update-query-node.js';\nimport { parseTable, parseTableExpression, parseTableExpressionOrList, parseAliasedTable, } from './parser/table-parser.js';\nimport { parseCommonTableExpression, } from './parser/with-parser.js';\nimport { WithNode } from './operation-node/with-node.js';\nimport { createQueryId } from './util/query-id.js';\nimport { WithSchemaPlugin } from './plugin/with-schema/with-schema-plugin.js';\nimport { freeze } from './util/object-utils.js';\nimport { parseSelectArg, } from './parser/select-parser.js';\nimport { MergeQueryBuilder } from './query-builder/merge-query-builder.js';\nimport { MergeQueryNode } from './operation-node/merge-query-node.js';\nexport class QueryCreator {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    selectFrom(from) {\n        return createSelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(from), this.#props.withNode),\n        });\n    }\n    selectNoFrom(selection) {\n        return createSelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: SelectQueryNode.cloneWithSelections(SelectQueryNode.create(this.#props.withNode), parseSelectArg(selection)),\n        });\n    }\n    /**\n     * Creates an insert query.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples. Also see\n     * the {@link ReturningInterface.returning | returning} method for a way to return columns\n     * on supported databases like PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirst()\n     *\n     * console.log(result.insertId)\n     * ```\n     *\n     * Some databases like PostgreSQL support the `returning` method:\n     *\n     * ```ts\n     * const { id } = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .returning('id')\n     *   .executeTakeFirst()\n     * ```\n     */\n    insertInto(table) {\n        return new InsertQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a replace query.\n     *\n     * A MySQL-only statement similar to {@link InsertQueryBuilder.onDuplicateKeyUpdate}\n     * that deletes and inserts values on collision instead of updating existing rows.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .replaceInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirst()\n     *\n     * console.log(result.insertId)\n     * ```\n     */\n    replaceInto(table) {\n        return new InsertQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode, true),\n        });\n    }\n    deleteFrom(tables) {\n        return new DeleteQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: DeleteQueryNode.create(parseTableExpressionOrList(tables), this.#props.withNode),\n        });\n    }\n    updateTable(table) {\n        return new UpdateQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: UpdateQueryNode.create(parseTableExpression(table), this.#props.withNode),\n        });\n    }\n    mergeInto(targetTable) {\n        return new MergeQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: MergeQueryNode.create(parseAliasedTable(targetTable), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a `with` query (Common Table Expression).\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .with('jennifers', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     .select(['id', 'age'])\n     *   )\n     *   .with('adult_jennifers', (db) => db\n     *     .selectFrom('jennifers')\n     *     .where('age', '>', 18)\n     *     .select(['id', 'age'])\n     *   )\n     *   .selectFrom('adult_jennifers')\n     *   .where('age', '<', 60)\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * The CTE name can optionally specify column names in addition to\n     * a name. In that case Kysely requires the expression to retun\n     * rows with the same columns.\n     *\n     * ```ts\n     * await db\n     *   .with('jennifers(id, age)', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     // This is ok since we return columns with the same\n     *     // names as specified by `jennifers(id, age)`.\n     *     .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * The first argument can also be a callback. The callback is passed\n     * a `CTEBuilder` instance that can be used to configure the CTE:\n     *\n     * ```ts\n     * await db\n     *   .with(\n     *     (cte) => cte('jennifers').materialized(),\n     *     (db) => db\n     *       .selectFrom('person')\n     *       .where('first_name', '=', 'Jennifer')\n     *       .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     */\n    with(nameOrBuilder, expression) {\n        const cte = parseCommonTableExpression(nameOrBuilder, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : WithNode.create(cte),\n        });\n    }\n    /**\n     * Creates a recursive `with` query (Common Table Expression).\n     *\n     * Note that recursiveness is a property of the whole `with` statement.\n     * You cannot have recursive and non-recursive CTEs in a same `with` statement.\n     * Therefore the recursiveness is determined by the **first** `with` or\n     * `withRecusive` call you make.\n     *\n     * See the {@link with} method for examples and more documentation.\n     */\n    withRecursive(nameOrBuilder, expression) {\n        const cte = parseCommonTableExpression(nameOrBuilder, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : WithNode.create(cte, { recursive: true }),\n        });\n    }\n    /**\n     * Returns a copy of this query creator instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    /**\n     * Returns a copy of this query creator instance without any plugins.\n     */\n    withoutPlugins() {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * Sets the schema to be used for all table references that don't explicitly\n     * specify a schema.\n     *\n     * This only affects the query created through the builder returned from\n     * this method and doesn't modify the `db` instance.\n     *\n     * See [this recipe](https://github.com/koskimas/kysely/tree/master/site/docs/recipes/schemas.md)\n     * for a more detailed explanation.\n     *\n     * ### Examples\n     *\n     * ```\n     * await db\n     *   .withSchema('mammals')\n     *   .selectFrom('pet')\n     *   .selectAll()\n     *   .innerJoin('public.person', 'public.person.id', 'pet.owner_id')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select * from \"mammals\".\"pet\"\n     * inner join \"public\".\"person\"\n     * on \"public\".\"person\".\"id\" = \"mammals\".\"pet\".\"owner_id\"\n     * ```\n     *\n     * `withSchema` is smart enough to not add schema for aliases,\n     * common table expressions or other places where the schema\n     * doesn't belong to:\n     *\n     * ```\n     * await db\n     *   .withSchema('mammals')\n     *   .selectFrom('pet as p')\n     *   .select('p.name')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".\"name\" from \"mammals\".\"pet\" as \"p\"\n     * ```\n     */\n    withSchema(schema) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n}\n","/// <reference types=\"./noop-query-executor.d.ts\" />\nimport { QueryExecutorBase } from './query-executor-base.js';\n/**\n * A {@link QueryExecutor} subclass that can be used when you don't\n * have a {@link QueryCompiler}, {@link ConnectionProvider} or any\n * other needed things to actually execute queries.\n */\nexport class NoopQueryExecutor extends QueryExecutorBase {\n    get adapter() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    compileQuery() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    provideConnection() {\n        throw new Error('this query cannot be executed');\n    }\n    withConnectionProvider() {\n        throw new Error('this query cannot have a connection provider');\n    }\n    withPlugin(plugin) {\n        return new NoopQueryExecutor([...this.plugins, plugin]);\n    }\n    withPlugins(plugins) {\n        return new NoopQueryExecutor([...this.plugins, ...plugins]);\n    }\n    withPluginAtFront(plugin) {\n        return new NoopQueryExecutor([plugin, ...this.plugins]);\n    }\n    withoutPlugins() {\n        return new NoopQueryExecutor([]);\n    }\n}\nexport const NOOP_QUERY_EXECUTOR = new NoopQueryExecutor();\n","/// <reference types=\"./deferred.d.ts\" />\nexport class Deferred {\n    #promise;\n    #resolve;\n    #reject;\n    constructor() {\n        this.#promise = new Promise((resolve, reject) => {\n            this.#reject = reject;\n            this.#resolve = resolve;\n        });\n    }\n    get promise() {\n        return this.#promise;\n    }\n    resolve = (value) => {\n        if (this.#resolve) {\n            this.#resolve(value);\n        }\n    };\n    reject = (reason) => {\n        if (this.#reject) {\n            this.#reject(reason);\n        }\n    };\n}\n","/// <reference types=\"./log-once.d.ts\" />\nconst LOGGED_MESSAGES = new Set();\n/**\n * Use for system-level logging, such as deprecation messages.\n * Logs a message and ensures it won't be logged again.\n */\nexport function logOnce(message) {\n    if (LOGGED_MESSAGES.has(message)) {\n        return;\n    }\n    LOGGED_MESSAGES.add(message);\n    console.log(message);\n}\n","/// <reference types=\"./query-executor-base.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { Deferred } from '../util/deferred.js';\nimport { logOnce } from '../util/log-once.js';\nconst NO_PLUGINS = freeze([]);\nexport class QueryExecutorBase {\n    #plugins;\n    constructor(plugins = NO_PLUGINS) {\n        this.#plugins = plugins;\n    }\n    get plugins() {\n        return this.#plugins;\n    }\n    transformQuery(node, queryId) {\n        for (const plugin of this.#plugins) {\n            const transformedNode = plugin.transformQuery({ node, queryId });\n            // We need to do a runtime check here. There is no good way\n            // to write types that enforce this constraint.\n            if (transformedNode.kind === node.kind) {\n                node = transformedNode;\n            }\n            else {\n                throw new Error([\n                    `KyselyPlugin.transformQuery must return a node`,\n                    `of the same kind that was given to it.`,\n                    `The plugin was given a ${node.kind}`,\n                    `but it returned a ${transformedNode.kind}`,\n                ].join(' '));\n            }\n        }\n        return node;\n    }\n    async executeQuery(compiledQuery, queryId) {\n        return await this.provideConnection(async (connection) => {\n            const result = await connection.executeQuery(compiledQuery);\n            const transformedResult = await this.#transformResult(result, queryId);\n            // TODO: remove.\n            warnOfOutdatedDriverOrPlugins(result, transformedResult);\n            return transformedResult;\n        });\n    }\n    async *stream(compiledQuery, chunkSize, queryId) {\n        const connectionDefer = new Deferred();\n        const connectionReleaseDefer = new Deferred();\n        this.provideConnection(async (connection) => {\n            connectionDefer.resolve(connection);\n            // Lets wait until we don't need connection before returning here (returning releases connection)\n            return await connectionReleaseDefer.promise;\n        }).catch((ex) => connectionDefer.reject(ex));\n        const connection = await connectionDefer.promise;\n        try {\n            for await (const result of connection.streamQuery(compiledQuery, chunkSize)) {\n                yield await this.#transformResult(result, queryId);\n            }\n        }\n        finally {\n            connectionReleaseDefer.resolve();\n        }\n    }\n    async #transformResult(result, queryId) {\n        for (const plugin of this.#plugins) {\n            result = await plugin.transformResult({ result, queryId });\n        }\n        return result;\n    }\n}\n// TODO: remove.\nfunction warnOfOutdatedDriverOrPlugins(result, transformedResult) {\n    const { numAffectedRows } = result;\n    if ((numAffectedRows === undefined &&\n        result.numUpdatedOrDeletedRows === undefined) ||\n        (numAffectedRows !== undefined &&\n            transformedResult.numAffectedRows !== undefined)) {\n        return;\n    }\n    logOnce('kysely:warning: outdated driver/plugin detected! QueryResult.numUpdatedOrDeletedRows is deprecated and will be removed in a future release.');\n}\n","/// <reference types=\"./object-utils.d.ts\" />\nexport function isEmpty(obj) {\n    if (Array.isArray(obj) || isString(obj) || isBuffer(obj)) {\n        return obj.length === 0;\n    }\n    else if (obj) {\n        return Object.keys(obj).length === 0;\n    }\n    return false;\n}\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined' || obj === undefined;\n}\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\nexport function isNumber(obj) {\n    return typeof obj === 'number';\n}\nexport function isBoolean(obj) {\n    return typeof obj === 'boolean';\n}\nexport function isNull(obj) {\n    return obj === null;\n}\nexport function isDate(obj) {\n    return obj instanceof Date;\n}\nexport function isBigInt(obj) {\n    return typeof obj === 'bigint';\n}\n// Don't change the returnd type to `obj is Buffer` to not create a\n// hard dependency to node.\nexport function isBuffer(obj) {\n    return typeof Buffer !== 'undefined' && Buffer.isBuffer(obj);\n}\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\nexport function isObject(obj) {\n    return typeof obj === 'object' && obj !== null;\n}\nexport function isArrayBufferOrView(obj) {\n    return obj instanceof ArrayBuffer || ArrayBuffer.isView(obj);\n}\nexport function isPlainObject(obj) {\n    return (isObject(obj) &&\n        !Array.isArray(obj) &&\n        !isDate(obj) &&\n        !isBuffer(obj) &&\n        !isArrayBufferOrView(obj));\n}\nexport function getLast(arr) {\n    return arr[arr.length - 1];\n}\nexport function freeze(obj) {\n    return Object.freeze(obj);\n}\nexport function asArray(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg;\n    }\n    else {\n        return [arg];\n    }\n}\nexport function asReadonlyArray(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg;\n    }\n    else {\n        return freeze([arg]);\n    }\n}\nexport function isReadonlyArray(arg) {\n    return Array.isArray(arg);\n}\nexport function noop(obj) {\n    return obj;\n}\nexport function compare(obj1, obj2) {\n    if (isReadonlyArray(obj1) && isReadonlyArray(obj2)) {\n        return compareArrays(obj1, obj2);\n    }\n    else if (isObject(obj1) && isObject(obj2)) {\n        return compareObjects(obj1, obj2);\n    }\n    return obj1 === obj2;\n}\nfunction compareArrays(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; ++i) {\n        if (!compare(arr1[i], arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction compareObjects(obj1, obj2) {\n    if (isBuffer(obj1) && isBuffer(obj2)) {\n        return compareBuffers(obj1, obj2);\n    }\n    else if (isDate(obj1) && isDate(obj2)) {\n        return compareDates(obj1, obj2);\n    }\n    return compareGenericObjects(obj1, obj2);\n}\nfunction compareBuffers(buf1, buf2) {\n    return Buffer.compare(buf1, buf2) === 0;\n}\nfunction compareDates(date1, date2) {\n    return date1.getTime() === date2.getTime();\n}\nfunction compareGenericObjects(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        if (!compare(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n    return true;\n}\n","/// <reference types=\"./prevent-await.d.ts\" />\nexport function preventAwait(clazz, message) {\n    Object.defineProperties(clazz.prototype, {\n        then: {\n            enumerable: false,\n            value: () => {\n                throw new Error(message);\n            },\n        },\n    });\n}\n","/// <reference types=\"./random-string.d.ts\" />\nconst CHARS = [\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n];\nexport function randomString(length) {\n    let chars = '';\n    for (let i = 0; i < length; ++i) {\n        chars += randomChar();\n    }\n    return chars;\n}\nfunction randomChar() {\n    return CHARS[~~(Math.random() * CHARS.length)];\n}\n","/// <reference types=\"./query-id.d.ts\" />\nimport { randomString } from './random-string.js';\nexport function createQueryId() {\n    return new LazyQueryId();\n}\nclass LazyQueryId {\n    #queryId;\n    get queryId() {\n        if (this.#queryId === undefined) {\n            this.#queryId = randomString(8);\n        }\n        return this.#queryId;\n    }\n}\n"],"names":["NanoIdGeneratorLive","createNanoIdGeneratorLive","customAlphabet","nanoid","AppStateLive","AppState","init","reloadUrl","onRequestSync","document","reset","localStorageKey","replaceLocation","location","replace","timer","window","addEventListener","e","key","handleRequestSyncEvents","setTimeout","visibilityState","localStorage","setItem","Date","now","toString","SyncLockLive","SyncLock","tryAcquire","lockName","getLockName","acquire","resume","navigator","locks","request","ifAvailable","lock","Promise","resolve","pipe","release","SyncLockAlreadySyncingError","circular","SynchronizedTypeId","make","makeSynchronized","get","ref","getAndUpdateEffect","getAndSet","getAndUpdate","internal","getAndUpdateSome","modifySome","set","setAndGet","update","updateAndGet","updateSome","updateSomeAndGet","updateSomeAndGetEffectSynchronized","unsafeMakeSynchronized","selectOwner","sql","createMessageTable","createMessageTableIndex","createOwnerTable","insertOwner","selectOwnerTimestampAndMerkleTree","selectLastTimestampForTableRowColumn","insertIntoMessagesIfNew","updateOwnerTimestampAndMerkleTree","selectMessagesToSync","Index","name","DbFactory","Context","Tag","createDb","Effect","gen","createSqlite","Sqlite","SqliteFactory","createSync","Sync","SyncFactory","initContext","empty","add","NanoIdGenerator","Time","afterInitContext","Deferred","afterInit","options","effect","flatMap","context","sqlite","transaction","provide","queryRowsRef","Map","schema","initialData","onError","onSyncStateChange","onReceive","mnemonic","logDebug","contextWithSqlite","owner","getSchema","tap","ensureSchema","currentSchema","tables","map","t","includes","readOwner","createOwner","applyMutations","sync","unsafeDone","succeed","Owner","Callbacks","loadQueries","queries","zipRight","mutate","mutations","queriesToRefresh","time","toSyncMutations","localOnlyMutations","mutation","table","startsWith","mutationToNewMessages","some","column","value","exec","parameters","id","messages","message","upsertValueIntoTableRowColumn","length","forkSync","resetOwner","logTrace","dropAllTables","restoreOwner","exportDatabase","export","GenericTag","previousState","forEach","query","sqliteQuery","deserializeQuery","maybeExplainQueryPlan","rows","queriesRows","currentState","patches","makePatches","logExplainQueryPlan","Console","log","drawSqliteQueryPlan","constVoid","_","trim","row","tableName","columnName","has","push","globalThis","Array","from","columns","indexes","result","newSchema","currentTable","find","newColumn","filter","c","join","indexEquivalence","indexToDrop","newIndex","self","that","encryptionKey","all","makeOwner","makeInitialTimestamp","initialTimestampString","timestampToString","merkleTreeToString","initialMerkleTree","timestamp","merkleTree","readTimestampAndMerkleTree","nextTimestamp","mapAccum","currentTimestamp","newMessage","sendTimestamp","nextMerkleTree","applyMessages","writeTimestampAndMerkleTree","unsafeTimestampFromString","Object","entries","values","undefined","isInsert","Option","none","cast","messageTimestamp","lastTimestamp","millis","changes","insertIntoMerkleTree","insert","catchSomeDefect","error","SqliteNoSuchTableOrColumnError","ensureSchemaByNewMessages","tablesMap","concat","syncLock","matchEffect","onFailure","onSuccess","syncLoop","scoped","forkDaemon","callbacks","syncDataRef","a","Ref","_tag","handleSyncResult","repeat","schedule","Schedule","recurs","until","match","onNone","onSome","syncData","catchAllDefect","fail","makeUnexpectedError","ensureTransferableError","catchTag","state","catchAll","current","reduce","local","receiveTimestamp","remote","diffMerkleTrees","diff","makeSyncTimestamp","option","serializeQuery","p","Predicate","isUint8Array","isJsonObjectOrArray","json","JSON","stringify","serializedSqliteQuery","parse","Uint8Array","_emptyRows","emptyRows","queryResultCache","WeakMap","queryResultFromRows","queryResult","notSupportedPlatformWorker","applyPatches","next","patch","op","index","previousRows","nextRows","replaceAtPatches","i","previousRow","nextRow","areEqual","b","aIsUint8Array","bIsUint8Array","aIsArray","bIsArray","aKeys","keys","bKeys","AlterTableNode","freeze","is","node","kind","create","cloneWithTableProps","props","cloneWithColumnAlteration","columnAlteration","columnAlterations","CreateIndexNode","IdentifierNode","cloneWith","cloneWithColumns","CreateSchemaNode","params","createSchema","ON_COMMIT_ACTIONS","CreateTableNode","cloneWithColumn","createTable","cloneWithConstraint","constraint","constraints","cloneWithFrontModifier","modifier","frontModifiers","cloneWithEndModifier","endModifiers","DropIndexNode","SchemableIdentifierNode","dropIndex","DropSchemaNode","dropSchema","DropTableNode","AddColumnNode","ColumnDefinitionNode","dataType","ColumnNode","DropColumnNode","RenameColumnNode","renameTo","CheckConstraintNode","expression","constraintName","ON_MODIFY_FOREIGN_ACTIONS","ReferencesNode","cloneWithOnDelete","references","onDelete","cloneWithOnUpdate","onUpdate","parseDefaultValueExpression","isOperationNodeSource","toOperationNode","ValueNode","GeneratedNode","createWithExpression","always","DefaultValueNode","defaultValue","parseOnModifyForeignAction","action","Error","ColumnDefinitionBuilder","constructor","this","autoIncrement","identity","primaryKey","parseStringReference","SelectAllNode","unique","notNull","unsigned","defaultTo","check","generatedAlwaysAs","generated","generatedAlwaysAsIdentity","generatedByDefaultAsIdentity","byDefault","stored","modifyFront","nullsNotDistinct","modifyEnd","$call","func","preventAwait","ModifyColumnNode","ForeignKeyConstraintNode","sourceColumns","targetTable","targetColumns","ForeignKeyConstraintBuilder","AddConstraintNode","UniqueConstraintNode","DropConstraintNode","dropConstraint","AlterColumnNode","prop","AlterColumnBuilder","setDataType","AlteredColumnBuilder","parseDataTypeExpression","setDefault","dropDefault","setNotNull","dropNotNull","alterColumnNode","AlterTableExecutor","executor","transformQuery","queryId","compile","compileQuery","execute","executeQuery","AlterTableAddForeignKeyConstraintBuilder","constraintBuilder","addConstraint","AlterTableDropConstraintBuilder","ifExists","cascade","restrict","PrimaryConstraintNode","AddIndexNode","AlterTableAddIndexBuilder","addIndex","parseOrderedColumnName","using","indexType","RawNode","UniqueConstraintNodeBuilder","AlterTableBuilder","newTableName","parseTable","setSchema","alterColumn","alteration","builder","AlterTableColumnAlteringBuilder","dropColumn","renameColumn","addColumn","build","noop","modifyColumn","addUniqueConstraint","uniqueConstraintBuilder","addCheckConstraint","checkExpression","addForeignKeyConstraint","addPrimaryKeyConstraint","indexName","ImmediateValueTransformer","OperationNodeTransformer","transformValue","super","immediate","CreateIndexBuilder","ifNotExists","on","where","args","transformer","QueryNode","transformNode","parseValueBinaryOperationOrExpression","CreateSchemaBuilder","parseOnCommitAction","CreateTableBuilder","temporary","onCommit","columnBuilder","as","selectQuery","parseExpression","DropIndexBuilder","DropSchemaBuilder","DropTableBuilder","CreateViewNode","createView","ImmediateValuePlugin","transformResult","CreateViewBuilder","materialized","orReplace","parseColumnName","queryNode","withPlugin","DropViewNode","dropView","DropViewBuilder","CreateTypeNode","cloneWithEnum","createType","enum","ValueListNode","CreateTypeBuilder","asEnum","DropTypeNode","dropType","DropTypeBuilder","parseSchemableIdentifier","parts","split","str","SchemaModule","createQueryId","dropTable","createIndex","alterTable","viewName","typeName","plugin","withoutPlugins","withSchema","withPluginAtFront","WithSchemaPlugin","DynamicModule","reference","DynamicReferenceBuilder","DefaultConnectionProvider","driver","provideConnection","consumer","connection","acquireConnection","releaseConnection","DefaultQueryExecutor","QueryExecutorBase","compiler","adapter","connectionProvider","plugins","withPlugins","withConnectionProvider","performanceNow","performance","isFunction","RuntimeDriver","WeakSet","then","catch","err","reject","beginTransaction","settings","commitTransaction","rollbackTransaction","destroy","isLevelEnabled","async","compiledQuery","caughtError","startTime","call","level","queryDurationMillis","ignoreError","SingleConnectionProvider","finally","runner","TRANSACTION_ISOLATION_LEVELS","Log","config","defaultLogger","getEvent","event","console","toFixed","stack","Kysely","QueryCreator","superProps","obj","isObject","dialect","createDriver","createQueryCompiler","createAdapter","runtimeDriver","dynamic","introspection","createIntrospector","CaseBuilder","CaseNode","isUndefined","fn","createFunctionModule","TransactionBuilder","ConnectionBuilder","withTables","isTransaction","getExecutor","Transaction","callback","db","setIsolationLevel","isolationLevel","kyselyProps","validateTransactionSettings","DialectAdapterBase","supportsCreateIfNotExists","supportsTransactionalDdl","supportsReturning","SqliteAdapter","acquireMigrationLock","_db","_opt","releaseMigrationLock","DummyDriver","DummyConnection","streamQuery","OperationNodeVisitor","nodeStack","parentNode","AliasNode","visitAlias","bind","visitColumn","visitIdentifier","visitSchemableIdentifier","visitRaw","ReferenceNode","visitReference","SelectQueryNode","visitSelectQuery","SelectionNode","visitSelection","TableNode","visitTable","FromNode","visitFrom","visitSelectAll","AndNode","visitAnd","OrNode","visitOr","visitValue","visitValueList","PrimitiveValueListNode","visitPrimitiveValueList","ParensNode","visitParens","JoinNode","visitJoin","OperatorNode","visitOperator","WhereNode","visitWhere","InsertQueryNode","visitInsertQuery","DeleteQueryNode","visitDeleteQuery","ReturningNode","visitReturning","visitCreateTable","visitAddColumn","visitColumnDefinition","visitDropTable","DataTypeNode","visitDataType","OrderByNode","visitOrderBy","OrderByItemNode","visitOrderByItem","GroupByNode","visitGroupBy","GroupByItemNode","visitGroupByItem","UpdateQueryNode","visitUpdateQuery","ColumnUpdateNode","visitColumnUpdate","LimitNode","visitLimit","OffsetNode","visitOffset","OnConflictNode","visitOnConflict","OnDuplicateKeyNode","visitOnDuplicateKey","visitCreateIndex","visitDropIndex","ListNode","visitList","PrimaryKeyConstraintNode","visitPrimaryKeyConstraint","visitUniqueConstraint","visitReferences","visitCheckConstraint","WithNode","visitWith","CommonTableExpressionNode","visitCommonTableExpression","CommonTableExpressionNameNode","visitCommonTableExpressionName","HavingNode","visitHaving","visitCreateSchema","visitDropSchema","visitAlterTable","visitDropColumn","visitRenameColumn","visitAlterColumn","visitModifyColumn","visitAddConstraint","visitDropConstraint","visitForeignKeyConstraint","visitCreateView","visitDropView","visitGenerated","visitDefaultValue","OnNode","visitOn","ValuesNode","visitValues","SelectModifierNode","visitSelectModifier","visitCreateType","visitDropType","ExplainNode","visitExplain","DefaultInsertValueNode","visitDefaultInsertValue","AggregateFunctionNode","visitAggregateFunction","OverNode","visitOver","PartitionByNode","visitPartitionBy","PartitionByItemNode","visitPartitionByItem","SetOperationNode","visitSetOperation","BinaryOperationNode","visitBinaryOperation","UnaryOperationNode","visitUnaryOperation","UsingNode","visitUsing","FunctionNode","visitFunction","visitCase","WhenNode","visitWhen","JSONReferenceNode","visitJSONReference","JSONPathNode","visitJSONPath","JSONPathLegNode","visitJSONPathLeg","JSONOperatorChainNode","visitJSONOperatorChain","TupleNode","visitTuple","MergeQueryNode","visitMergeQuery","MatchedNode","visitMatched","visitAddIndex","CastNode","visitCast","FetchNode","visitFetch","TopNode","visitTop","visitNode","pop","DefaultQueryCompiler","numParameters","getSql","wrapInParens","explain","append","with","distinctOn","compileDistinctOn","compileList","top","selections","joins","groupBy","having","setOperations","orderBy","limit","offset","fetch","sortSelectModifiers","froms","selection","expressions","nodes","separator","lastIndex","rootQueryNode","isSubQuery","ignore","into","defaultValues","onConflict","onDuplicateKey","returning","alias","getLeftIdentifierWrapper","compileUnwrappedIdentifier","getRightIdentifierWrapper","isString","sanitizeIdentifier","left","right","appendImmediateValue","appendValue","JOIN_TYPE_SQL","joinType","sqlFragments","operator","identifier","getAutoIncrement","items","direction","updates","indexExpression","indexWhere","doNothing","updateWhere","recursive","isBoolean","compileColumnAlterations","announcesNewColumnDataType","dataTypeExpression","rawModifier","SELECT_MODIFIER_SQL","of","format","getLeftExplainOptionsWrapper","getExplainOptionsDelimiter","getExplainOptionAssignment","getRightExplainOptionsWrapper","distinct","aggregated","over","partitionBy","leftOperand","rightOperand","isMinusOperator","operand","arguments","when","else","isStatement","condition","traversal","inOperator","pathLeg","pathLegs","isArrayLocation","type","String","len","whens","not","bySource","rowCount","modifiers","parameter","addParameter","getCurrentParameterPlaceholder","leftWrap","rightWrap","sanitized","isNumber","isNull","isDate","toISOString","isBigInt","arr","sort","SELECT_MODIFIER_PRIORITY","ForKeyShare","ForNoKeyUpdate","ForUpdate","ForShare","NoWait","SkipLocked","Distinct","InnerJoin","LeftJoin","RightJoin","FullJoin","LateralInnerJoin","LateralLeftJoin","Using","ID_WRAP_REGEX","SqliteQueryCompiler","EvoluFactory","Common","Layer","flushSync","serviceOption","FlushSync","getOrElse","Db","instances","createEvolu","runtime","createRuntime","defaultConfig","dbSchema","schemaToTables","evolu","runSync","getPropertySignatures","Record","toEntries","out","propertySignatures","AST","ast","propertySignature","Config","dbFactory","appState","nanoIdGenerator","errorStore","makeStore","ownerStore","rowsStore","syncStateStore","initialSyncState","loadingPromises","subscribedQueries","handleAllErrors","tapError","logError","setState","runFork","flow","runPromise","initialDataAsMutations","provideService","initialDataToMutations","refreshQueries","handlePatches","releaseUnsubscribedLoadingPromises","appStateReset","rowsStoreStateFromPatches","nextState","resolveLoadingPromises","rowsStoreState","getState","loadingPromise","promise","status","assign","releaseOnResolve","delete","queue","onComplete","rowId","queueMicrotask","onCompletes","onCompletesDef","isNotUndefined","subscribeError","subscribe","getError","createQuery","queryCallback","kysely","isSqlMutation","loadQuery","_resolve","subscribeQuery","listener","unsubscribe","count","getQuery","subscribeOwner","getOwner","subscribeSyncState","getSyncState","createOrUpdate","reload","reloadApp","createIndexes","Id","SqliteDate","s","isNaN","SqliteBoolean","fields","ReservedColumns","createdAt","updatedAt","isDeleted","database","maybeJson","String1000","NonEmptyString1000","PositiveInt","platformSqliteFactory","platformSqlite","maybeParseJson","mode","exit","valuesToSqliteValues","parseArray","o","parseString","isArray","parseObject","isSqlMutationRegEx","RegExp","test","maybeLogSqliteQueryExecutionTime","logQueryExecutionTime","start","elapsed","parentId","parent","indent","r","detail","initialState","listeners","Set","TypeId","defaultConsole","withConsole","setConsole","consoleWith","assert","clear","countReset","debug","dir","dirxml","group","info","timeLog","trace","warn","withGroup","withTime","dynamicReference","refType","parseSimpleReferenceExpression","isDynamicReferenceBuilder","parseUnaryOperation","parseReferenceExpression","JSONPathBuilder","at","legType","TraversedJSONPathBuilder","expressionType","AliasedJSONPathBuilder","$castTo","$notNull","jsonPath","createExpressionBuilder","NOOP_QUERY_EXECUTOR","unary","expr","ExpressionWrapper","eb","lhs","rhs","parseValueBinaryOperation","selectFrom","createSelectQueryBuilder","parseTableExpressionOrList","case","parseJSONReference","val","parseValueExpression","refTuple","tuple","lit","parseSafeImmediateValue","exists","neg","between","end","betweenSymmetric","and","exprs","isReadonlyArray","parseFilterList","parseFilterObject","or","parens","expressionBuilder","AliasedExpressionWrapper","OrWrapper","AndWrapper","cloneWithWhen","caseNode","cloneWithThen","slice","cloneWithTables","fromItems","withNode","cloneWithOrderByItems","deleteNode","cloneWithoutOrderBy","cloneWithLimit","cloneWithoutLimit","cloneWithUsing","cloneWithFroms","createWithoutInto","insertQuery","cloneWithOperation","onNode","operation","createWithOn","cloneWithOn","joinNode","cloneWithValue","cloneWithLeg","jsonPathNode","cloneWithTraversal","mergeNode","transformAlias","transformColumn","transformIdentifier","transformSchemableIdentifier","transformRaw","transformReference","transformSelectQuery","transformSelection","transformTable","transformFrom","transformSelectAll","transformAnd","transformOr","transformValueList","transformPrimitiveValueList","transformParens","transformJoin","transformOperator","transformWhere","transformInsertQuery","transformDeleteQuery","transformReturning","transformCreateTable","transformAddColumn","transformColumnDefinition","transformDropTable","transformDataType","transformOrderBy","transformOrderByItem","transformGroupBy","transformGroupByItem","transformUpdateQuery","transformColumnUpdate","transformLimit","transformOffset","transformOnConflict","transformOnDuplicateKey","transformCreateIndex","transformDropIndex","transformList","transformPrimaryKeyConstraint","transformUniqueConstraint","transformReferences","transformCheckConstraint","transformWith","transformCommonTableExpression","transformCommonTableExpressionName","transformHaving","transformCreateSchema","transformDropSchema","transformAlterTable","transformDropColumn","transformRenameColumn","transformAlterColumn","transformModifyColumn","transformAddConstraint","transformDropConstraint","transformForeignKeyConstraint","transformCreateView","transformDropView","transformGenerated","transformDefaultValue","transformOn","transformValues","transformSelectModifier","transformCreateType","transformDropType","transformExplain","transformDefaultInsertValue","transformAggregateFunction","transformOver","transformPartitionBy","transformPartitionByItem","transformSetOperation","transformBinaryOperation","transformUnaryOperation","transformUsing","transformFunction","transformCase","transformWhen","transformJSONReference","transformJSONPath","transformJSONPathLeg","transformJSONOperatorChain","transformTuple","transformMergeQuery","transformMatched","transformAddIndex","transformCast","transformFetch","transformTop","transformNodeImpl","transformNodeList","list","COMPARISON_OPERATORS","ARITHMETIC_OPERATORS","JSON_OPERATORS","BINARY_OPERATORS","UNARY_FILTER_OPERATORS","UNARY_OPERATORS","OPERATORS","isOperator","isBinaryOperator","isComparisonOperator","isArithmeticOperator","isJSONOperator","cloneWithItems","cloneWithSelections","cloneWithWhere","cloneWithJoin","cloneWithReturning","cloneWithoutReturning","cloneWithoutWhere","cloneWithExplain","cloneWithTop","createWithSql","createWithChild","child","createWithChildren","children","fill","createSelectAll","createWithSchema","havingNode","createFrom","select","cloneWithDistinctOn","selectNode","cloneWithGroupByItems","cloneWithOffset","cloneWithFetch","cloneWithHaving","cloneWithSetOperations","cloneWithoutSelections","cloneWithoutOffset","createWithoutTable","cloneWithFromItems","updateQuery","cloneWithUpdates","createImmediate","cloneWithResult","whenNode","whereNode","isIsOperator","needsIsOperator","parseOperator","parseValueExpressionOrList","parseReferentialBinaryOperation","combinator","v","k","withParens","combine","nodeOrSource","SIMPLE_COLUMN_DATA_TYPES","COLUMN_DATA_TYPE_REGEX","isColumnDataType","exp","parseAliasedExpression","isExpressionOrFactory","isExpression","isAliasedExpression","parseJoin","lhsColumn","rhsColumn","parseTableExpression","parseSingleOnJoin","createJoinBuilder","parseCallbackJoin","isOrderByDirection","thing","parseOrderBy","parseOrderByItem","item","parsedRef","parseOrderByDirectionExpression","parseOrderByExpression","overNode","cloneWithPartitionByItems","JoinBuilder","onRef","onTrue","parsePartitionBy","parseReferenceExpressionOrList","OverBuilder","createQueryCreator","createOverBuilder","arg","it","referenceNode","opWithoutLastChar","parseStringReferenceWithTableAndSchema","parseStringReferenceWithTable","parseAliasedStringReference","ALIAS_SEPARATOR","columnRef","order","createSelectAllFromTable","parseSelectArg","parseSelectExpression","parseSelectAll","parseSelectAllArg","parseAliasedTable","parseTop","isTopModifiers","parseValueExpressionList","isSafeImmediateValue","ROOT_OPERATION_NODES","WithSchemaTransformer","ctes","cte","transformed","schemableIds","cteId","CaseThenBuilder","valueExpression","CaseWhenBuilder","CaseEndBuilder","endCase","aggregateFunction","cloneWithDistinct","aggregateFunctionNode","cloneWithFilter","cloneWithOrFilter","cloneWithOver","AggregateFunctionBuilder","AliasedAggregateFunctionBuilder","filterWhere","filterWhereRef","aggregateFunctionBuilder","agg","avg","coalesce","countAll","max","min","sum","any","jsonAgg","toJson","NoResultError","isNoResultErrorConstructor","prototype","hasOwnProperty","parseGroupBy","parseSetOperations","parseFetch","SelectQueryBuilderImpl","isSelectQueryBuilder","whereRef","havingRef","forUpdate","asArray","forShare","forKeyShare","forNoKeyUpdate","skipLocked","noWait","selectAll","innerJoin","leftJoin","rightJoin","fullJoin","innerJoinLateral","leftJoinLateral","union","unionAll","intersect","intersectAll","except","exceptAll","AliasedSelectQueryBuilderImpl","clearSelect","clearWhere","clearLimit","clearOffset","clearOrderBy","$if","$narrowType","$assertType","$asTuple","executeTakeFirst","executeTakeFirstOrThrow","errorConstructor","stream","chunkSize","queryBuilder","isAliasedSelectQueryBuilder","parseInsertExpression","objectOrList","cols","col","size","parseColumnNamesAndIndexes","rowColumns","rowValues","hasUndefinedOrComplexColumns","columnIdx","hasMissingColumns","parseRowValues","parseInsertColumnsAndValues","parseUpdate","parseUpdateObjectExpression","updateObj","InsertResult","insertId","numInsertedOrUpdatedRows","cloneWithIndexWhere","cloneWithIndexOrWhere","cloneWithUpdateWhere","cloneWithUpdateOrWhere","cloneWithoutIndexWhere","cloneWithoutUpdateWhere","OnConflictBuilder","columnNode","onConflictNode","columnNodes","OnConflictDoNothingBuilder","doUpdateSet","OnConflictUpdateBuilder","InsertQueryBuilder","onDuplicateKeyUpdate","returningAll","clearReturning","numAffectedRows","numUpdatedOrDeletedRows","DeleteResult","numDeletedRows","DeleteQueryBuilder","BigInt","UpdateResult","numUpdatedRows","numChangedRows","UpdateQueryBuilder","columnNames","CTEBuilder","notMaterialized","parseCommonTableExpression","nameOrBuilderCallback","expressionNode","parseCommonTableExpressionName","cteBuilderFactory","cloneWithExpression","parseMergeWhen","refRight","isMatched","parseMergeThen","MergeResult","MergeQueryBuilder","WheneableMergeQueryBuilder","whenMatched","whenMatchedAnd","whenMatchedAndRef","MatchedThenableMergeQueryBuilder","whenNotMatched","whenNotMatchedAnd","whenNotMatchedAndRef","whenNotMatchedBySource","whenNotMatchedBySourceAnd","whenNotMatchedBySourceAndRef","NotMatchedThenableMergeQueryBuilder","thenDelete","thenDoNothing","thenUpdate","thenUpdateSet","ub","thenInsertValues","selectNoFrom","insertInto","replaceInto","deleteFrom","updateTable","mergeInto","nameOrBuilder","withRecursive","NoopQueryExecutor","reason","LOGGED_MESSAGES","NO_PLUGINS","transformedNode","transformedResult","warnOfOutdatedDriverOrPlugins","connectionDefer","connectionReleaseDefer","ex","isEmpty","isBuffer","Buffer","isArrayBufferOrView","ArrayBuffer","isView","isPlainObject","getLast","asReadonlyArray","compare","obj1","obj2","arr1","arr2","compareArrays","buf1","buf2","date2","getTime","keys1","keys2","compareGenericObjects","compareObjects","clazz","defineProperties","enumerable","CHARS","LazyQueryId","chars","Math","random","randomString"],"sourceRoot":""}