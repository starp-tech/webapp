{"version":3,"file":"884.js","mappings":"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","sources":["webpack://StarpyApp/./node_modules/@ffmpeg/util/dist/cjs/const.js","webpack://StarpyApp/./node_modules/@ffmpeg/util/dist/cjs/errors.js","webpack://StarpyApp/./node_modules/@ffmpeg/util/dist/cjs/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeaderContentLength = void 0;\nexports.HeaderContentLength = \"Content-Length\";\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERROR_INCOMPLETED_DOWNLOAD = exports.ERROR_RESPONSE_BODY_READER = void 0;\nexports.ERROR_RESPONSE_BODY_READER = new Error(\"failed to get response body reader\");\nexports.ERROR_INCOMPLETED_DOWNLOAD = new Error(\"failed to complete download\");\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toBlobURL = exports.downloadWithProgress = exports.importScript = exports.fetchFile = void 0;\nconst errors_js_1 = require(\"./errors.js\");\nconst const_js_1 = require(\"./const.js\");\nconst readFromBlobOrFile = (blob) => new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n        const { result } = fileReader;\n        if (result instanceof ArrayBuffer) {\n            resolve(new Uint8Array(result));\n        }\n        else {\n            resolve(new Uint8Array());\n        }\n    };\n    fileReader.onerror = (event) => {\n        var _a, _b;\n        reject(Error(`File could not be read! Code=${((_b = (_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.code) || -1}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n});\n/**\n * An util function to fetch data from url string, base64, URL, File or Blob format.\n *\n * Examples:\n * ```ts\n * // URL\n * await fetchFile(\"http://localhost:3000/video.mp4\");\n * // base64\n * await fetchFile(\"data:<type>;base64,wL2dvYWwgbW9yZ...\");\n * // URL\n * await fetchFile(new URL(\"video.mp4\", import.meta.url));\n * // File\n * fileInput.addEventListener('change', (e) => {\n *   await fetchFile(e.target.files[0]);\n * });\n * // Blob\n * const blob = new Blob(...);\n * await fetchFile(blob);\n * ```\n */\nconst fetchFile = (file) => __awaiter(void 0, void 0, void 0, function* () {\n    let data;\n    if (typeof file === \"string\") {\n        /* From base64 format */\n        if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(file)) {\n            data = atob(file.split(\",\")[1])\n                .split(\"\")\n                .map((c) => c.charCodeAt(0));\n            /* From remote server/URL */\n        }\n        else {\n            data = yield (yield fetch(file)).arrayBuffer();\n        }\n    }\n    else if (file instanceof URL) {\n        data = yield (yield fetch(file)).arrayBuffer();\n    }\n    else if (file instanceof File || file instanceof Blob) {\n        data = yield readFromBlobOrFile(file);\n    }\n    else {\n        return new Uint8Array();\n    }\n    return new Uint8Array(data);\n});\nexports.fetchFile = fetchFile;\n/**\n * importScript dynamically import a script, useful when you\n * want to use different versions of ffmpeg.wasm based on environment.\n *\n * Example:\n *\n * ```ts\n * await importScript(\"http://localhost:3000/ffmpeg.js\");\n * ```\n */\nconst importScript = (url) => __awaiter(void 0, void 0, void 0, function* () {\n    return new Promise((resolve) => {\n        const script = document.createElement(\"script\");\n        const eventHandler = () => {\n            script.removeEventListener(\"load\", eventHandler);\n            resolve();\n        };\n        script.src = url;\n        script.type = \"text/javascript\";\n        script.addEventListener(\"load\", eventHandler);\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\n    });\n});\nexports.importScript = importScript;\n/**\n * Download content of a URL with progress.\n *\n * Progress only works when Content-Length is provided by the server.\n *\n */\nconst downloadWithProgress = (url, cb) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    const resp = yield fetch(url);\n    let buf;\n    try {\n        // Set total to -1 to indicate that there is not Content-Type Header.\n        const total = parseInt(resp.headers.get(const_js_1.HeaderContentLength) || \"-1\");\n        const reader = (_a = resp.body) === null || _a === void 0 ? void 0 : _a.getReader();\n        if (!reader)\n            throw errors_js_1.ERROR_RESPONSE_BODY_READER;\n        const chunks = [];\n        let received = 0;\n        for (;;) {\n            const { done, value } = yield reader.read();\n            const delta = value ? value.length : 0;\n            if (done) {\n                if (total != -1 && total !== received)\n                    throw errors_js_1.ERROR_INCOMPLETED_DOWNLOAD;\n                cb && cb({ url, total, received, delta, done });\n                break;\n            }\n            chunks.push(value);\n            received += delta;\n            cb && cb({ url, total, received, delta, done });\n        }\n        const data = new Uint8Array(received);\n        let position = 0;\n        for (const chunk of chunks) {\n            data.set(chunk, position);\n            position += chunk.length;\n        }\n        buf = data.buffer;\n    }\n    catch (e) {\n        console.log(`failed to send download progress event: `, e);\n        // Fetch arrayBuffer directly when it is not possible to get progress.\n        buf = yield resp.arrayBuffer();\n        cb &&\n            cb({\n                url,\n                total: buf.byteLength,\n                received: buf.byteLength,\n                delta: 0,\n                done: true,\n            });\n    }\n    return buf;\n});\nexports.downloadWithProgress = downloadWithProgress;\n/**\n * toBlobURL fetches data from an URL and return a blob URL.\n *\n * Example:\n *\n * ```ts\n * await toBlobURL(\"http://localhost:3000/ffmpeg.js\", \"text/javascript\");\n * ```\n */\nconst toBlobURL = (url, mimeType, progress = false, cb) => __awaiter(void 0, void 0, void 0, function* () {\n    const buf = progress\n        ? yield (0, exports.downloadWithProgress)(url, cb)\n        : yield (yield fetch(url)).arrayBuffer();\n    const blob = new Blob([buf], { type: mimeType });\n    return URL.createObjectURL(blob);\n});\nexports.toBlobURL = toBlobURL;\n"],"names":["Object","defineProperty","exports","value","HeaderContentLength","ERROR_INCOMPLETED_DOWNLOAD","ERROR_RESPONSE_BODY_READER","Error","__awaiter","this","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","toBlobURL","downloadWithProgress","importScript","fetchFile","errors_js_1","const_js_1","file","data","test","atob","split","map","c","charCodeAt","fetch","arrayBuffer","URL","File","Blob","Uint8Array","blob","fileReader","FileReader","onload","ArrayBuffer","onerror","event","_a","_b","target","error","code","readAsArrayBuffer","url","script","document","createElement","eventHandler","removeEventListener","src","type","addEventListener","getElementsByTagName","appendChild","cb","resp","buf","total","parseInt","headers","get","reader","body","getReader","chunks","received","read","delta","length","push","position","chunk","set","buffer","console","log","byteLength","mimeType","progress","createObjectURL"],"sourceRoot":""}